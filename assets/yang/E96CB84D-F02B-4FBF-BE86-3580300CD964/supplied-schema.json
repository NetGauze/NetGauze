{
  "name": "ietf-yp-observation",
  "schema_type": {
    "Other": "YANG"
  },
  "schema": "module ietf-yp-observation {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yp-observation\";\n  prefix ypot;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-push {\n    prefix yp;\n    reference\n      \"RFC 8641: Subscription to YANG Notifications for Datastore Updates\";\n  }\n  import ietf-system-capabilities {\n    prefix sysc;\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for\n       Systems and Datastore Update Notifications\";\n  }\n  import ietf-notification-capabilities {\n    prefix notc;\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for\n       Systems and Datastore Update Notifications\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <http:/tools.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Authors:  Thomas Graf\n               <mailto:thomas.graf@swisscom.com>\n               Benoit Claise\n               <mailto:benoit.claise@huawei.com>\n               Alex Huang Feng\n               <mailto:alex.huang-feng@insa-lyon.fr>\";\n  description\n    \"Defines YANG-Push event notification header with the observation\n     time and subscription filter in streaming update notifications.\n\n     Copyright (c) 2025 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or without\n     modification, is permitted pursuant to, and subject to the license\n     terms contained in, the Revised BSD License set forth in Section\n     4.c of the IETF Trust's Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC XXXX; see the RFC\n     itself for full legal notices.\";\n\n  revision 2025-05-24 {\n    description\n      \"First revision\";\n    reference\n      \"RFC XXXX: Extensible YANG Model for Network Telemetry Notifications\";\n  }\n\n  feature yang-push-observation-timestamp {\n    description\n      \"This feature indicates the YANG-push Notifications support\n       the observation timestamps in streaming update notifications.\";\n  }\n\n  feature yang-push-subscription-filter-metadata {\n    description\n      \"This feature indicates the YANG-push Notifications support\n       the subscription filter metadata in streaming update notifications.\";\n  }\n\n  grouping yang-push-observation {\n    description\n      \"This grouping adds the observation timestamp for the observed metrics.\";\n    leaf timestamp {\n      type yang:date-and-time;\n      description\n        \"This is the time when metrics were observed.\";\n    }\n    leaf point-in-time {\n      type enumeration {\n        enum \"current-accounting\" {\n          description\n            \"For periodical subscriptions, the point-in-time\n             where the metrics are being polled and observed.\";\n        }\n        enum \"initial-state\" {\n          description\n            \"For 'on-change sync on start' subscriptions, the\n             initial point in time when the subscription was established\n             and the state was observed.\";\n        }\n        enum \"state-changed\" {\n          description\n            \"For 'on-change sync on start' subscriptions, the\n             point in time when the state change was observed after the\n             subscription was established.\";\n        }\n      }\n      description\n        \"This describes at which point in time the metrics were observed\";\n    }\n  }\n\n  augment \"/yp:push-update\" {\n    description\n      \"This augmentation adds the observation timestamp of the accounted metrics\n       in the push-update notification.\";\n    uses yp:selection-filter-objects {\n      refine \"selection-filter/within-subscription\" {\n        description\n          \"Specifies the selection filter and where it originated\n           from. If the 'selection-filter-ref' is populated, the\n           filter in the subscription came from the 'filters'\n           container. Otherwise, it is populated in-line as part\n           of the subscription itself.\";\n      }\n    }\n    uses ypot:yang-push-observation;\n  }\n  augment \"/yp:push-change-update\" {\n    description\n      \"This augmentation adds the observation timestamp of the event\n       in the push-change-update notification.\";\n    uses yp:selection-filter-objects {\n      refine \"selection-filter/within-subscription\" {\n        description\n          \"Specifies the selection filter and where it originated\n           from. If the 'selection-filter-ref' is populated, the\n           filter in the subscription came from the 'filters'\n           container. Otherwise, it is populated in-line as part\n           of the subscription itself.\";\n      }\n    }\n    uses ypot:yang-push-observation;\n  }\n  augment \"/sysc:system-capabilities/notc:subscription-capabilities\" {\n    description\n      \"Add system level capabilities\";\n    leaf yang-push-observation-supported {\n      if-feature \"yang-push-observation-timestamp\";\n      type boolean;\n      description\n        \"Specifies whether the publisher supports exporting\n         observation-timestamp and point-in-time in notifications.\";\n      reference\n        \"RFC XXXX: Extensible YANG Model for YANG-Push Notifications\";\n    }\n    leaf yang-push-subscription-filter-metadata-supported {\n      if-feature \"yang-push-subscription-filter-metadata\";\n      type boolean;\n      description\n        \"Specifies whether the publisher supports exporting\n         YANG-Push subscription filter in notifications.\";\n      reference\n        \"RFC XXXX: Extensible YANG Model for YANG-Push Notifications\";\n    }\n  }\n}\n",
  "references": [
    {
      "name": "ietf-yang-types",
      "subject": "ietf-yang-types-subject",
      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
      "references": [],
      "properties": null,
      "tags": null
    },
    {
      "name": "ietf-yang-push",
      "subject": "ietf-yang-push-subject",
      "schema": "module ietf-yang-push {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-push\";\n  prefix yp;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-subscribed-notifications {\n    prefix sn;\n    reference\n      \"RFC 8639: Subscription to YANG Notifications\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-patch {\n    prefix ypatch;\n    reference\n      \"RFC 8072: YANG Patch Media Type\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\";\n  description\n    \"This module contains YANG specifications for YANG-Push.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8641; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8641: Subscriptions to YANG Datastores\";\n  }\n\n  rc:yang-data \"resync-subscription-error\" {\n    container resync-subscription-error {\n      description\n        \"If a 'resync-subscription' RPC fails, the subscription is\n         not resynced and the RPC error response MUST indicate the\n         reason for this failure.  This yang-data MAY be inserted as\n         structured data in a subscription's RPC error response\n         to indicate the reason for the failure.\";\n      leaf reason {\n        type identityref {\n          base resync-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the publisher has declined a\n           request for subscription resynchronization.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"establish-subscription-datastore-error-info\" {\n    container establish-subscription-datastore-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the datastore, a subscription is not\n         created and the RPC error response MUST indicate the reason\n         why the subscription failed to be created.  This yang-data\n         MAY be inserted as structured data in a subscription's\n         RPC error response to indicate the reason for the failure.\n         This yang-data MUST be inserted if hints are to be provided\n         back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted datastore.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"modify-subscription-datastore-error-info\" {\n    container modify-subscription-datastore-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against a\n         datastore.  This yang-data MUST be used if hints are to be\n         provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:modify-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be modified.\";\n      }\n      uses hints;\n    }\n  }\n\n  feature on-change {\n    description\n      \"This feature indicates that on-change triggered subscriptions\n       are supported.\";\n  }\n\n  identity resync-subscription-error {\n    description\n      \"Problem found while attempting to fulfill a\n       'resync-subscription' RPC request.\";\n  }\n\n  identity cant-exclude {\n    base sn:establish-subscription-error;\n    description\n      \"Unable to remove the set of 'excluded-change' parameters.\n       This means that the publisher is unable to restrict\n       'push-change-update' notifications to just the change types\n       requested for this subscription.\";\n  }\n\n  identity datastore-not-subscribable {\n    base sn:establish-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"This is not a subscribable datastore.\";\n  }\n\n  identity no-such-subscription-resync {\n    base resync-subscription-error;\n    description\n      \"The referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity on-change-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"On-change is not supported for any objects that are\n       selectable by this filter.\";\n  }\n\n  identity on-change-sync-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"Neither 'sync-on-start' nor resynchronization is supported for\n       this subscription.  This error will be used for two reasons:\n       (1) if an 'establish-subscription' RPC includes\n       'sync-on-start' but the publisher can't support sending a\n       'push-update' for this subscription for reasons other than\n       'on-change-unsupported' or 'sync-too-big'\n       (2) if the 'resync-subscription' RPC is invoked for either an\n       existing periodic subscription or an on-change subscription\n       that can't support resynchronization.\";\n  }\n\n  identity period-unsupported {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The requested time period or 'dampening-period' is too short.\n       This can be for both periodic and on-change subscriptions\n       (with or without dampening).  Hints suggesting alternative\n       periods may be returned as supplemental information.\";\n  }\n\n  identity update-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"Periodic or on-change push update data trees exceed a maximum\n       size limit.  Hints on the estimated size of what was too big\n       may be returned as supplemental information.\";\n  }\n\n  identity sync-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base resync-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The 'sync-on-start' or resynchronization data tree exceeds a\n       maximum size limit.  Hints on the estimated size of what was\n       too big may be returned as supplemental information.\";\n  }\n\n  identity unchanging-selection {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"The selection filter is unlikely to ever select data tree\n       nodes.  This means that based on the subscriber's current\n       access rights, the publisher recognizes that the selection\n       filter is unlikely to ever select data tree nodes that change.\n       Examples for this might be that the node or subtree doesn't\n       exist, read access is not permitted for a receiver, or static\n       objects that only change at reboot have been chosen.\";\n  }\n\n  typedef change-type {\n    type enumeration {\n      enum \"create\" {\n        description\n          \"A change that refers to the creation of a new\n           datastore node.\";\n      }\n      enum \"delete\" {\n        description\n          \"A change that refers to the deletion of a\n           datastore node.\";\n      }\n      enum \"insert\" {\n        description\n          \"A change that refers to the insertion of a new\n           user-ordered datastore node.\";\n      }\n      enum \"move\" {\n        description\n          \"A change that refers to a reordering of the target\n           datastore node.\";\n      }\n      enum \"replace\" {\n        description\n          \"A change that refers to a replacement of the target\n           datastore node's value.\";\n      }\n    }\n    description\n      \"Specifies different types of datastore changes.\n\n       This type is based on the edit operations defined for\n       YANG Patch, with the difference that it is valid for a\n       receiver to process an update record that performs a\n       'create' operation on a datastore node the receiver believes\n       exists or to process a delete on a datastore node the\n       receiver believes is missing.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type, Section 2.5\";\n  }\n\n  typedef selection-filter-ref {\n    type leafref {\n      path \"/sn:filters/yp:selection-filter/yp:filter-id\";\n    }\n    description\n      \"This type is used to reference a selection filter.\";\n  }\n\n  typedef centiseconds {\n    type uint32;\n    description\n      \"A period of time, measured in units of 0.01 seconds.\";\n  }\n\n  grouping datastore-criteria {\n    description\n      \"A grouping to define criteria for which selected objects from\n       a targeted datastore should be included in push updates.\";\n    leaf datastore {\n      type identityref {\n        base ds:datastore;\n      }\n      mandatory true;\n      description\n        \"Datastore from which to retrieve data.\";\n    }\n    uses selection-filter-objects;\n  }\n\n  grouping selection-filter-types {\n    description\n      \"This grouping defines the types of selectors for objects\n       from a datastore.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata datastore-subtree-filter {\n        if-feature \"sn:subtree\";\n        description\n          \"This parameter identifies the portions of the\n           target datastore to retrieve.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf datastore-xpath-filter {\n        if-feature \"sn:xpath\";\n        type yang:xpath1.0;\n        description\n          \"This parameter contains an XPath expression identifying\n           the portions of the target datastore to retrieve.\n\n           If the expression returns a node set, all nodes in the\n           node set are selected by the filter.  Otherwise, if the\n           expression does not return a node set, the filter\n           doesn't select any nodes.\n\n           The expression is evaluated in the following XPath\n           context:\n\n           o  The set of namespace declarations is the set of prefix\n              and namespace pairs for all YANG modules implemented\n              by the server, where the prefix is the YANG module\n              name and the namespace is as defined by the\n              'namespace' statement in the YANG module.\n\n              If the leaf is encoded in XML, all namespace\n              declarations in scope on the 'stream-xpath-filter'\n              leaf element are added to the set of namespace\n              declarations.  If a prefix found in the XML is\n              already present in the set of namespace declarations,\n              the namespace in the XML is used.\n\n           o  The set of variable bindings is empty.\n\n           o  The function library is comprised of the core\n              function library and the XPath functions defined in\n              Section 10 in RFC 7950.\n\n           o  The context node is the root node of the target\n              datastore.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping selection-filter-objects {\n    description\n      \"This grouping defines a selector for objects from a\n       datastore.\";\n    choice selection-filter {\n      description\n        \"The source of the selection filter applied to the\n         subscription.  This will either (1) come referenced from a\n         global list or (2) be provided in the subscription itself.\";\n      case by-reference {\n        description\n          \"Incorporates a filter that has been configured\n           separately.\";\n        leaf selection-filter-ref {\n          type selection-filter-ref;\n          mandatory true;\n          description\n            \"References an existing selection filter that is to be\n             applied to the subscription.\";\n        }\n      }\n      case within-subscription {\n        description\n          \"A local definition allows a filter to have the same\n           lifecycle as the subscription.\";\n        uses selection-filter-types;\n      }\n    }\n  }\n\n  grouping update-policy-modifiable {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions that can be changed during the lifetime of the\n       subscription.\";\n    choice update-trigger {\n      description\n        \"Defines necessary conditions for sending an event record to\n         the subscriber.\";\n      case periodic {\n        container periodic {\n          presence \"indicates a periodic subscription\";\n          description\n            \"The publisher is requested to periodically notify the\n             receiver regarding the current values of the datastore\n             as defined by the selection filter.\";\n          leaf period {\n            type centiseconds;\n            mandatory true;\n            description\n              \"Duration of time that should occur between periodic\n               push updates, in units of 0.01 seconds.\";\n          }\n          leaf anchor-time {\n            type yang:date-and-time;\n            description\n              \"Designates a timestamp before or after which a series\n               of periodic push updates are determined.  The next\n               update will take place at a point in time that is a\n               multiple of a period from the 'anchor-time'.\n               For example, for an 'anchor-time' that is set for the\n               top of a particular minute and a period interval of a\n               minute, updates will be sent at the top of every\n               minute that this subscription is active.\";\n          }\n        }\n      }\n      case on-change {\n        if-feature \"on-change\";\n        container on-change {\n          presence \"indicates an on-change subscription\";\n          description\n            \"The publisher is requested to notify the receiver\n             regarding changes in values in the datastore subset as\n             defined by a selection filter.\";\n          leaf dampening-period {\n            type centiseconds;\n            default \"0\";\n            description\n              \"Specifies the minimum interval between the assembly of\n               successive update records for a single receiver of a\n               subscription.  Whenever subscribed objects change and\n               a dampening-period interval (which may be zero) has\n               elapsed since the previous update record creation for\n               a receiver, any subscribed objects and properties\n               that have changed since the previous update record\n               will have their current values marshalled and placed\n               in a new update record.\";\n          }\n        }\n      }\n    }\n  }\n\n  grouping update-policy {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions of a subscription.\";\n    uses update-policy-modifiable {\n      augment \"update-trigger/on-change/on-change\" {\n        description\n          \"Includes objects that are not modifiable once a\n           subscription is established.\";\n        leaf sync-on-start {\n          type boolean;\n          default \"true\";\n          description\n            \"When this object is set to 'false', (1) it restricts an\n             on-change subscription from sending 'push-update'\n             notifications and (2) pushing a full selection per the\n             terms of the selection filter MUST NOT be done for\n             this subscription.  Only updates about changes\n             (i.e., only 'push-change-update' notifications)\n             are sent.  When set to 'true' (the default behavior),\n             in order to facilitate a receiver's synchronization,\n             a full update is sent, via a 'push-update' notification,\n             when the subscription starts.  After that,\n             'push-change-update' notifications are exclusively sent,\n             unless the publisher chooses to resync the subscription\n             via a new 'push-update' notification.\";\n        }\n        leaf-list excluded-change {\n          type change-type;\n          description\n            \"Used to restrict which changes trigger an update.  For\n             example, if a 'replace' operation is excluded, only the\n             creation and deletion of objects are reported.\";\n        }\n      }\n    }\n  }\n\n  grouping hints {\n    description\n      \"Parameters associated with an error for a subscription\n       made upon a datastore.\";\n    leaf period-hint {\n      type centiseconds;\n      description\n        \"Returned when the requested time period is too short.  This\n         hint can assert a viable period for either a periodic push\n         cadence or an on-change dampening interval.\";\n    }\n    leaf filter-failure-hint {\n      type string;\n      description\n        \"Information describing where and/or why a provided filter\n         was unsupportable for a subscription.\";\n    }\n    leaf object-count-estimate {\n      type uint32;\n      description\n        \"If there are too many objects that could potentially be\n         returned by the selection filter, this identifies the\n         estimate of the number of objects that the filter would\n         potentially pass.\";\n    }\n    leaf object-count-limit {\n      type uint32;\n      description\n        \"If there are too many objects that could be returned by\n         the selection filter, this identifies the upper limit of\n         the publisher's ability to service this subscription.\";\n    }\n    leaf kilobytes-estimate {\n      type uint32;\n      description\n        \"If the returned information could be beyond the capacity\n         of the publisher, this would identify the estimated\n         data size that could result from this selection filter.\";\n    }\n    leaf kilobytes-limit {\n      type uint32;\n      description\n        \"If the returned information would be beyond the capacity\n         of the publisher, this identifies the upper limit of the\n         publisher's ability to service this subscription.\";\n    }\n  }\n\n  augment \"/sn:establish-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       that apply specifically to datastore updates to RPC input.\";\n    uses update-policy;\n  }\n  augment \"/sn:establish-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:modify-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       specific to datastore updates.\";\n    uses update-policy-modifiable;\n  }\n  augment \"/sn:modify-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:subscription-started\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has started.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-started/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has started.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:subscription-modified\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has been modified.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-modified/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has been\n       modified.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:filters\" {\n    description\n      \"This augmentation allows the datastore to be included as part\n       of the selection-filtering criteria for a subscription.\";\n    list selection-filter {\n      key \"filter-id\";\n      description\n        \"A list of preconfigured filters that can be applied\n         to datastore subscriptions.\";\n      leaf filter-id {\n        type string;\n        description\n          \"An identifier to differentiate between selection\n           filters.\";\n      }\n      uses selection-filter-types;\n    }\n  }\n  augment \"/sn:subscriptions/sn:subscription\" {\n    when \"yp:datastore\";\n    description\n      \"This augmentation adds objects to a subscription that are\n       specific to a datastore subscription, i.e., a subscription to\n       a stream of datastore node updates.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscriptions/sn:subscription/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the selection-filtering criteria for a subscription.\";\n    case datastore {\n      uses datastore-criteria;\n    }\n  }\n\n  rpc resync-subscription {\n    if-feature \"on-change\";\n    description\n      \"This RPC allows a subscriber of an active on-change\n       subscription to request a full push of objects.\n\n       A successful invocation results in a 'push-update' of all\n       datastore nodes that the subscriber is permitted to access.\n       This RPC can only be invoked on the same session on which the\n       subscription is currently active.  In the case of an error, a\n       'resync-subscription-error' is sent as part of an error\n       response.\";\n\n    input {\n      leaf id {\n        type sn:subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be resynced.\";\n      }\n    }\n  }\n\n  notification push-update {\n    description\n      \"This notification contains a push update that in turn contains\n       data subscribed to via a subscription.  In the case of a\n       periodic subscription, this notification is sent for periodic\n       updates.  It can also be used for synchronization updates of\n       an on-change subscription.  This notification shall only be\n       sent to receivers of a subscription.  It does not constitute\n       a general-purpose notification that would be subscribable as\n       part of the NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    anydata datastore-contents {\n      description\n        \"This contains the updated data.  It constitutes a snapshot\n         at the time of update of the set of data that has been\n         subscribed to.  The snapshot corresponds to the same\n         snapshot that would be returned in a corresponding 'get'\n         operation with the same selection filter parameters\n         applied.\";\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"This is a flag that indicates that not all datastore\n         nodes subscribed to are included with this update.  In\n         other words, the publisher has failed to fulfill its full\n         subscription obligations and, despite its best efforts, is\n         providing an incomplete set of objects.\";\n    }\n  }\n  notification push-change-update {\n    if-feature \"on-change\";\n    description\n      \"This notification contains an on-change push update.  This\n       notification shall only be sent to the receivers of a\n       subscription.  It does not constitute a general-purpose\n       notification that would be subscribable as part of the\n       NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    container datastore-changes {\n      description\n        \"This contains the set of datastore changes of the target\n         datastore, starting at the time of the previous update, per\n         the terms of the subscription.\";\n      uses ypatch:yang-patch;\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"The presence of this object indicates that not all changes\n         that have occurred since the last update are included with\n         this update.  In other words, the publisher has failed to\n         fulfill its full subscription obligations -- for example,\n         in cases where it was not able to keep up with a burst of\n         changes.\";\n    }\n  }\n}\n",
      "references": [
        {
          "name": "ietf-yang-types",
          "subject": "ietf-yang-types-subject",
          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
          "references": [],
          "properties": null,
          "tags": null
        },
        {
          "name": "ietf-subscribed-notifications",
          "subject": "ietf-subscribed-notifications-subject",
          "schema": "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\";\n  prefix sn;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\n\n     Author:  Alberto Gonzalez Prieto\n              &lt;mailto:alberto.gonzalez@microsoft.com&gt;\n\n     Author:  Einar Nilsen-Nygaard\n              &lt;mailto:einarnn@cisco.com&gt;\n\n     Author:  Ambika Prasad Tripathy\n              &lt;mailto:ambtripa@cisco.com&gt;\";\n  description\n    \"This module defines a YANG data model for subscribing to event\n     records and receiving matching content in notification messages.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8639; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model for Subscriptions to\n                 Event Notifications\";\n  }\n\n  extension subscription-state-notification {\n    description\n      \"This statement applies only to notifications.  It indicates\n       that the notification is a subscription state change\n       notification.  Therefore, it does not participate in a regular\n       event stream and does not need to be specifically subscribed\n       to in order to be received.  This statement can only occur as\n       a substatement of the YANG 'notification' statement.  This\n       statement is not for use outside of this YANG module.\";\n  }\n\n  rc:yang-data \"establish-subscription-stream-error-info\" {\n    container establish-subscription-stream-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the event stream, a subscription\n         is not created and the RPC error response MUST indicate the\n         reason why the subscription failed to be created.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason for\n         the failure.  This yang-data MUST be inserted if hints are\n         to be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted event stream.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The\n           syntax and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"modify-subscription-stream-error-info\" {\n    container modify-subscription-stream-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against an\n         event stream.  This yang-data MUST be used if hints are to\n         be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base modify-subscription-error;\n        }\n        description\n          \"Information in a 'modify-subscription' RPC error response\n           that indicates the reason why the subscription to an event\n           stream has failed to be modified.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The syntax\n           and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"delete-subscription-error-info\" {\n    container delete-subscription-error-info {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription' RPC\n         fails, the subscription is not deleted and the RPC error\n         response MUST indicate the reason for this failure.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason\n         for the failure.\";\n      leaf reason {\n        type identityref {\n          base delete-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the subscription has failed to be\n           deleted.\";\n      }\n    }\n  }\n\n  feature configured {\n    description\n      \"This feature indicates that configuration of subscriptions is\n       supported.\";\n  }\n\n  feature dscp {\n    description\n      \"This feature indicates that a publisher supports the ability\n       to set the Differentiated Services Code Point (DSCP) value in\n       outgoing packets.\";\n  }\n\n  feature encode-json {\n    description\n      \"This feature indicates that JSON encoding of notification\n       messages is supported.\";\n  }\n\n  feature encode-xml {\n    description\n      \"This feature indicates that XML encoding of notification\n       messages is supported.\";\n  }\n\n  feature interface-designation {\n    description\n      \"This feature indicates that a publisher supports sourcing all\n       receiver interactions for a configured subscription from a\n       single designated egress interface.\";\n  }\n\n  feature qos {\n    description\n      \"This feature indicates that a publisher supports absolute\n       dependencies of one subscription's traffic over another\n       as well as weighted bandwidth sharing between subscriptions.\n       Both of these are Quality of Service (QoS) features that allow\n       differentiated treatment of notification messages between a\n       publisher and a specific receiver.\";\n  }\n\n  feature replay {\n    description\n      \"This feature indicates that historical event record replay is\n       supported.  With replay, it is possible for past event records\n       to be streamed in chronological order.\";\n  }\n\n  feature subtree {\n    description\n      \"This feature indicates support for YANG subtree filtering.\";\n    reference\n      \"RFC 6241: Network Configuration Protocol (NETCONF),\n                 Section 6\";\n  }\n\n  feature supports-vrf {\n    description\n      \"This feature indicates that a publisher supports VRF\n       configuration for configured subscriptions.  VRF support for\n       dynamic subscriptions does not require this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances,\n                 Section 6\";\n  }\n\n  feature xpath {\n    description\n      \"This feature indicates support for XPath filtering.\";\n    reference\n      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\";\n  }\n\n  identity delete-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription' RPC request.\";\n  }\n\n  identity establish-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill an 'establish-subscription' RPC request.\";\n  }\n\n  identity modify-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n\n  identity subscription-suspended-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n       notification.\";\n  }\n\n  identity subscription-terminated-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-terminated'\n       notification.\";\n  }\n\n  identity dscp-unavailable {\n    if-feature \"dscp\";\n    base establish-subscription-error;\n    description\n      \"The publisher is unable to mark notification messages with\n       prioritization information in a way that will be respected\n       during network transit.\";\n  }\n\n  identity encoding-unsupported {\n    base establish-subscription-error;\n    description\n      \"Unable to encode notification messages in the desired\n       format.\";\n  }\n\n  identity filter-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Referenced filter does not exist.  This means a receiver is\n       referencing a filter that doesn't exist or to which it\n       does not have access permissions.\";\n  }\n\n  identity filter-unsupported {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    description\n      \"Cannot parse syntax in the filter.  This failure can be from\n       a syntax error or a syntax too complex to be processed by the\n       publisher.\";\n  }\n\n  identity insufficient-resources {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have sufficient resources to support\n       the requested subscription.  An example might be that\n       allocated CPU is too limited to generate the desired set of\n       notification messages.\";\n  }\n\n  identity no-such-subscription {\n    base modify-subscription-error;\n    base delete-subscription-error;\n    base subscription-terminated-reason;\n    description\n      \"Referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity replay-unsupported {\n    if-feature \"replay\";\n    base establish-subscription-error;\n    description\n      \"Replay cannot be performed for this subscription.  This means\n       the publisher will not provide the requested historic\n       information from the event stream via replay to this\n       receiver.\";\n  }\n\n  identity stream-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Not a subscribable event stream.  This means the referenced\n       event stream is not available for subscription by the\n       receiver.\";\n  }\n\n  identity suspension-timeout {\n    base subscription-terminated-reason;\n    description\n      \"Termination of a previously suspended subscription.  The\n       publisher has eliminated the subscription, as it exceeded a\n       time limit for suspension.\";\n  }\n\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have the network bandwidth needed to\n       get the volume of generated information intended for a\n       receiver.\";\n  }\n\n  identity configurable-encoding {\n    description\n      \"If a transport identity derives from this identity, it means\n       that it supports configurable encodings.  An example of a\n       configurable encoding might be a new identity such as\n       'encode-cbor'.  Such an identity could use\n       'configurable-encoding' as its base.  This would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n       that notification messages be encoded via the Concise Binary\n       Object Representation (CBOR) (RFC 7049).  Further details for\n       any specific configurable encoding would be explored in a\n       transport document based on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object Notation (JSON) Data\n                 Interchange Format\n       RFC 7049: Concise Binary Object Representation (CBOR)\";\n  }\n\n  identity encoding {\n    description\n      \"Base identity to represent data encodings.\";\n  }\n\n  identity encode-xml {\n    if-feature \"encode-xml\";\n    base encoding;\n    description\n      \"Encode data using XML as described in RFC 7950.\";\n    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\n  identity encode-json {\n    if-feature \"encode-json\";\n    base encoding;\n    description\n      \"Encode data using JSON as described in RFC 7951.\";\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\";\n  }\n\n  identity transport {\n    description\n      \"An identity that represents the underlying mechanism for\n       passing notification messages.\";\n  }\n\n  typedef encoding {\n    type identityref {\n      base encoding;\n    }\n    description\n      \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n\n  typedef stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\";\n    }\n    description\n      \"This type is used to reference an event stream filter.\";\n  }\n\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\";\n    }\n    description\n      \"This type is used to reference a system-provided\n       event stream.\";\n  }\n\n  typedef subscription-id {\n    type uint32;\n    description\n      \"A type for subscription identifiers.\";\n  }\n\n  typedef transport {\n    type identityref {\n      base transport;\n    }\n    description\n      \"Specifies the transport used to send notification messages\n       to a receiver.\";\n  }\n\n  grouping stream-filter-elements {\n    description\n      \"This grouping defines the base for filters applied to event\n       streams.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           a subtree filter as defined in RFC 6241, Section 6.\n\n           The subtree filter is applied to the representation of\n           individual, delineated event records as contained in the\n           event stream.\n\n           If the subtree filter returns a non-empty node set, the\n           filter matches the event record, and the event record is\n           included in the notification message sent to the\n           receivers.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           an XPath 1.0 expression.\n\n           The XPath expression is evaluated on the representation of\n           individual, delineated event records as contained in\n           the event stream.\n\n           The result of the XPath expression is converted to a\n           boolean value using the standard XPath 1.0 rules.  If the\n           boolean value is 'true', the filter matches the event\n           record, and the event record is included in the\n           notification message sent to the receivers.\n\n           The expression is evaluated in the following XPath\n           context:\n\n              o  The set of namespace declarations is the set of\n                 prefix and namespace pairs for all YANG modules\n                 implemented by the server, where the prefix is the\n                 YANG module name and the namespace is as defined by\n                 the 'namespace' statement in the YANG module.\n\n                 If the leaf is encoded in XML, all namespace\n                 declarations in scope on the 'stream-xpath-filter'\n                 leaf element are added to the set of namespace\n                 declarations.  If a prefix found in the XML is\n                 already present in the set of namespace\n                 declarations, the namespace in the XML is used.\n\n              o  The set of variable bindings is empty.\n\n              o  The function library is comprised of the core\n                 function library and the XPath functions defined in\n                 Section 10 in RFC 7950.\n\n              o  The context node is the root node.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping update-qos {\n    description\n      \"This grouping describes QoS information concerning a\n       subscription.  This information is passed to lower layers\n       for transport prioritization and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The desired network transport priority level.  This is the\n         priority set on notification messages encapsulating the\n         results of the subscription.  This transport priority is\n         shared for all receivers of a given subscription.\";\n    }\n    leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for a subscription.  Larger weights get\n         more resources.  Allows an underlying transport layer to\n         perform informed load-balance allocations between various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n      description\n        \"Provides the 'subscription-id' of a parent subscription.\n         The parent subscription has absolute precedence should\n         that parent have push updates ready to egress the publisher.\n         In other words, there should be no streaming of objects from\n         the current subscription if the parent has something ready\n         to push.\n\n         If a dependency is asserted via configuration or via an RPC\n         but the referenced 'subscription-id' does not exist, the\n         dependency is silently discarded.  If a referenced\n         subscription is deleted, this dependency is removed.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.1\";\n    }\n  }\n\n  grouping subscription-policy-modifiable {\n    description\n      \"This grouping describes all objects that may be changed\n       in a subscription.\";\n    choice target {\n      mandatory true;\n      description\n        \"Identifies the source of information against which a\n         subscription is being applied as well as specifics on the\n         subset of information desired from that source.\";\n      case stream {\n        choice stream-filter {\n          description\n            \"An event stream filter can be applied to a subscription.\n             That filter will either come referenced from a global\n             list or be provided in the subscription itself.\";\n          case by-reference {\n            description\n              \"Apply a filter that has been configured separately.\";\n            leaf stream-filter-name {\n              type stream-filter-ref;\n              mandatory true;\n              description\n                \"References an existing event stream filter that is\n                 to be applied to an event stream for the\n                 subscription.\";\n            }\n          }\n          case within-subscription {\n            description\n              \"A local definition allows a filter to have the same\n               lifecycle as the subscription.\";\n            uses stream-filter-elements;\n          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n      description\n        \"Identifies a time after which notification messages for a\n         subscription should not be sent.  If 'stop-time' is not\n         present, the notification messages will continue until the\n         subscription is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time', when\n         established, must be for a future time.\";\n    }\n  }\n\n  grouping subscription-policy-dynamic {\n    description\n      \"This grouping describes the only information concerning a\n       subscription that can be passed over the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable {\n      augment \"target/stream\" {\n        description\n          \"Adds additional objects that can be modified by an RPC.\";\n        leaf stream {\n          type stream-ref {\n            require-instance false;\n          }\n          mandatory true;\n          description\n            \"Indicates the event stream to be considered for\n             this subscription.\";\n        }\n        leaf replay-start-time {\n          if-feature \"replay\";\n          type yang:date-and-time;\n          config false;\n          description\n            \"Used to trigger the 'replay' feature for a dynamic\n             subscription, where event records that are selected\n             need to be at or after the specified starting time.  If\n             'replay-start-time' is not present, this is not a replay\n             subscription and event record push should start\n             immediately.  It is never valid to specify start times\n             that are later than or equal to the current time.\";\n        }\n      }\n    }\n    uses update-qos;\n  }\n\n  grouping subscription-policy {\n    description\n      \"This grouping describes the full set of policy information\n       concerning both dynamic and configured subscriptions, with the\n       exclusion of both receivers and networking information\n       specific to the publisher, such as what interface should be\n       used to transmit notification messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n      if-feature \"configured\";\n      type transport;\n      description\n        \"For a configured subscription, this leaf specifies the\n         transport used to deliver messages destined for all\n         receivers of that subscription.\";\n    }\n    leaf encoding {\n      when \"not(../transport) or derived-from(../transport,\n        \\\"sn:configurable-encoding\\\")\";\n      type encoding;\n      description\n        \"The type of encoding for notification messages.  For a\n         dynamic subscription, if not included as part of an\n         'establish-subscription' RPC, the encoding will be populated\n         with the encoding used by that RPC.  For a configured\n         subscription, if not explicitly configured, the encoding\n         will be the default encoding for an underlying transport.\";\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n      description\n        \"Open text allowing a configuring entity to embed the\n         originator or other specifics of this subscription.\";\n    }\n  }\n\n  container streams {\n    config false;\n    description\n      \"Contains information on the built-in event streams provided by\n       the publisher.\";\n    list stream {\n      key \"name\";\n      description\n        \"Identifies the built-in event streams that are supported by\n         the publisher.\";\n      leaf name {\n        type string;\n        description\n          \"A handle for a system-provided event stream made up of a\n           sequential set of event records, each of which is\n           characterized by its own domain and semantics.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A description of the event stream, including such\n           information as the type of event records that are\n           available in this event stream.\";\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n        type empty;\n        description\n          \"Indicates that event record replay is available on this\n           event stream.\";\n      }\n      leaf replay-log-creation-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"The timestamp of the creation of the log used to support\n           the replay function on this event stream.  This time\n           might be earlier than the earliest available information\n           contained in the log.  This object is updated if the log\n           resets for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"The timestamp associated with the last event record that\n           has been aged out of the log.  This timestamp identifies\n           how far back in history this replay log extends, if it\n           doesn't extend back to the 'replay-log-creation-time'.\n           This object MUST be present if replay is supported and any\n           event records have been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n    description\n      \"Contains a list of configurable filters that can be applied to\n       subscriptions.  This facilitates the reuse of complex filters\n       once defined.\";\n    list stream-filter {\n      key \"name\";\n      description\n        \"A list of preconfigured filters that can be applied to\n         subscriptions.\";\n      leaf name {\n        type string;\n        description\n          \"A name to differentiate between filters.\";\n      }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions {\n    description\n      \"Contains the list of currently active subscriptions, i.e.,\n       subscriptions that are currently in effect, used for\n       subscription management and monitoring purposes.  This\n       includes subscriptions that have been set up via\n       RPC primitives as well as subscriptions that have been\n       established via configuration.\";\n    list subscription {\n      key \"id\";\n      description\n        \"The identity and specific parameters of a subscription.\n         Subscriptions in this list can be created using a control\n         channel or RPC or can be established through configuration.\n\n         If the 'kill-subscription' RPC or configuration operations\n         are used to delete a subscription, a\n         'subscription-terminated' message is sent to any active or\n         suspended receivers.\";\n      leaf id {\n        type subscription-id;\n        description\n          \"Identifier of a subscription; unique in a given\n           publisher.\";\n      }\n      uses subscription-policy {\n        refine \"target/stream/stream\" {\n          description\n            \"Indicates the event stream to be considered for this\n             subscription.  If an event stream has been removed\n             and can no longer be referenced by an active\n             subscription, send a 'subscription-terminated'\n             notification with 'stream-unavailable' as the reason.\n             If a configured subscription refers to a nonexistent\n             event stream, move that subscription to the\n             'invalid' state.\";\n        }\n        refine \"transport\" {\n          description\n            \"For a configured subscription, this leaf specifies the\n             transport used to deliver messages destined for all\n             receivers of that subscription.  This object is\n             mandatory for subscriptions in the configuration\n             datastore.  This object (1) is not mandatory for dynamic\n             subscriptions in the operational state datastore and\n             (2) should not be present for other types of dynamic\n             subscriptions.\";\n        }\n        augment \"target/stream\" {\n          description\n            \"Enables objects to be added to a configured stream\n             subscription.\";\n          leaf configured-replay {\n            if-feature \"configured\";\n            if-feature \"replay\";\n            type empty;\n            description\n              \"The presence of this leaf indicates that replay for\n               the configured subscription should start at the\n               earliest time in the event log or at the publisher\n               boot time, whichever is later.\";\n          }\n        }\n      }\n      choice notification-message-origin {\n        if-feature \"configured\";\n        description\n          \"Identifies the egress interface on the publisher\n           from which notification messages are to be sent.\";\n        case interface-originated {\n          description\n            \"When notification messages are to egress a specific,\n             designated interface on the publisher.\";\n          leaf source-interface {\n            if-feature \"interface-designation\";\n            type if:interface-ref;\n            description\n              \"References the interface for notification messages.\";\n          }\n        }\n        case address-originated {\n          description\n            \"When notification messages are to depart from a\n             publisher using a specific originating address and/or\n             routing context information.\";\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n            type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\";\n            }\n            description\n              \"VRF from which notification messages should egress a\n               publisher.\";\n          }\n          leaf source-address {\n            type inet:ip-address-no-zone;\n            description\n              \"The source address for the notification messages.\n               If a source VRF exists but this object doesn't, a\n               publisher's default address for that VRF must\n               be used.\";\n          }\n        }\n      }\n      leaf configured-subscription-state {\n        if-feature \"configured\";\n        type enumeration {\n          enum \"valid\" {\n            value 1;\n            description\n              \"The subscription is supportable with its current\n               parameters.\";\n          }\n          enum \"invalid\" {\n            value 2;\n            description\n              \"The subscription as a whole is unsupportable with its\n               current parameters.\";\n          }\n          enum \"concluded\" {\n            value 3;\n            description\n              \"A subscription is inactive, as it has hit a\n               stop time.  It no longer has receivers in the\n               'active' or 'suspended' state, but the subscription\n               has not yet been removed from configuration.\";\n          }\n        }\n        config false;\n        description\n          \"The presence of this leaf indicates that the subscription\n           originated from configuration, not through a control\n           channel or RPC.  The value indicates the state of the\n           subscription as established by the publisher.\";\n      }\n      container receivers {\n        description\n          \"Set of receivers in a subscription.\";\n        list receiver {\n          key \"name\";\n          min-elements 1;\n          description\n            \"A host intended as a recipient for the notification\n             messages of a subscription.  For configured\n             subscriptions, transport-specific network parameters\n             (or a leafref to those parameters) may be augmented to a\n             specific receiver in this list.\";\n          leaf name {\n            type string;\n            description\n              \"Identifies a unique receiver for a subscription.\";\n          }\n          leaf sent-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records sent to the receiver.  The\n               count is initialized when a dynamic subscription is\n               established or when a configured receiver\n               transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records explicitly removed via\n               either an event stream filter or an access control\n               filter so that they are not passed to a receiver.\n               This count is set to zero each time\n               'sent-event-records' is initialized.\";\n          }\n          leaf state {\n            type enumeration {\n              enum \"active\" {\n                value 1;\n                description\n                  \"The receiver is currently being sent any\n                   applicable notification messages for the\n                   subscription.\";\n              }\n              enum \"suspended\" {\n                value 2;\n                description\n                  \"The receiver state is 'suspended', so the\n                   publisher is currently unable to provide\n                   notification messages for the subscription.\";\n              }\n              enum \"connecting\" {\n                if-feature \"configured\";\n                value 3;\n                description\n                  \"A subscription has been configured, but a\n                   'subscription-started' subscription state change\n                   notification needs to be successfully received\n                   before notification messages are sent.\n\n                   If the 'reset' action is invoked for a receiver of\n                   an active configured subscription, the state\n                   must be moved to 'connecting'.\";\n              }\n              enum \"disconnected\" {\n                if-feature \"configured\";\n                value 4;\n                description\n                  \"A subscription has failed to send a\n                   'subscription-started' state change to the\n                   receiver.  Additional connection attempts are not\n                   currently being made.\";\n              }\n            }\n            config false;\n            mandatory true;\n            description\n              \"Specifies the state of a subscription from the\n               perspective of a particular receiver.  With this\n               information, it is possible to determine whether a\n               publisher is currently generating notification\n               messages intended for that receiver.\";\n          }\n          action reset {\n            if-feature \"configured\";\n            description\n              \"Allows the reset of this configured subscription's\n               receiver to the 'connecting' state.  This enables the\n               connection process to be reinitiated.\";\n\n            output {\n              leaf time {\n                type yang:date-and-time;\n                mandatory true;\n                description\n                  \"Time at which a publisher returned the receiver to\n                   the 'connecting' state.\";\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  rpc establish-subscription {\n    description\n      \"This RPC allows a subscriber to create (and possibly\n       negotiate) a subscription on its own behalf.  If successful,\n       the subscription remains in effect for the duration of the\n       subscriber's association with the publisher or until the\n       subscription is terminated.  If an error occurs or the\n       publisher cannot meet the terms of a subscription, an RPC\n       error is returned, and the subscription is not created.\n       In that case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings that would have a higher\n       likelihood of succeeding in a subsequent\n       'establish-subscription' request.\";\n\n    input {\n      uses subscription-policy-dynamic;\n      leaf encoding {\n        type encoding;\n        description\n          \"The type of encoding for the subscribed data.  If not\n           included as part of the RPC, the encoding MUST be set by\n           the publisher to be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision {\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"If a replay has been requested, this object represents\n           the earliest time covered by the event buffer for the\n           requested event stream.  The value of this object is the\n           'replay-log-aged-time' if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.  All buffered event\n           records after this time will be replayed to a receiver.\n           This object will only be sent if the starting time has\n           been revised to be later than the time requested by the\n           subscriber.\";\n      }\n    }\n  }\n  rpc modify-subscription {\n    description\n      \"This RPC allows a subscriber to modify a dynamic\n       subscription's parameters.  If successful, the changed\n       subscription parameters remain in effect for the duration of\n       the subscription, until the subscription is again modified, or\n       until the subscription is terminated.  In the case of an error\n       or an inability to meet the modified parameters, the\n       subscription is not modified and the original subscription\n       parameters remain in effect.  In that case, the RPC error MAY\n       include 'error-info' suggested parameter hints that would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription' request.  A successful\n       'modify-subscription' will return a suspended subscription to\n       the 'active' state.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier to use for this subscription.\";\n      }\n      uses subscription-policy-modifiable;\n    }\n  }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber to delete a subscription that\n       was previously created by that same subscriber using the\n       'establish-subscription' RPC.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' from the same origin as this RPC\n           can be deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n    nacm:default-deny-all;\n    description\n      \"This RPC allows an operator to delete a dynamic subscription\n       without restrictions on the originating subscriber or\n       underlying transport session.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n  }\n\n  notification replay-completed {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n    description\n      \"This notification is sent to indicate that all of the replay\n       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification is sent to indicate that a subscription has\n       finished passing event records, as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the gracefully completed subscription.\";\n    }\n  }\n  notification subscription-modified {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       modified.  Notification messages sent from this point on will\n       conform to the modified terms of the subscription.  For\n       completeness, this subscription state change notification\n       includes both modified and unmodified aspects of a\n       subscription.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification subscription-resumed {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription that had\n       previously been suspended has resumed.  Notifications will\n       once again be sent.  In addition, a 'subscription-resumed'\n       indicates that no modification of parameters has occurred\n       since the last time event records have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification indicates that a subscription has started\n       and notifications will now be sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/replay-start-time\" {\n        description\n          \"Indicates the time that a replay is using for the\n           streaming of buffered event records.  This will be\n           populated with the most recent of the following:\n           the event time of the previous event record sent to a\n           receiver, the 'replay-log-creation-time', the\n           'replay-log-aged-time', or the most recent publisher\n           boot time.\";\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n      augment \"target/stream\" {\n        description\n          \"This augmentation adds additional parameters specific to a\n           'subscription-started' notification.\";\n        leaf replay-previous-event-time {\n          when \"../replay-start-time\";\n          if-feature \"replay\";\n          type yang:date-and-time;\n          description\n            \"If there is at least one event in the replay buffer\n             prior to 'replay-start-time', this gives the time of\n             the event generated immediately prior to the\n             'replay-start-time'.\n\n             If a receiver previously received event records for\n             this configured subscription, it can compare this time\n             to the last event record previously received.  If the\n             two are not the same (perhaps due to a reboot), then a\n             dynamic replay can be initiated to acquire any missing\n             event records.\";\n        }\n      }\n    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a suspension of the\n       subscription by the publisher has occurred.  No further\n       notifications will be sent until the subscription resumes.\n       This notification shall only be sent to receivers of a\n       subscription; it does not constitute a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-suspended-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the suspension.\";\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-terminated-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the termination.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-inet-types",
              "subject": "ietf-inet-types-subject",
              "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-interfaces",
              "subject": "ietf-interfaces-subject",
              "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": {
                "features": [
                  "arbitrary-names",
                  "pre-provisioning",
                  "if-mib"
                ]
              }
            },
            {
              "name": "ietf-netconf-acm",
              "subject": "ietf-netconf-acm-subject",
              "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-network-instance",
              "subject": "ietf-network-instance-subject",
              "schema": "module ietf-network-instance {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-network-instance\";\n  prefix ni;\n\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-ip {\n    prefix ip;\n    reference\n      \"RFC 8344: A YANG Data Model for IP Management\";\n  }\n  import ietf-yang-schema-mount {\n    prefix yangmnt;\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  organization\n    \"IETF Routing Area (rtgwg) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/rtgwg&gt;\n     WG List:  &lt;mailto:rtgwg@ietf.org&gt;\n\n     Author:   Lou Berger\n               &lt;mailto:lberger@labn.net&gt;\n     Author:   Christian Hopps\n               &lt;mailto:chopps@chopps.org&gt;\n     Author:   Acee Lindem\n               &lt;mailto:acee@cisco.com&gt;\n     Author:   Dean Bogdanovic\n               &lt;mailto:ivandean@gmail.com&gt;\";\n  description\n    \"This module is used to support multiple network instances\n     within a single physical or virtual device.  Network\n     instances are commonly known as VRFs (VPN Routing and\n     Forwarding) and VSIs (Virtual Switching Instances).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all capitals,\n      as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8529; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-21 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8529\";\n  }\n\n  container network-instances {\n    description\n      \"Network instances, each of which consists of\n       VRFs and/or VSIs.\";\n    reference\n      \"RFC 8349: A YANG Data Model for Routing Management\";\n    list network-instance {\n      key \"name\";\n      description\n        \"List of network instances.\";\n      leaf name {\n        type string;\n        mandatory true;\n        description\n          \"device-scoped identifier for the network\n           instance.\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Flag indicating whether or not the network\n           instance is enabled.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"Description of the network instance\n           and its intended purpose.\";\n      }\n      choice ni-type {\n        description\n          \"This node serves as an anchor point for different types\n           of network instances.  Each 'case' is expected to\n           differ in terms of the information needed in the\n           parent/core to support the NI and may differ in their\n           mounted-schema definition.  When the mounted schema is\n           not expected to be the same for a specific type of NI,\n           a mount point should be defined.\";\n      }\n      choice root-type {\n        mandatory true;\n        description\n          \"Well-known mount points.\";\n        container vrf-root {\n          yangmnt:mount-point \"vrf-root\" {\n            description\n              \"Root for L3VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vsi-root {\n          yangmnt:mount-point \"vsi-root\" {\n            description\n              \"Root for L2VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vv-root {\n          yangmnt:mount-point \"vv-root\" {\n            description\n              \"Root models that support both L2VPN-type bridging\n               and L3VPN-type routing.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n      }\n    }\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on a interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which an interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv4\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv4 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv4 interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv6\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv6 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv6 interface is bound.\";\n    }\n  }\n\n  notification bind-ni-name-failed {\n    description\n      \"Indicates an error in the association of an interface to an\n       NI.  Only generated after success is initially returned when\n       bind-ni-name is set.\n\n       Note: Some errors may need to be reported for multiple\n       associations, e.g., a single error may need to be reported\n       for an IPv4 and an IPv6 bind-ni-name.\n\n       At least one container with a bind-ni-name leaf MUST be\n       included in this notification.\";\n    leaf name {\n      type leafref {\n        path \"/if:interfaces/if:interface/if:name\";\n      }\n      mandatory true;\n      description\n        \"Contains the interface name associated with the\n         failure.\";\n    }\n    container interface {\n      description\n        \"Generic interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv4 {\n      description\n        \"IPv4 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv6 {\n      description\n        \"IPv6 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv6/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    leaf error-info {\n      type string;\n      description\n        \"Optionally, indicates the source of the assignment\n         failure.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-interfaces",
                  "subject": "ietf-interfaces-subject",
                  "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "arbitrary-names",
                      "pre-provisioning",
                      "if-mib"
                    ]
                  }
                },
                {
                  "name": "ietf-ip",
                  "subject": "ietf-ip-subject",
                  "schema": "module ietf-ip {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n  prefix ip;\n\n  import ietf-interfaces {\n    prefix if;\n  }\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   &lt;http://tools.ietf.org/wg/netmod/&gt;\n     WG List:  &lt;mailto:netmod@ietf.org&gt;\n\n     WG Chair: Thomas Nadeau\n               &lt;mailto:tnadeau@lucidvision.com&gt;\n\n     WG Chair: Juergen Schoenwaelder\n               &lt;mailto:j.schoenwaelder@jacobs-university.de&gt;\n\n     Editor:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"This module contains a collection of YANG definitions for\n     configuring IP implementations.\n\n     Copyright (c) 2014 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 7277; see\n     the RFC itself for full legal notices.\";\n\n  revision 2014-06-16 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7277: A YANG Data Model for IP Management\";\n  }\n\n  feature ipv4-non-contiguous-netmasks {\n    description\n      \"Indicates support for configuring non-contiguous\n       subnet masks.\";\n  }\n\n  feature ipv6-privacy-autoconf {\n    description\n      \"Indicates support for Privacy Extensions for Stateless Address\n       Autoconfiguration in IPv6.\";\n    reference\n      \"RFC 4941: Privacy Extensions for Stateless Address\n                 Autoconfiguration in IPv6\";\n  }\n\n  typedef ip-address-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the address has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dhcp\" {\n        description\n          \"Indicates an address that has been assigned to this\n           system by a DHCP server.\";\n      }\n      enum \"link-layer\" {\n        description\n          \"Indicates an address created by IPv6 stateless\n           autoconfiguration that embeds a link-layer address in its\n           interface identifier.\";\n      }\n      enum \"random\" {\n        description\n          \"Indicates an address chosen by the system at\n\n           random, e.g., an IPv4 address within 169.254/16, an\n           RFC 4941 temporary address, or an RFC 7217 semantically\n           opaque address.\";\n        reference\n          \"RFC 4941: Privacy Extensions for Stateless Address\n                     Autoconfiguration in IPv6\n           RFC 7217: A Method for Generating Semantically Opaque\n                     Interface Identifiers with IPv6 Stateless\n                     Address Autoconfiguration (SLAAC)\";\n      }\n    }\n    description\n      \"The origin of an address.\";\n  }\n\n  typedef neighbor-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the mapping has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dynamic\" {\n        description\n          \"Indicates that the mapping has been dynamically resolved\n           using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery\n           protocol.\";\n      }\n    }\n    description\n      \"The origin of a neighbor entry.\";\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Parameters for configuring IP on interfaces.\n\n       If an interface is not capable of running IP, the server\n       must not allow the client to configure these parameters.\";\n    container ipv4 {\n      presence \"Enables IPv4 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv4 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv4 is enabled or disabled on this\n           interface.  When IPv4 is enabled, this interface is\n           connected to an IPv4 stack, and the interface can send\n           and receive IPv4 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv4 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv4 routers\n           forward datagrams.  IPv4 hosts do not (except those\n           source-routed via the host).\";\n      }\n      leaf mtu {\n        type uint16;\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          mandatory true;\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Enables IPv6 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv6 is enabled or disabled on this\n           interface.  When IPv6 is enabled, this interface is\n           connected to an IPv6 stack, and the interface can send\n           and receive IPv6 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv6 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv6 routers\n           forward datagrams.  IPv6 hosts do not (except those\n           source-routed via the host).\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n      leaf dup-addr-detect-transmits {\n        type uint32;\n        default \"1\";\n        description\n          \"The number of consecutive Neighbor Solicitation messages\n           sent while performing Duplicate Address Detection on a\n           tentative address.  A value of zero indicates that\n           Duplicate Address Detection is not performed on\n           tentative addresses.  A value of one indicates a single\n           transmission with no follow-up retransmissions.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      }\n      container autoconf {\n        description\n          \"Parameters to control the autoconfiguration of IPv6\n           addresses, as described in RFC 4862.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        leaf create-global-addresses {\n          type boolean;\n          default \"true\";\n          description\n            \"If enabled, the host creates global addresses as\n             described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\n                       Section 5.5\";\n        }\n        leaf create-temporary-addresses {\n          if-feature \"ipv6-privacy-autoconf\";\n          type boolean;\n          default \"false\";\n          description\n            \"If enabled, the host creates temporary addresses as\n             described in RFC 4941.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\";\n        }\n        leaf temporary-valid-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"604800\";\n          description\n            \"The time period during which the temporary address\n             is valid.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_VALID_LIFETIME\";\n        }\n        leaf temporary-preferred-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"86400\";\n          description\n            \"The time period during which the temporary address is\n             preferred.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_PREFERRED_LIFETIME\";\n        }\n      }\n    }\n  }\n  augment \"/if:interfaces-state/if:interface\" {\n    description\n      \"Data nodes for the operational state of IP on interfaces.\";\n    container ipv4 {\n      presence \"Present if IPv4 is enabled on this interface\";\n      config false;\n      description\n        \"Interface-specific parameters for the IPv4 address family.\";\n      leaf forwarding {\n        type boolean;\n        description\n          \"Indicates whether IPv4 packet forwarding is enabled or\n           disabled on this interface.\";\n      }\n      leaf mtu {\n        type uint16 {\n          range \"68..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           This list represents the ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Present if IPv6 is enabled on this interface\";\n      config false;\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Indicates whether IPv6 packet forwarding is enabled or\n           disabled on this interface.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n        leaf status {\n          type enumeration {\n            enum \"preferred\" {\n              description\n                \"This is a valid address that can appear as the\n                 destination or source address of a packet.\";\n            }\n            enum \"deprecated\" {\n              description\n                \"This is a valid but deprecated address that should\n                 no longer be used as a source address in new\n                 communications, but packets addressed to such an\n                 address are processed as expected.\";\n            }\n            enum \"invalid\" {\n              description\n                \"This isn't a valid address, and it shouldn't appear\n                 as the destination or source address of a packet.\";\n            }\n            enum \"inaccessible\" {\n              description\n                \"The address is not accessible because the interface\n                 to which this address is assigned is not\n                 operational.\";\n            }\n            enum \"unknown\" {\n              description\n                \"The status cannot be determined for some reason.\";\n            }\n            enum \"tentative\" {\n              description\n                \"The uniqueness of the address on the link is being\n                 verified.  Addresses in this state should not be\n                 used for general communication and should only be\n                 used to determine the uniqueness of the address.\";\n            }\n            enum \"duplicate\" {\n              description\n                \"The address has been determined to be non-unique on\n                 the link and so must not be used.\";\n            }\n            enum \"optimistic\" {\n              description\n                \"The address is available for use, subject to\n                 restrictions, while its uniqueness on a link is\n                 being verified.\";\n            }\n          }\n          description\n            \"The status of an address.  Most of the states correspond\n             to states from the IPv6 Stateless Address\n             Autoconfiguration protocol.\";\n          reference\n            \"RFC 4293: Management Information Base for the\n                       Internet Protocol (IP)\n                       - IpAddressStatusTC\n             RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           This list represents the Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n        leaf is-router {\n          type empty;\n          description\n            \"Indicates that the neighbor node acts as a router.\";\n        }\n        leaf state {\n          type enumeration {\n            enum \"incomplete\" {\n              description\n                \"Address resolution is in progress, and the link-layer\n                 address of the neighbor has not yet been\n                 determined.\";\n            }\n            enum \"reachable\" {\n              description\n                \"Roughly speaking, the neighbor is known to have been\n                 reachable recently (within tens of seconds ago).\";\n            }\n            enum \"stale\" {\n              description\n                \"The neighbor is no longer known to be reachable, but\n                 until traffic is sent to the neighbor no attempt\n                 should be made to verify its reachability.\";\n            }\n            enum \"delay\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 traffic has recently been sent to the neighbor.\n                 Rather than probe the neighbor immediately, however,\n                 delay sending probes for a short while in order to\n                 give upper-layer protocols a chance to provide\n                 reachability confirmation.\";\n            }\n            enum \"probe\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 unicast Neighbor Solicitation probes are being sent\n                 to verify reachability.\";\n            }\n          }\n          description\n            \"The Neighbor Unreachability Detection state of this\n             entry.\";\n          reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                       Section 7.3.2\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-interfaces",
                      "subject": "ietf-interfaces-subject",
                      "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "arbitrary-names",
                          "pre-provisioning",
                          "if-mib"
                        ]
                      }
                    },
                    {
                      "name": "ietf-inet-types",
                      "subject": "ietf-inet-types-subject",
                      "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    },
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "ipv4-non-contiguous-netmasks",
                      "ipv6-privacy-autoconf"
                    ]
                  }
                },
                {
                  "name": "ietf-yang-schema-mount",
                  "subject": "ietf-yang-schema-mount-subject",
                  "schema": "module ietf-yang-schema-mount {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n  prefix yangmnt;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Editor:   Ladislav Lhotka\n               <mailto:lhotka@nic.cz>\";\n  description\n    \"This module defines a YANG extension statement that can be used\n     to incorporate data models defined in other YANG modules in a\n     module.  It also defines operational state data that specify the\n     overall structure of the data model.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8528;\n     see the RFC itself for full legal notices.\";\n\n  revision 2019-01-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  extension mount-point {\n    argument label;\n    description\n      \"The argument 'label' is a YANG identifier, i.e., it is of the\n       type 'yang:yang-identifier'.\n\n       The 'mount-point' statement MUST NOT be used in a YANG\n       version 1 module, neither explicitly nor via a 'uses'\n       statement.\n       The 'mount-point' statement MAY be present as a substatement\n       of 'container' and 'list' and MUST NOT be present elsewhere.\n       There MUST NOT be more than one 'mount-point' statement in a\n       given 'container' or 'list' statement.\n\n       If a mount point is defined within a grouping, its label is\n       bound to the module where the grouping is used.\n\n       A mount point defines a place in the node hierarchy where\n       other data models may be attached.  A server that implements a\n       module with a mount point populates the\n       '/schema-mounts/mount-point' list with detailed information on\n       which data models are mounted at each mount point.\n\n       Note that the 'mount-point' statement does not define a new\n       data node.\";\n  }\n\n  container schema-mounts {\n    config false;\n    description\n      \"Contains information about the structure of the overall\n       mounted data model implemented in the server.\";\n    list namespace {\n      key \"prefix\";\n      description\n        \"This list provides a mapping of namespace prefixes that are\n         used in XPath expressions of 'parent-reference' leafs to the\n         corresponding namespace URI references.\";\n      leaf prefix {\n        type yang:yang-identifier;\n        description\n          \"Namespace prefix.\";\n      }\n      leaf uri {\n        type inet:uri;\n        description\n          \"Namespace URI reference.\";\n      }\n    }\n    list mount-point {\n      key \"module label\";\n      description\n        \"Each entry of this list specifies a schema for a particular\n         mount point.\n\n         Each mount point MUST be defined using the 'mount-point'\n         extension in one of the modules listed in the server's\n         YANG library instance with conformance type 'implement'.\";\n      leaf module {\n        type yang:yang-identifier;\n        description\n          \"Name of a module containing the mount point.\";\n      }\n      leaf label {\n        type yang:yang-identifier;\n        description\n          \"Label of the mount point defined using the 'mount-point'\n           extension.\";\n      }\n      leaf config {\n        type boolean;\n        default \"true\";\n        description\n          \"If this leaf is set to 'false', then all data nodes in the\n           mounted schema are read-only ('config false'), regardless\n           of their 'config' property.\";\n      }\n      choice schema-ref {\n        mandatory true;\n        description\n          \"Alternatives for specifying the schema.\";\n        container inline {\n          presence \"A complete self-contained schema is mounted at the\n           mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.\n\n             Different instances of the mount point may have\n             different schemas mounted.\";\n        }\n        container shared-schema {\n          presence \"The mounted schema together with the 'parent-reference'\n           make up the schema for this mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.  When XPath expressions in the mounted\n             schema are evaluated, the 'parent-reference' leaf-list\n             is taken into account.\n\n             Different instances of the mount point MUST have the\n             same schema mounted.\";\n          leaf-list parent-reference {\n            type yang:xpath1.0;\n            description\n              \"Entries of this leaf-list are XPath 1.0 expressions\n               that are evaluated in the following context:\n\n               - The context node is the node in the parent data tree\n                 where the mount-point is defined.\n\n               - The accessible tree is the parent data tree\n                 *without* any nodes defined in modules that are\n                 mounted inside the parent schema.\n\n               - The context position and context size are both equal\n                 to 1.\n\n               - The set of variable bindings is empty.\n\n               - The function library is the core function library\n                 defined in the W3C XPath 1.0 document\n                 (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                 the functions defined in Section 10 of RFC 7950.\n\n               - The set of namespace declarations is defined by the\n                 'namespace' list under 'schema-mounts'.\n\n               Each XPath expression MUST evaluate to a node-set\n               (possibly empty).  For the purposes of evaluating\n               XPath expressions whose context nodes are defined in\n               the mounted schema, the union of all these node-sets\n               together with ancestor nodes are added to the\n               accessible data tree.\n\n               Note that in the case 'ietf-yang-schema-mount' is\n               itself mounted, a 'parent-reference' in the mounted\n               module may refer to nodes that were brought into the\n               accessible tree through a 'parent-reference' in the\n               parent schema.\";\n          }\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-inet-types",
                      "subject": "ietf-inet-types-subject",
                      "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    },
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": {
            "features": [
              "configured",
              "dscp",
              "encode-json",
              "encode-xml",
              "interface-designation",
              "qos",
              "replay",
              "subtree",
              "supports-vrf",
              "xpath"
            ]
          }
        },
        {
          "name": "ietf-datastores",
          "subject": "ietf-datastores-subject",
          "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
          "references": [],
          "properties": null,
          "tags": null
        },
        {
          "name": "ietf-restconf",
          "subject": "ietf-restconf-subject",
          "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
          "references": [],
          "properties": null,
          "tags": null
        },
        {
          "name": "ietf-yang-patch",
          "subject": "ietf-yang-patch-subject",
          "schema": "module ietf-yang-patch {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-patch\";\n  prefix ypatch;\n\n  import ietf-restconf {\n    prefix rc;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\";\n  description\n    \"This module contains conceptual YANG specifications\n     for the YANG Patch and YANG Patch Status data structures.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The YANG grouping statements provide a normative syntax\n     for XML and JSON message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8072; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-02-22 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type.\";\n  }\n\n  rc:yang-data \"yang-patch\" {\n    uses yang-patch;\n  }\n  rc:yang-data \"yang-patch-status\" {\n    uses yang-patch-status;\n  }\n\n  typedef target-resource-offset {\n    type string;\n    description\n      \"Contains a data resource identifier string representing\n       a sub-resource within the target resource.\n       The document root for this expression is the\n       target resource that is specified in the\n       protocol operation (e.g., the URI for the PATCH request).\n\n       This string is encoded according to the same rules as those\n       for a data resource identifier in a RESTCONF request URI.\";\n    reference\n      \"RFC 8040, Section 3.5.3.\";\n  }\n\n  grouping yang-patch {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch edit request message.\";\n    container yang-patch {\n      description\n        \"Represents a conceptual sequence of datastore edits,\n         called a patch.  Each patch is given a client-assigned\n         patch identifier.  Each edit MUST be applied\n         in ascending order, and all edits MUST be applied.\n         If any errors occur, then the target datastore MUST NOT\n         be changed by the YANG Patch operation.\n\n         It is possible for a datastore constraint violation to occur\n         due to any node in the datastore, including nodes not\n         included in the 'edit' list.  Any validation errors MUST\n         be reported in the reply message.\";\n      reference\n        \"RFC 7950, Section 8.3.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"An arbitrary string provided by the client to identify\n           the entire patch.  Error messages returned by the server\n           that pertain to this patch will be identified by this\n           'patch-id' value.  A client SHOULD attempt to generate\n           unique 'patch-id' values to distinguish between\n           transactions from multiple clients in any audit logs\n           maintained by the server.\";\n      }\n      leaf comment {\n        type string;\n        description\n          \"An arbitrary string provided by the client to describe\n           the entire patch.  This value SHOULD be present in any\n           audit logging records generated by the server for the\n           patch.\";\n      }\n      list edit {\n        key \"edit-id\";\n        ordered-by user;\n        description\n          \"Represents one edit within the YANG Patch request message.\n           The 'edit' list is applied in the following manner:\n\n             - The first edit is conceptually applied to a copy\n               of the existing target datastore, e.g., the\n               running configuration datastore.\n             - Each ascending edit is conceptually applied to\n               the result of the previous edit(s).\n             - After all edits have been successfully processed,\n               the result is validated according to YANG constraints.\n             - If successful, the server will attempt to apply\n               the result to the target datastore.\";\n        leaf edit-id {\n          type string;\n          description\n            \"Arbitrary string index for the edit.\n             Error messages returned by the server that pertain\n             to a specific edit will be identified by this value.\";\n        }\n        leaf operation {\n          type enumeration {\n            enum \"create\" {\n              description\n                \"The target data node is created using the supplied\n                 value, only if it does not already exist.  The\n                 'target' leaf identifies the data node to be\n                 created, not the parent data node.\";\n            }\n            enum \"delete\" {\n              description\n                \"Delete the target node, only if the data resource\n                 currently exists; otherwise, return an error.\";\n            }\n            enum \"insert\" {\n              description\n                \"Insert the supplied value into a user-ordered\n                 list or leaf-list entry.  The target node must\n                 represent a new data resource.  If the 'where'\n                 parameter is set to 'before' or 'after', then\n                 the 'point' parameter identifies the insertion\n                 point for the target node.\";\n            }\n            enum \"merge\" {\n              description\n                \"The supplied value is merged with the target data\n                 node.\";\n            }\n            enum \"move\" {\n              description\n                \"Move the target node.  Reorder a user-ordered\n                 list or leaf-list.  The target node must represent\n                 an existing data resource.  If the 'where' parameter\n                 is set to 'before' or 'after', then the 'point'\n                 parameter identifies the insertion point to move\n                 the target node.\";\n            }\n            enum \"replace\" {\n              description\n                \"The supplied value is used to replace the target\n                 data node.\";\n            }\n            enum \"remove\" {\n              description\n                \"Delete the target node if it currently exists.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The datastore operation requested for the associated\n             'edit' entry.\";\n        }\n        leaf target {\n          type target-resource-offset;\n          mandatory true;\n          description\n            \"Identifies the target data node for the edit\n             operation.  If the target has the value '/', then\n             the target data node is the target resource.\n             The target node MUST identify a data resource,\n             not the datastore resource.\";\n        }\n        leaf point {\n          when \"(../operation = 'insert' or ../operation = 'move')and (../where = 'before' or ../where = 'after')\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations, before or after an existing entry.\";\n          }\n          type target-resource-offset;\n          description\n            \"The absolute URL path for the data node that is being\n             used as the insertion point or move point for the\n             target of this 'edit' entry.\";\n        }\n        leaf where {\n          when \"../operation = 'insert' or ../operation = 'move'\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations.\";\n          }\n          type enumeration {\n            enum \"before\" {\n              description\n                \"Insert or move a data node before the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"after\" {\n              description\n                \"Insert or move a data node after the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"first\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the first entry.\";\n            }\n            enum \"last\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the last entry.\";\n            }\n          }\n          default \"last\";\n          description\n            \"Identifies where a data resource will be inserted\n             or moved.  YANG only allows these operations for\n             list and leaf-list data nodes that are\n             'ordered-by user'.\";\n        }\n        anydata value {\n          when \"../operation = 'create' or ../operation = 'merge' or ../operation = 'replace' or ../operation = 'insert'\" {\n            description\n              \"The anydata 'value' is only used for 'create',\n               'merge', 'replace', and 'insert' operations.\";\n          }\n          description\n            \"Value used for this edit operation.  The anydata 'value'\n             contains the target resource associated with the\n             'target' leaf.\n\n             For example, suppose the target node is a YANG container\n             named foo:\n\n                 container foo {\n                   leaf a { type string; }\n                   leaf b { type int32; }\n                 }\n\n             The 'value' node contains one instance of foo:\n\n                 <value>\n                    <foo xmlns='example-foo-namespace'>\n                       <a>some value</a>\n                       <b>42</b>\n                    </foo>\n                 </value>\n              \";\n        }\n      }\n    }\n  }\n\n  grouping yang-patch-status {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch Status response\n       message.\";\n    container yang-patch-status {\n      description\n        \"A container representing the response message sent by the\n         server after a YANG Patch edit request message has been\n         processed.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"The 'patch-id' value used in the request.\";\n      }\n      choice global-status {\n        description\n          \"Report global errors or complete success.\n           If there is no case selected, then errors\n           are reported in the 'edit-status' container.\";\n        case global-errors {\n          description\n            \"This container will be present if global errors that\n             are unrelated to a specific edit occurred.\";\n          uses rc:errors;\n        }\n        leaf ok {\n          type empty;\n          description\n            \"This leaf will be present if the request succeeded\n             and there are no errors reported in the 'edit-status'\n             container.\";\n        }\n      }\n      container edit-status {\n        description\n          \"This container will be present if there are\n           edit-specific status responses to report.\n           If all edits succeeded and the 'global-status'\n           returned is 'ok', then a server MAY omit this\n           container.\";\n        list edit {\n          key \"edit-id\";\n          description\n            \"Represents a list of status responses,\n             corresponding to edits in the YANG Patch\n             request message.  If an 'edit' entry was\n             skipped or not reached by the server,\n             then this list will not contain a corresponding\n             entry for that edit.\";\n          leaf edit-id {\n            type string;\n            description\n              \"Response status is for the 'edit' list entry\n               with this 'edit-id' value.\";\n          }\n          choice edit-status-choice {\n            description\n              \"A choice between different types of status\n               responses for each 'edit' entry.\";\n            leaf ok {\n              type empty;\n              description\n                \"This 'edit' entry was invoked without any\n                 errors detected by the server associated\n                 with this edit.\";\n            }\n            case errors {\n              description\n                \"The server detected errors associated with the\n                 edit identified by the same 'edit-id' value.\";\n              uses rc:errors;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        }
      ],
      "properties": null,
      "tags": {
        "features": [
          "on-change"
        ]
      }
    },
    {
      "name": "ietf-distributed-notif",
      "subject": "ietf-distributed-notif-subject",
      "schema": "module ietf-distributed-notif {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-distributed-notif\";\n  prefix dn;\n\n  import ietf-subscribed-notifications {\n    prefix sn;\n  }\n  import ietf-yang-push {\n    prefix yp;\n    reference\n      \"RFC 8641: Subscription to YANG Notifications for Datastore\n       Updates\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <http:/tools.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Authors:  Guangying Zheng\n               <mailto:zhengguangying@huawei.com>\n               Tianran Zhou\n               <mailto:zhoutianran@huawei.com>\n               Thomas Graf\n               <mailto:thomas.graf@swisscom.com>\n               Pierre Francois\n               <mailto:pierre.francois@insa-lyon.fr>\n               Eric Voit\n               <mailto:evoit@cisco.com>\";\n  description\n    \"Defines augmentation for ietf-subscribed-notifications to\n     enable the distributed publication with single subscription.\n\n     Copyright (c) 2025 IETF Trust and the persons identified as\n     authors of the code. All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC XXXX; see the\n     RFC itself for full legal notices.\";\n\n  revision 2024-04-21 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC XXXX: Subscription to Distributed Notifications\";\n  }\n\n  grouping message-publisher-id {\n    description\n      \"Provides a reusable leaf of te message-publisher-id.\";\n    leaf message-publisher-id {\n      type uint32;\n      config false;\n      description\n        \"Identifies the software process which publishes the\n         message (e.g., processor 1 on line card 1). This field\n         is used to notify the receiver which publisher process\n         published which message.\";\n    }\n  }\n\n  grouping message-publisher-ids {\n    description\n      \"Provides a reusable leaf-list of message-publisher-id-list.\";\n    leaf-list message-publisher-ids {\n      type uint32;\n      config false;\n      description\n        \"Identifies the software process which publishes the\n         message (e.g., processor 1 on line card 1). This field\n         is used to notify the receiver which publisher processes\n         are going to publish.\";\n    }\n  }\n\n  augment \"/sn:subscriptions/sn:subscription\" {\n    description\n      \"This augmentation allows the Message\n       Publisher ID to be exposed for a subscription.\";\n    uses message-publisher-ids;\n  }\n  augment \"/sn:subscription-started\" {\n    description\n      \"This augmentation adds the Message Publisher ID to the\n       subscription-started subscription change notifications.\";\n    uses message-publisher-ids;\n  }\n  augment \"/sn:subscription-modified\" {\n    description\n      \"This augmentation adds the Message Publisher ID to the\n       subscription-modified subscription change notifications.\";\n    uses message-publisher-ids;\n  }\n  augment \"/sn:establish-subscription/sn:output\" {\n    description\n      \"This augmentation adds the Message Publisher ID to the\n       dynamic establish-subscription output.\";\n    uses message-publisher-ids;\n  }\n  augment \"/yp:push-update\" {\n    description\n      \"This augmentation adds the Message Publisher ID in the\n       push-update notification.\";\n    uses message-publisher-id;\n  }\n  augment \"/yp:push-change-update\" {\n    description\n      \"This augmentation adds the Message Publisher ID in the\n       push-change-update notification.\";\n    uses message-publisher-id;\n  }\n}\n",
      "references": [
        {
          "name": "ietf-subscribed-notifications",
          "subject": "ietf-subscribed-notifications-subject",
          "schema": "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\";\n  prefix sn;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\n\n     Author:  Alberto Gonzalez Prieto\n              &lt;mailto:alberto.gonzalez@microsoft.com&gt;\n\n     Author:  Einar Nilsen-Nygaard\n              &lt;mailto:einarnn@cisco.com&gt;\n\n     Author:  Ambika Prasad Tripathy\n              &lt;mailto:ambtripa@cisco.com&gt;\";\n  description\n    \"This module defines a YANG data model for subscribing to event\n     records and receiving matching content in notification messages.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8639; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model for Subscriptions to\n                 Event Notifications\";\n  }\n\n  extension subscription-state-notification {\n    description\n      \"This statement applies only to notifications.  It indicates\n       that the notification is a subscription state change\n       notification.  Therefore, it does not participate in a regular\n       event stream and does not need to be specifically subscribed\n       to in order to be received.  This statement can only occur as\n       a substatement of the YANG 'notification' statement.  This\n       statement is not for use outside of this YANG module.\";\n  }\n\n  rc:yang-data \"establish-subscription-stream-error-info\" {\n    container establish-subscription-stream-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the event stream, a subscription\n         is not created and the RPC error response MUST indicate the\n         reason why the subscription failed to be created.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason for\n         the failure.  This yang-data MUST be inserted if hints are\n         to be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted event stream.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The\n           syntax and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"modify-subscription-stream-error-info\" {\n    container modify-subscription-stream-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against an\n         event stream.  This yang-data MUST be used if hints are to\n         be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base modify-subscription-error;\n        }\n        description\n          \"Information in a 'modify-subscription' RPC error response\n           that indicates the reason why the subscription to an event\n           stream has failed to be modified.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The syntax\n           and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"delete-subscription-error-info\" {\n    container delete-subscription-error-info {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription' RPC\n         fails, the subscription is not deleted and the RPC error\n         response MUST indicate the reason for this failure.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason\n         for the failure.\";\n      leaf reason {\n        type identityref {\n          base delete-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the subscription has failed to be\n           deleted.\";\n      }\n    }\n  }\n\n  feature configured {\n    description\n      \"This feature indicates that configuration of subscriptions is\n       supported.\";\n  }\n\n  feature dscp {\n    description\n      \"This feature indicates that a publisher supports the ability\n       to set the Differentiated Services Code Point (DSCP) value in\n       outgoing packets.\";\n  }\n\n  feature encode-json {\n    description\n      \"This feature indicates that JSON encoding of notification\n       messages is supported.\";\n  }\n\n  feature encode-xml {\n    description\n      \"This feature indicates that XML encoding of notification\n       messages is supported.\";\n  }\n\n  feature interface-designation {\n    description\n      \"This feature indicates that a publisher supports sourcing all\n       receiver interactions for a configured subscription from a\n       single designated egress interface.\";\n  }\n\n  feature qos {\n    description\n      \"This feature indicates that a publisher supports absolute\n       dependencies of one subscription's traffic over another\n       as well as weighted bandwidth sharing between subscriptions.\n       Both of these are Quality of Service (QoS) features that allow\n       differentiated treatment of notification messages between a\n       publisher and a specific receiver.\";\n  }\n\n  feature replay {\n    description\n      \"This feature indicates that historical event record replay is\n       supported.  With replay, it is possible for past event records\n       to be streamed in chronological order.\";\n  }\n\n  feature subtree {\n    description\n      \"This feature indicates support for YANG subtree filtering.\";\n    reference\n      \"RFC 6241: Network Configuration Protocol (NETCONF),\n                 Section 6\";\n  }\n\n  feature supports-vrf {\n    description\n      \"This feature indicates that a publisher supports VRF\n       configuration for configured subscriptions.  VRF support for\n       dynamic subscriptions does not require this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances,\n                 Section 6\";\n  }\n\n  feature xpath {\n    description\n      \"This feature indicates support for XPath filtering.\";\n    reference\n      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\";\n  }\n\n  identity delete-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription' RPC request.\";\n  }\n\n  identity establish-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill an 'establish-subscription' RPC request.\";\n  }\n\n  identity modify-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n\n  identity subscription-suspended-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n       notification.\";\n  }\n\n  identity subscription-terminated-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-terminated'\n       notification.\";\n  }\n\n  identity dscp-unavailable {\n    if-feature \"dscp\";\n    base establish-subscription-error;\n    description\n      \"The publisher is unable to mark notification messages with\n       prioritization information in a way that will be respected\n       during network transit.\";\n  }\n\n  identity encoding-unsupported {\n    base establish-subscription-error;\n    description\n      \"Unable to encode notification messages in the desired\n       format.\";\n  }\n\n  identity filter-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Referenced filter does not exist.  This means a receiver is\n       referencing a filter that doesn't exist or to which it\n       does not have access permissions.\";\n  }\n\n  identity filter-unsupported {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    description\n      \"Cannot parse syntax in the filter.  This failure can be from\n       a syntax error or a syntax too complex to be processed by the\n       publisher.\";\n  }\n\n  identity insufficient-resources {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have sufficient resources to support\n       the requested subscription.  An example might be that\n       allocated CPU is too limited to generate the desired set of\n       notification messages.\";\n  }\n\n  identity no-such-subscription {\n    base modify-subscription-error;\n    base delete-subscription-error;\n    base subscription-terminated-reason;\n    description\n      \"Referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity replay-unsupported {\n    if-feature \"replay\";\n    base establish-subscription-error;\n    description\n      \"Replay cannot be performed for this subscription.  This means\n       the publisher will not provide the requested historic\n       information from the event stream via replay to this\n       receiver.\";\n  }\n\n  identity stream-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Not a subscribable event stream.  This means the referenced\n       event stream is not available for subscription by the\n       receiver.\";\n  }\n\n  identity suspension-timeout {\n    base subscription-terminated-reason;\n    description\n      \"Termination of a previously suspended subscription.  The\n       publisher has eliminated the subscription, as it exceeded a\n       time limit for suspension.\";\n  }\n\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have the network bandwidth needed to\n       get the volume of generated information intended for a\n       receiver.\";\n  }\n\n  identity configurable-encoding {\n    description\n      \"If a transport identity derives from this identity, it means\n       that it supports configurable encodings.  An example of a\n       configurable encoding might be a new identity such as\n       'encode-cbor'.  Such an identity could use\n       'configurable-encoding' as its base.  This would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n       that notification messages be encoded via the Concise Binary\n       Object Representation (CBOR) (RFC 7049).  Further details for\n       any specific configurable encoding would be explored in a\n       transport document based on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object Notation (JSON) Data\n                 Interchange Format\n       RFC 7049: Concise Binary Object Representation (CBOR)\";\n  }\n\n  identity encoding {\n    description\n      \"Base identity to represent data encodings.\";\n  }\n\n  identity encode-xml {\n    if-feature \"encode-xml\";\n    base encoding;\n    description\n      \"Encode data using XML as described in RFC 7950.\";\n    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\n  identity encode-json {\n    if-feature \"encode-json\";\n    base encoding;\n    description\n      \"Encode data using JSON as described in RFC 7951.\";\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\";\n  }\n\n  identity transport {\n    description\n      \"An identity that represents the underlying mechanism for\n       passing notification messages.\";\n  }\n\n  typedef encoding {\n    type identityref {\n      base encoding;\n    }\n    description\n      \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n\n  typedef stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\";\n    }\n    description\n      \"This type is used to reference an event stream filter.\";\n  }\n\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\";\n    }\n    description\n      \"This type is used to reference a system-provided\n       event stream.\";\n  }\n\n  typedef subscription-id {\n    type uint32;\n    description\n      \"A type for subscription identifiers.\";\n  }\n\n  typedef transport {\n    type identityref {\n      base transport;\n    }\n    description\n      \"Specifies the transport used to send notification messages\n       to a receiver.\";\n  }\n\n  grouping stream-filter-elements {\n    description\n      \"This grouping defines the base for filters applied to event\n       streams.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           a subtree filter as defined in RFC 6241, Section 6.\n\n           The subtree filter is applied to the representation of\n           individual, delineated event records as contained in the\n           event stream.\n\n           If the subtree filter returns a non-empty node set, the\n           filter matches the event record, and the event record is\n           included in the notification message sent to the\n           receivers.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           an XPath 1.0 expression.\n\n           The XPath expression is evaluated on the representation of\n           individual, delineated event records as contained in\n           the event stream.\n\n           The result of the XPath expression is converted to a\n           boolean value using the standard XPath 1.0 rules.  If the\n           boolean value is 'true', the filter matches the event\n           record, and the event record is included in the\n           notification message sent to the receivers.\n\n           The expression is evaluated in the following XPath\n           context:\n\n              o  The set of namespace declarations is the set of\n                 prefix and namespace pairs for all YANG modules\n                 implemented by the server, where the prefix is the\n                 YANG module name and the namespace is as defined by\n                 the 'namespace' statement in the YANG module.\n\n                 If the leaf is encoded in XML, all namespace\n                 declarations in scope on the 'stream-xpath-filter'\n                 leaf element are added to the set of namespace\n                 declarations.  If a prefix found in the XML is\n                 already present in the set of namespace\n                 declarations, the namespace in the XML is used.\n\n              o  The set of variable bindings is empty.\n\n              o  The function library is comprised of the core\n                 function library and the XPath functions defined in\n                 Section 10 in RFC 7950.\n\n              o  The context node is the root node.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping update-qos {\n    description\n      \"This grouping describes QoS information concerning a\n       subscription.  This information is passed to lower layers\n       for transport prioritization and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The desired network transport priority level.  This is the\n         priority set on notification messages encapsulating the\n         results of the subscription.  This transport priority is\n         shared for all receivers of a given subscription.\";\n    }\n    leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for a subscription.  Larger weights get\n         more resources.  Allows an underlying transport layer to\n         perform informed load-balance allocations between various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n      description\n        \"Provides the 'subscription-id' of a parent subscription.\n         The parent subscription has absolute precedence should\n         that parent have push updates ready to egress the publisher.\n         In other words, there should be no streaming of objects from\n         the current subscription if the parent has something ready\n         to push.\n\n         If a dependency is asserted via configuration or via an RPC\n         but the referenced 'subscription-id' does not exist, the\n         dependency is silently discarded.  If a referenced\n         subscription is deleted, this dependency is removed.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.1\";\n    }\n  }\n\n  grouping subscription-policy-modifiable {\n    description\n      \"This grouping describes all objects that may be changed\n       in a subscription.\";\n    choice target {\n      mandatory true;\n      description\n        \"Identifies the source of information against which a\n         subscription is being applied as well as specifics on the\n         subset of information desired from that source.\";\n      case stream {\n        choice stream-filter {\n          description\n            \"An event stream filter can be applied to a subscription.\n             That filter will either come referenced from a global\n             list or be provided in the subscription itself.\";\n          case by-reference {\n            description\n              \"Apply a filter that has been configured separately.\";\n            leaf stream-filter-name {\n              type stream-filter-ref;\n              mandatory true;\n              description\n                \"References an existing event stream filter that is\n                 to be applied to an event stream for the\n                 subscription.\";\n            }\n          }\n          case within-subscription {\n            description\n              \"A local definition allows a filter to have the same\n               lifecycle as the subscription.\";\n            uses stream-filter-elements;\n          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n      description\n        \"Identifies a time after which notification messages for a\n         subscription should not be sent.  If 'stop-time' is not\n         present, the notification messages will continue until the\n         subscription is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time', when\n         established, must be for a future time.\";\n    }\n  }\n\n  grouping subscription-policy-dynamic {\n    description\n      \"This grouping describes the only information concerning a\n       subscription that can be passed over the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable {\n      augment \"target/stream\" {\n        description\n          \"Adds additional objects that can be modified by an RPC.\";\n        leaf stream {\n          type stream-ref {\n            require-instance false;\n          }\n          mandatory true;\n          description\n            \"Indicates the event stream to be considered for\n             this subscription.\";\n        }\n        leaf replay-start-time {\n          if-feature \"replay\";\n          type yang:date-and-time;\n          config false;\n          description\n            \"Used to trigger the 'replay' feature for a dynamic\n             subscription, where event records that are selected\n             need to be at or after the specified starting time.  If\n             'replay-start-time' is not present, this is not a replay\n             subscription and event record push should start\n             immediately.  It is never valid to specify start times\n             that are later than or equal to the current time.\";\n        }\n      }\n    }\n    uses update-qos;\n  }\n\n  grouping subscription-policy {\n    description\n      \"This grouping describes the full set of policy information\n       concerning both dynamic and configured subscriptions, with the\n       exclusion of both receivers and networking information\n       specific to the publisher, such as what interface should be\n       used to transmit notification messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n      if-feature \"configured\";\n      type transport;\n      description\n        \"For a configured subscription, this leaf specifies the\n         transport used to deliver messages destined for all\n         receivers of that subscription.\";\n    }\n    leaf encoding {\n      when \"not(../transport) or derived-from(../transport,\n        \\\"sn:configurable-encoding\\\")\";\n      type encoding;\n      description\n        \"The type of encoding for notification messages.  For a\n         dynamic subscription, if not included as part of an\n         'establish-subscription' RPC, the encoding will be populated\n         with the encoding used by that RPC.  For a configured\n         subscription, if not explicitly configured, the encoding\n         will be the default encoding for an underlying transport.\";\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n      description\n        \"Open text allowing a configuring entity to embed the\n         originator or other specifics of this subscription.\";\n    }\n  }\n\n  container streams {\n    config false;\n    description\n      \"Contains information on the built-in event streams provided by\n       the publisher.\";\n    list stream {\n      key \"name\";\n      description\n        \"Identifies the built-in event streams that are supported by\n         the publisher.\";\n      leaf name {\n        type string;\n        description\n          \"A handle for a system-provided event stream made up of a\n           sequential set of event records, each of which is\n           characterized by its own domain and semantics.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A description of the event stream, including such\n           information as the type of event records that are\n           available in this event stream.\";\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n        type empty;\n        description\n          \"Indicates that event record replay is available on this\n           event stream.\";\n      }\n      leaf replay-log-creation-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"The timestamp of the creation of the log used to support\n           the replay function on this event stream.  This time\n           might be earlier than the earliest available information\n           contained in the log.  This object is updated if the log\n           resets for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"The timestamp associated with the last event record that\n           has been aged out of the log.  This timestamp identifies\n           how far back in history this replay log extends, if it\n           doesn't extend back to the 'replay-log-creation-time'.\n           This object MUST be present if replay is supported and any\n           event records have been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n    description\n      \"Contains a list of configurable filters that can be applied to\n       subscriptions.  This facilitates the reuse of complex filters\n       once defined.\";\n    list stream-filter {\n      key \"name\";\n      description\n        \"A list of preconfigured filters that can be applied to\n         subscriptions.\";\n      leaf name {\n        type string;\n        description\n          \"A name to differentiate between filters.\";\n      }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions {\n    description\n      \"Contains the list of currently active subscriptions, i.e.,\n       subscriptions that are currently in effect, used for\n       subscription management and monitoring purposes.  This\n       includes subscriptions that have been set up via\n       RPC primitives as well as subscriptions that have been\n       established via configuration.\";\n    list subscription {\n      key \"id\";\n      description\n        \"The identity and specific parameters of a subscription.\n         Subscriptions in this list can be created using a control\n         channel or RPC or can be established through configuration.\n\n         If the 'kill-subscription' RPC or configuration operations\n         are used to delete a subscription, a\n         'subscription-terminated' message is sent to any active or\n         suspended receivers.\";\n      leaf id {\n        type subscription-id;\n        description\n          \"Identifier of a subscription; unique in a given\n           publisher.\";\n      }\n      uses subscription-policy {\n        refine \"target/stream/stream\" {\n          description\n            \"Indicates the event stream to be considered for this\n             subscription.  If an event stream has been removed\n             and can no longer be referenced by an active\n             subscription, send a 'subscription-terminated'\n             notification with 'stream-unavailable' as the reason.\n             If a configured subscription refers to a nonexistent\n             event stream, move that subscription to the\n             'invalid' state.\";\n        }\n        refine \"transport\" {\n          description\n            \"For a configured subscription, this leaf specifies the\n             transport used to deliver messages destined for all\n             receivers of that subscription.  This object is\n             mandatory for subscriptions in the configuration\n             datastore.  This object (1) is not mandatory for dynamic\n             subscriptions in the operational state datastore and\n             (2) should not be present for other types of dynamic\n             subscriptions.\";\n        }\n        augment \"target/stream\" {\n          description\n            \"Enables objects to be added to a configured stream\n             subscription.\";\n          leaf configured-replay {\n            if-feature \"configured\";\n            if-feature \"replay\";\n            type empty;\n            description\n              \"The presence of this leaf indicates that replay for\n               the configured subscription should start at the\n               earliest time in the event log or at the publisher\n               boot time, whichever is later.\";\n          }\n        }\n      }\n      choice notification-message-origin {\n        if-feature \"configured\";\n        description\n          \"Identifies the egress interface on the publisher\n           from which notification messages are to be sent.\";\n        case interface-originated {\n          description\n            \"When notification messages are to egress a specific,\n             designated interface on the publisher.\";\n          leaf source-interface {\n            if-feature \"interface-designation\";\n            type if:interface-ref;\n            description\n              \"References the interface for notification messages.\";\n          }\n        }\n        case address-originated {\n          description\n            \"When notification messages are to depart from a\n             publisher using a specific originating address and/or\n             routing context information.\";\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n            type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\";\n            }\n            description\n              \"VRF from which notification messages should egress a\n               publisher.\";\n          }\n          leaf source-address {\n            type inet:ip-address-no-zone;\n            description\n              \"The source address for the notification messages.\n               If a source VRF exists but this object doesn't, a\n               publisher's default address for that VRF must\n               be used.\";\n          }\n        }\n      }\n      leaf configured-subscription-state {\n        if-feature \"configured\";\n        type enumeration {\n          enum \"valid\" {\n            value 1;\n            description\n              \"The subscription is supportable with its current\n               parameters.\";\n          }\n          enum \"invalid\" {\n            value 2;\n            description\n              \"The subscription as a whole is unsupportable with its\n               current parameters.\";\n          }\n          enum \"concluded\" {\n            value 3;\n            description\n              \"A subscription is inactive, as it has hit a\n               stop time.  It no longer has receivers in the\n               'active' or 'suspended' state, but the subscription\n               has not yet been removed from configuration.\";\n          }\n        }\n        config false;\n        description\n          \"The presence of this leaf indicates that the subscription\n           originated from configuration, not through a control\n           channel or RPC.  The value indicates the state of the\n           subscription as established by the publisher.\";\n      }\n      container receivers {\n        description\n          \"Set of receivers in a subscription.\";\n        list receiver {\n          key \"name\";\n          min-elements 1;\n          description\n            \"A host intended as a recipient for the notification\n             messages of a subscription.  For configured\n             subscriptions, transport-specific network parameters\n             (or a leafref to those parameters) may be augmented to a\n             specific receiver in this list.\";\n          leaf name {\n            type string;\n            description\n              \"Identifies a unique receiver for a subscription.\";\n          }\n          leaf sent-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records sent to the receiver.  The\n               count is initialized when a dynamic subscription is\n               established or when a configured receiver\n               transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records explicitly removed via\n               either an event stream filter or an access control\n               filter so that they are not passed to a receiver.\n               This count is set to zero each time\n               'sent-event-records' is initialized.\";\n          }\n          leaf state {\n            type enumeration {\n              enum \"active\" {\n                value 1;\n                description\n                  \"The receiver is currently being sent any\n                   applicable notification messages for the\n                   subscription.\";\n              }\n              enum \"suspended\" {\n                value 2;\n                description\n                  \"The receiver state is 'suspended', so the\n                   publisher is currently unable to provide\n                   notification messages for the subscription.\";\n              }\n              enum \"connecting\" {\n                if-feature \"configured\";\n                value 3;\n                description\n                  \"A subscription has been configured, but a\n                   'subscription-started' subscription state change\n                   notification needs to be successfully received\n                   before notification messages are sent.\n\n                   If the 'reset' action is invoked for a receiver of\n                   an active configured subscription, the state\n                   must be moved to 'connecting'.\";\n              }\n              enum \"disconnected\" {\n                if-feature \"configured\";\n                value 4;\n                description\n                  \"A subscription has failed to send a\n                   'subscription-started' state change to the\n                   receiver.  Additional connection attempts are not\n                   currently being made.\";\n              }\n            }\n            config false;\n            mandatory true;\n            description\n              \"Specifies the state of a subscription from the\n               perspective of a particular receiver.  With this\n               information, it is possible to determine whether a\n               publisher is currently generating notification\n               messages intended for that receiver.\";\n          }\n          action reset {\n            if-feature \"configured\";\n            description\n              \"Allows the reset of this configured subscription's\n               receiver to the 'connecting' state.  This enables the\n               connection process to be reinitiated.\";\n\n            output {\n              leaf time {\n                type yang:date-and-time;\n                mandatory true;\n                description\n                  \"Time at which a publisher returned the receiver to\n                   the 'connecting' state.\";\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  rpc establish-subscription {\n    description\n      \"This RPC allows a subscriber to create (and possibly\n       negotiate) a subscription on its own behalf.  If successful,\n       the subscription remains in effect for the duration of the\n       subscriber's association with the publisher or until the\n       subscription is terminated.  If an error occurs or the\n       publisher cannot meet the terms of a subscription, an RPC\n       error is returned, and the subscription is not created.\n       In that case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings that would have a higher\n       likelihood of succeeding in a subsequent\n       'establish-subscription' request.\";\n\n    input {\n      uses subscription-policy-dynamic;\n      leaf encoding {\n        type encoding;\n        description\n          \"The type of encoding for the subscribed data.  If not\n           included as part of the RPC, the encoding MUST be set by\n           the publisher to be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision {\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"If a replay has been requested, this object represents\n           the earliest time covered by the event buffer for the\n           requested event stream.  The value of this object is the\n           'replay-log-aged-time' if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.  All buffered event\n           records after this time will be replayed to a receiver.\n           This object will only be sent if the starting time has\n           been revised to be later than the time requested by the\n           subscriber.\";\n      }\n    }\n  }\n  rpc modify-subscription {\n    description\n      \"This RPC allows a subscriber to modify a dynamic\n       subscription's parameters.  If successful, the changed\n       subscription parameters remain in effect for the duration of\n       the subscription, until the subscription is again modified, or\n       until the subscription is terminated.  In the case of an error\n       or an inability to meet the modified parameters, the\n       subscription is not modified and the original subscription\n       parameters remain in effect.  In that case, the RPC error MAY\n       include 'error-info' suggested parameter hints that would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription' request.  A successful\n       'modify-subscription' will return a suspended subscription to\n       the 'active' state.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier to use for this subscription.\";\n      }\n      uses subscription-policy-modifiable;\n    }\n  }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber to delete a subscription that\n       was previously created by that same subscriber using the\n       'establish-subscription' RPC.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' from the same origin as this RPC\n           can be deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n    nacm:default-deny-all;\n    description\n      \"This RPC allows an operator to delete a dynamic subscription\n       without restrictions on the originating subscriber or\n       underlying transport session.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n  }\n\n  notification replay-completed {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n    description\n      \"This notification is sent to indicate that all of the replay\n       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification is sent to indicate that a subscription has\n       finished passing event records, as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the gracefully completed subscription.\";\n    }\n  }\n  notification subscription-modified {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       modified.  Notification messages sent from this point on will\n       conform to the modified terms of the subscription.  For\n       completeness, this subscription state change notification\n       includes both modified and unmodified aspects of a\n       subscription.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification subscription-resumed {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription that had\n       previously been suspended has resumed.  Notifications will\n       once again be sent.  In addition, a 'subscription-resumed'\n       indicates that no modification of parameters has occurred\n       since the last time event records have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification indicates that a subscription has started\n       and notifications will now be sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/replay-start-time\" {\n        description\n          \"Indicates the time that a replay is using for the\n           streaming of buffered event records.  This will be\n           populated with the most recent of the following:\n           the event time of the previous event record sent to a\n           receiver, the 'replay-log-creation-time', the\n           'replay-log-aged-time', or the most recent publisher\n           boot time.\";\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n      augment \"target/stream\" {\n        description\n          \"This augmentation adds additional parameters specific to a\n           'subscription-started' notification.\";\n        leaf replay-previous-event-time {\n          when \"../replay-start-time\";\n          if-feature \"replay\";\n          type yang:date-and-time;\n          description\n            \"If there is at least one event in the replay buffer\n             prior to 'replay-start-time', this gives the time of\n             the event generated immediately prior to the\n             'replay-start-time'.\n\n             If a receiver previously received event records for\n             this configured subscription, it can compare this time\n             to the last event record previously received.  If the\n             two are not the same (perhaps due to a reboot), then a\n             dynamic replay can be initiated to acquire any missing\n             event records.\";\n        }\n      }\n    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a suspension of the\n       subscription by the publisher has occurred.  No further\n       notifications will be sent until the subscription resumes.\n       This notification shall only be sent to receivers of a\n       subscription; it does not constitute a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-suspended-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the suspension.\";\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-terminated-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the termination.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-inet-types",
              "subject": "ietf-inet-types-subject",
              "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-interfaces",
              "subject": "ietf-interfaces-subject",
              "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": {
                "features": [
                  "arbitrary-names",
                  "pre-provisioning",
                  "if-mib"
                ]
              }
            },
            {
              "name": "ietf-netconf-acm",
              "subject": "ietf-netconf-acm-subject",
              "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-network-instance",
              "subject": "ietf-network-instance-subject",
              "schema": "module ietf-network-instance {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-network-instance\";\n  prefix ni;\n\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-ip {\n    prefix ip;\n    reference\n      \"RFC 8344: A YANG Data Model for IP Management\";\n  }\n  import ietf-yang-schema-mount {\n    prefix yangmnt;\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  organization\n    \"IETF Routing Area (rtgwg) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/rtgwg&gt;\n     WG List:  &lt;mailto:rtgwg@ietf.org&gt;\n\n     Author:   Lou Berger\n               &lt;mailto:lberger@labn.net&gt;\n     Author:   Christian Hopps\n               &lt;mailto:chopps@chopps.org&gt;\n     Author:   Acee Lindem\n               &lt;mailto:acee@cisco.com&gt;\n     Author:   Dean Bogdanovic\n               &lt;mailto:ivandean@gmail.com&gt;\";\n  description\n    \"This module is used to support multiple network instances\n     within a single physical or virtual device.  Network\n     instances are commonly known as VRFs (VPN Routing and\n     Forwarding) and VSIs (Virtual Switching Instances).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all capitals,\n      as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8529; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-21 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8529\";\n  }\n\n  container network-instances {\n    description\n      \"Network instances, each of which consists of\n       VRFs and/or VSIs.\";\n    reference\n      \"RFC 8349: A YANG Data Model for Routing Management\";\n    list network-instance {\n      key \"name\";\n      description\n        \"List of network instances.\";\n      leaf name {\n        type string;\n        mandatory true;\n        description\n          \"device-scoped identifier for the network\n           instance.\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Flag indicating whether or not the network\n           instance is enabled.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"Description of the network instance\n           and its intended purpose.\";\n      }\n      choice ni-type {\n        description\n          \"This node serves as an anchor point for different types\n           of network instances.  Each 'case' is expected to\n           differ in terms of the information needed in the\n           parent/core to support the NI and may differ in their\n           mounted-schema definition.  When the mounted schema is\n           not expected to be the same for a specific type of NI,\n           a mount point should be defined.\";\n      }\n      choice root-type {\n        mandatory true;\n        description\n          \"Well-known mount points.\";\n        container vrf-root {\n          yangmnt:mount-point \"vrf-root\" {\n            description\n              \"Root for L3VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vsi-root {\n          yangmnt:mount-point \"vsi-root\" {\n            description\n              \"Root for L2VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vv-root {\n          yangmnt:mount-point \"vv-root\" {\n            description\n              \"Root models that support both L2VPN-type bridging\n               and L3VPN-type routing.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n      }\n    }\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on a interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which an interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv4\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv4 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv4 interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv6\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv6 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv6 interface is bound.\";\n    }\n  }\n\n  notification bind-ni-name-failed {\n    description\n      \"Indicates an error in the association of an interface to an\n       NI.  Only generated after success is initially returned when\n       bind-ni-name is set.\n\n       Note: Some errors may need to be reported for multiple\n       associations, e.g., a single error may need to be reported\n       for an IPv4 and an IPv6 bind-ni-name.\n\n       At least one container with a bind-ni-name leaf MUST be\n       included in this notification.\";\n    leaf name {\n      type leafref {\n        path \"/if:interfaces/if:interface/if:name\";\n      }\n      mandatory true;\n      description\n        \"Contains the interface name associated with the\n         failure.\";\n    }\n    container interface {\n      description\n        \"Generic interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv4 {\n      description\n        \"IPv4 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv6 {\n      description\n        \"IPv6 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv6/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    leaf error-info {\n      type string;\n      description\n        \"Optionally, indicates the source of the assignment\n         failure.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-interfaces",
                  "subject": "ietf-interfaces-subject",
                  "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "arbitrary-names",
                      "pre-provisioning",
                      "if-mib"
                    ]
                  }
                },
                {
                  "name": "ietf-ip",
                  "subject": "ietf-ip-subject",
                  "schema": "module ietf-ip {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n  prefix ip;\n\n  import ietf-interfaces {\n    prefix if;\n  }\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   &lt;http://tools.ietf.org/wg/netmod/&gt;\n     WG List:  &lt;mailto:netmod@ietf.org&gt;\n\n     WG Chair: Thomas Nadeau\n               &lt;mailto:tnadeau@lucidvision.com&gt;\n\n     WG Chair: Juergen Schoenwaelder\n               &lt;mailto:j.schoenwaelder@jacobs-university.de&gt;\n\n     Editor:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"This module contains a collection of YANG definitions for\n     configuring IP implementations.\n\n     Copyright (c) 2014 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 7277; see\n     the RFC itself for full legal notices.\";\n\n  revision 2014-06-16 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7277: A YANG Data Model for IP Management\";\n  }\n\n  feature ipv4-non-contiguous-netmasks {\n    description\n      \"Indicates support for configuring non-contiguous\n       subnet masks.\";\n  }\n\n  feature ipv6-privacy-autoconf {\n    description\n      \"Indicates support for Privacy Extensions for Stateless Address\n       Autoconfiguration in IPv6.\";\n    reference\n      \"RFC 4941: Privacy Extensions for Stateless Address\n                 Autoconfiguration in IPv6\";\n  }\n\n  typedef ip-address-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the address has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dhcp\" {\n        description\n          \"Indicates an address that has been assigned to this\n           system by a DHCP server.\";\n      }\n      enum \"link-layer\" {\n        description\n          \"Indicates an address created by IPv6 stateless\n           autoconfiguration that embeds a link-layer address in its\n           interface identifier.\";\n      }\n      enum \"random\" {\n        description\n          \"Indicates an address chosen by the system at\n\n           random, e.g., an IPv4 address within 169.254/16, an\n           RFC 4941 temporary address, or an RFC 7217 semantically\n           opaque address.\";\n        reference\n          \"RFC 4941: Privacy Extensions for Stateless Address\n                     Autoconfiguration in IPv6\n           RFC 7217: A Method for Generating Semantically Opaque\n                     Interface Identifiers with IPv6 Stateless\n                     Address Autoconfiguration (SLAAC)\";\n      }\n    }\n    description\n      \"The origin of an address.\";\n  }\n\n  typedef neighbor-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the mapping has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dynamic\" {\n        description\n          \"Indicates that the mapping has been dynamically resolved\n           using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery\n           protocol.\";\n      }\n    }\n    description\n      \"The origin of a neighbor entry.\";\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Parameters for configuring IP on interfaces.\n\n       If an interface is not capable of running IP, the server\n       must not allow the client to configure these parameters.\";\n    container ipv4 {\n      presence \"Enables IPv4 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv4 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv4 is enabled or disabled on this\n           interface.  When IPv4 is enabled, this interface is\n           connected to an IPv4 stack, and the interface can send\n           and receive IPv4 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv4 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv4 routers\n           forward datagrams.  IPv4 hosts do not (except those\n           source-routed via the host).\";\n      }\n      leaf mtu {\n        type uint16;\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          mandatory true;\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Enables IPv6 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv6 is enabled or disabled on this\n           interface.  When IPv6 is enabled, this interface is\n           connected to an IPv6 stack, and the interface can send\n           and receive IPv6 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv6 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv6 routers\n           forward datagrams.  IPv6 hosts do not (except those\n           source-routed via the host).\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n      leaf dup-addr-detect-transmits {\n        type uint32;\n        default \"1\";\n        description\n          \"The number of consecutive Neighbor Solicitation messages\n           sent while performing Duplicate Address Detection on a\n           tentative address.  A value of zero indicates that\n           Duplicate Address Detection is not performed on\n           tentative addresses.  A value of one indicates a single\n           transmission with no follow-up retransmissions.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      }\n      container autoconf {\n        description\n          \"Parameters to control the autoconfiguration of IPv6\n           addresses, as described in RFC 4862.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        leaf create-global-addresses {\n          type boolean;\n          default \"true\";\n          description\n            \"If enabled, the host creates global addresses as\n             described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\n                       Section 5.5\";\n        }\n        leaf create-temporary-addresses {\n          if-feature \"ipv6-privacy-autoconf\";\n          type boolean;\n          default \"false\";\n          description\n            \"If enabled, the host creates temporary addresses as\n             described in RFC 4941.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\";\n        }\n        leaf temporary-valid-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"604800\";\n          description\n            \"The time period during which the temporary address\n             is valid.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_VALID_LIFETIME\";\n        }\n        leaf temporary-preferred-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"86400\";\n          description\n            \"The time period during which the temporary address is\n             preferred.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_PREFERRED_LIFETIME\";\n        }\n      }\n    }\n  }\n  augment \"/if:interfaces-state/if:interface\" {\n    description\n      \"Data nodes for the operational state of IP on interfaces.\";\n    container ipv4 {\n      presence \"Present if IPv4 is enabled on this interface\";\n      config false;\n      description\n        \"Interface-specific parameters for the IPv4 address family.\";\n      leaf forwarding {\n        type boolean;\n        description\n          \"Indicates whether IPv4 packet forwarding is enabled or\n           disabled on this interface.\";\n      }\n      leaf mtu {\n        type uint16 {\n          range \"68..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           This list represents the ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Present if IPv6 is enabled on this interface\";\n      config false;\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Indicates whether IPv6 packet forwarding is enabled or\n           disabled on this interface.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n        leaf status {\n          type enumeration {\n            enum \"preferred\" {\n              description\n                \"This is a valid address that can appear as the\n                 destination or source address of a packet.\";\n            }\n            enum \"deprecated\" {\n              description\n                \"This is a valid but deprecated address that should\n                 no longer be used as a source address in new\n                 communications, but packets addressed to such an\n                 address are processed as expected.\";\n            }\n            enum \"invalid\" {\n              description\n                \"This isn't a valid address, and it shouldn't appear\n                 as the destination or source address of a packet.\";\n            }\n            enum \"inaccessible\" {\n              description\n                \"The address is not accessible because the interface\n                 to which this address is assigned is not\n                 operational.\";\n            }\n            enum \"unknown\" {\n              description\n                \"The status cannot be determined for some reason.\";\n            }\n            enum \"tentative\" {\n              description\n                \"The uniqueness of the address on the link is being\n                 verified.  Addresses in this state should not be\n                 used for general communication and should only be\n                 used to determine the uniqueness of the address.\";\n            }\n            enum \"duplicate\" {\n              description\n                \"The address has been determined to be non-unique on\n                 the link and so must not be used.\";\n            }\n            enum \"optimistic\" {\n              description\n                \"The address is available for use, subject to\n                 restrictions, while its uniqueness on a link is\n                 being verified.\";\n            }\n          }\n          description\n            \"The status of an address.  Most of the states correspond\n             to states from the IPv6 Stateless Address\n             Autoconfiguration protocol.\";\n          reference\n            \"RFC 4293: Management Information Base for the\n                       Internet Protocol (IP)\n                       - IpAddressStatusTC\n             RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           This list represents the Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n        leaf is-router {\n          type empty;\n          description\n            \"Indicates that the neighbor node acts as a router.\";\n        }\n        leaf state {\n          type enumeration {\n            enum \"incomplete\" {\n              description\n                \"Address resolution is in progress, and the link-layer\n                 address of the neighbor has not yet been\n                 determined.\";\n            }\n            enum \"reachable\" {\n              description\n                \"Roughly speaking, the neighbor is known to have been\n                 reachable recently (within tens of seconds ago).\";\n            }\n            enum \"stale\" {\n              description\n                \"The neighbor is no longer known to be reachable, but\n                 until traffic is sent to the neighbor no attempt\n                 should be made to verify its reachability.\";\n            }\n            enum \"delay\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 traffic has recently been sent to the neighbor.\n                 Rather than probe the neighbor immediately, however,\n                 delay sending probes for a short while in order to\n                 give upper-layer protocols a chance to provide\n                 reachability confirmation.\";\n            }\n            enum \"probe\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 unicast Neighbor Solicitation probes are being sent\n                 to verify reachability.\";\n            }\n          }\n          description\n            \"The Neighbor Unreachability Detection state of this\n             entry.\";\n          reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                       Section 7.3.2\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-interfaces",
                      "subject": "ietf-interfaces-subject",
                      "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "arbitrary-names",
                          "pre-provisioning",
                          "if-mib"
                        ]
                      }
                    },
                    {
                      "name": "ietf-inet-types",
                      "subject": "ietf-inet-types-subject",
                      "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    },
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "ipv4-non-contiguous-netmasks",
                      "ipv6-privacy-autoconf"
                    ]
                  }
                },
                {
                  "name": "ietf-yang-schema-mount",
                  "subject": "ietf-yang-schema-mount-subject",
                  "schema": "module ietf-yang-schema-mount {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n  prefix yangmnt;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Editor:   Ladislav Lhotka\n               <mailto:lhotka@nic.cz>\";\n  description\n    \"This module defines a YANG extension statement that can be used\n     to incorporate data models defined in other YANG modules in a\n     module.  It also defines operational state data that specify the\n     overall structure of the data model.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8528;\n     see the RFC itself for full legal notices.\";\n\n  revision 2019-01-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  extension mount-point {\n    argument label;\n    description\n      \"The argument 'label' is a YANG identifier, i.e., it is of the\n       type 'yang:yang-identifier'.\n\n       The 'mount-point' statement MUST NOT be used in a YANG\n       version 1 module, neither explicitly nor via a 'uses'\n       statement.\n       The 'mount-point' statement MAY be present as a substatement\n       of 'container' and 'list' and MUST NOT be present elsewhere.\n       There MUST NOT be more than one 'mount-point' statement in a\n       given 'container' or 'list' statement.\n\n       If a mount point is defined within a grouping, its label is\n       bound to the module where the grouping is used.\n\n       A mount point defines a place in the node hierarchy where\n       other data models may be attached.  A server that implements a\n       module with a mount point populates the\n       '/schema-mounts/mount-point' list with detailed information on\n       which data models are mounted at each mount point.\n\n       Note that the 'mount-point' statement does not define a new\n       data node.\";\n  }\n\n  container schema-mounts {\n    config false;\n    description\n      \"Contains information about the structure of the overall\n       mounted data model implemented in the server.\";\n    list namespace {\n      key \"prefix\";\n      description\n        \"This list provides a mapping of namespace prefixes that are\n         used in XPath expressions of 'parent-reference' leafs to the\n         corresponding namespace URI references.\";\n      leaf prefix {\n        type yang:yang-identifier;\n        description\n          \"Namespace prefix.\";\n      }\n      leaf uri {\n        type inet:uri;\n        description\n          \"Namespace URI reference.\";\n      }\n    }\n    list mount-point {\n      key \"module label\";\n      description\n        \"Each entry of this list specifies a schema for a particular\n         mount point.\n\n         Each mount point MUST be defined using the 'mount-point'\n         extension in one of the modules listed in the server's\n         YANG library instance with conformance type 'implement'.\";\n      leaf module {\n        type yang:yang-identifier;\n        description\n          \"Name of a module containing the mount point.\";\n      }\n      leaf label {\n        type yang:yang-identifier;\n        description\n          \"Label of the mount point defined using the 'mount-point'\n           extension.\";\n      }\n      leaf config {\n        type boolean;\n        default \"true\";\n        description\n          \"If this leaf is set to 'false', then all data nodes in the\n           mounted schema are read-only ('config false'), regardless\n           of their 'config' property.\";\n      }\n      choice schema-ref {\n        mandatory true;\n        description\n          \"Alternatives for specifying the schema.\";\n        container inline {\n          presence \"A complete self-contained schema is mounted at the\n           mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.\n\n             Different instances of the mount point may have\n             different schemas mounted.\";\n        }\n        container shared-schema {\n          presence \"The mounted schema together with the 'parent-reference'\n           make up the schema for this mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.  When XPath expressions in the mounted\n             schema are evaluated, the 'parent-reference' leaf-list\n             is taken into account.\n\n             Different instances of the mount point MUST have the\n             same schema mounted.\";\n          leaf-list parent-reference {\n            type yang:xpath1.0;\n            description\n              \"Entries of this leaf-list are XPath 1.0 expressions\n               that are evaluated in the following context:\n\n               - The context node is the node in the parent data tree\n                 where the mount-point is defined.\n\n               - The accessible tree is the parent data tree\n                 *without* any nodes defined in modules that are\n                 mounted inside the parent schema.\n\n               - The context position and context size are both equal\n                 to 1.\n\n               - The set of variable bindings is empty.\n\n               - The function library is the core function library\n                 defined in the W3C XPath 1.0 document\n                 (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                 the functions defined in Section 10 of RFC 7950.\n\n               - The set of namespace declarations is defined by the\n                 'namespace' list under 'schema-mounts'.\n\n               Each XPath expression MUST evaluate to a node-set\n               (possibly empty).  For the purposes of evaluating\n               XPath expressions whose context nodes are defined in\n               the mounted schema, the union of all these node-sets\n               together with ancestor nodes are added to the\n               accessible data tree.\n\n               Note that in the case 'ietf-yang-schema-mount' is\n               itself mounted, a 'parent-reference' in the mounted\n               module may refer to nodes that were brought into the\n               accessible tree through a 'parent-reference' in the\n               parent schema.\";\n          }\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-inet-types",
                      "subject": "ietf-inet-types-subject",
                      "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    },
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": {
            "features": [
              "configured",
              "dscp",
              "encode-json",
              "encode-xml",
              "interface-designation",
              "qos",
              "replay",
              "subtree",
              "supports-vrf",
              "xpath"
            ]
          }
        },
        {
          "name": "ietf-yang-push",
          "subject": "ietf-yang-push-subject",
          "schema": "module ietf-yang-push {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-push\";\n  prefix yp;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-subscribed-notifications {\n    prefix sn;\n    reference\n      \"RFC 8639: Subscription to YANG Notifications\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-patch {\n    prefix ypatch;\n    reference\n      \"RFC 8072: YANG Patch Media Type\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\";\n  description\n    \"This module contains YANG specifications for YANG-Push.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8641; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8641: Subscriptions to YANG Datastores\";\n  }\n\n  rc:yang-data \"resync-subscription-error\" {\n    container resync-subscription-error {\n      description\n        \"If a 'resync-subscription' RPC fails, the subscription is\n         not resynced and the RPC error response MUST indicate the\n         reason for this failure.  This yang-data MAY be inserted as\n         structured data in a subscription's RPC error response\n         to indicate the reason for the failure.\";\n      leaf reason {\n        type identityref {\n          base resync-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the publisher has declined a\n           request for subscription resynchronization.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"establish-subscription-datastore-error-info\" {\n    container establish-subscription-datastore-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the datastore, a subscription is not\n         created and the RPC error response MUST indicate the reason\n         why the subscription failed to be created.  This yang-data\n         MAY be inserted as structured data in a subscription's\n         RPC error response to indicate the reason for the failure.\n         This yang-data MUST be inserted if hints are to be provided\n         back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted datastore.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"modify-subscription-datastore-error-info\" {\n    container modify-subscription-datastore-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against a\n         datastore.  This yang-data MUST be used if hints are to be\n         provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:modify-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be modified.\";\n      }\n      uses hints;\n    }\n  }\n\n  feature on-change {\n    description\n      \"This feature indicates that on-change triggered subscriptions\n       are supported.\";\n  }\n\n  identity resync-subscription-error {\n    description\n      \"Problem found while attempting to fulfill a\n       'resync-subscription' RPC request.\";\n  }\n\n  identity cant-exclude {\n    base sn:establish-subscription-error;\n    description\n      \"Unable to remove the set of 'excluded-change' parameters.\n       This means that the publisher is unable to restrict\n       'push-change-update' notifications to just the change types\n       requested for this subscription.\";\n  }\n\n  identity datastore-not-subscribable {\n    base sn:establish-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"This is not a subscribable datastore.\";\n  }\n\n  identity no-such-subscription-resync {\n    base resync-subscription-error;\n    description\n      \"The referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity on-change-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"On-change is not supported for any objects that are\n       selectable by this filter.\";\n  }\n\n  identity on-change-sync-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"Neither 'sync-on-start' nor resynchronization is supported for\n       this subscription.  This error will be used for two reasons:\n       (1) if an 'establish-subscription' RPC includes\n       'sync-on-start' but the publisher can't support sending a\n       'push-update' for this subscription for reasons other than\n       'on-change-unsupported' or 'sync-too-big'\n       (2) if the 'resync-subscription' RPC is invoked for either an\n       existing periodic subscription or an on-change subscription\n       that can't support resynchronization.\";\n  }\n\n  identity period-unsupported {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The requested time period or 'dampening-period' is too short.\n       This can be for both periodic and on-change subscriptions\n       (with or without dampening).  Hints suggesting alternative\n       periods may be returned as supplemental information.\";\n  }\n\n  identity update-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"Periodic or on-change push update data trees exceed a maximum\n       size limit.  Hints on the estimated size of what was too big\n       may be returned as supplemental information.\";\n  }\n\n  identity sync-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base resync-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The 'sync-on-start' or resynchronization data tree exceeds a\n       maximum size limit.  Hints on the estimated size of what was\n       too big may be returned as supplemental information.\";\n  }\n\n  identity unchanging-selection {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"The selection filter is unlikely to ever select data tree\n       nodes.  This means that based on the subscriber's current\n       access rights, the publisher recognizes that the selection\n       filter is unlikely to ever select data tree nodes that change.\n       Examples for this might be that the node or subtree doesn't\n       exist, read access is not permitted for a receiver, or static\n       objects that only change at reboot have been chosen.\";\n  }\n\n  typedef change-type {\n    type enumeration {\n      enum \"create\" {\n        description\n          \"A change that refers to the creation of a new\n           datastore node.\";\n      }\n      enum \"delete\" {\n        description\n          \"A change that refers to the deletion of a\n           datastore node.\";\n      }\n      enum \"insert\" {\n        description\n          \"A change that refers to the insertion of a new\n           user-ordered datastore node.\";\n      }\n      enum \"move\" {\n        description\n          \"A change that refers to a reordering of the target\n           datastore node.\";\n      }\n      enum \"replace\" {\n        description\n          \"A change that refers to a replacement of the target\n           datastore node's value.\";\n      }\n    }\n    description\n      \"Specifies different types of datastore changes.\n\n       This type is based on the edit operations defined for\n       YANG Patch, with the difference that it is valid for a\n       receiver to process an update record that performs a\n       'create' operation on a datastore node the receiver believes\n       exists or to process a delete on a datastore node the\n       receiver believes is missing.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type, Section 2.5\";\n  }\n\n  typedef selection-filter-ref {\n    type leafref {\n      path \"/sn:filters/yp:selection-filter/yp:filter-id\";\n    }\n    description\n      \"This type is used to reference a selection filter.\";\n  }\n\n  typedef centiseconds {\n    type uint32;\n    description\n      \"A period of time, measured in units of 0.01 seconds.\";\n  }\n\n  grouping datastore-criteria {\n    description\n      \"A grouping to define criteria for which selected objects from\n       a targeted datastore should be included in push updates.\";\n    leaf datastore {\n      type identityref {\n        base ds:datastore;\n      }\n      mandatory true;\n      description\n        \"Datastore from which to retrieve data.\";\n    }\n    uses selection-filter-objects;\n  }\n\n  grouping selection-filter-types {\n    description\n      \"This grouping defines the types of selectors for objects\n       from a datastore.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata datastore-subtree-filter {\n        if-feature \"sn:subtree\";\n        description\n          \"This parameter identifies the portions of the\n           target datastore to retrieve.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf datastore-xpath-filter {\n        if-feature \"sn:xpath\";\n        type yang:xpath1.0;\n        description\n          \"This parameter contains an XPath expression identifying\n           the portions of the target datastore to retrieve.\n\n           If the expression returns a node set, all nodes in the\n           node set are selected by the filter.  Otherwise, if the\n           expression does not return a node set, the filter\n           doesn't select any nodes.\n\n           The expression is evaluated in the following XPath\n           context:\n\n           o  The set of namespace declarations is the set of prefix\n              and namespace pairs for all YANG modules implemented\n              by the server, where the prefix is the YANG module\n              name and the namespace is as defined by the\n              'namespace' statement in the YANG module.\n\n              If the leaf is encoded in XML, all namespace\n              declarations in scope on the 'stream-xpath-filter'\n              leaf element are added to the set of namespace\n              declarations.  If a prefix found in the XML is\n              already present in the set of namespace declarations,\n              the namespace in the XML is used.\n\n           o  The set of variable bindings is empty.\n\n           o  The function library is comprised of the core\n              function library and the XPath functions defined in\n              Section 10 in RFC 7950.\n\n           o  The context node is the root node of the target\n              datastore.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping selection-filter-objects {\n    description\n      \"This grouping defines a selector for objects from a\n       datastore.\";\n    choice selection-filter {\n      description\n        \"The source of the selection filter applied to the\n         subscription.  This will either (1) come referenced from a\n         global list or (2) be provided in the subscription itself.\";\n      case by-reference {\n        description\n          \"Incorporates a filter that has been configured\n           separately.\";\n        leaf selection-filter-ref {\n          type selection-filter-ref;\n          mandatory true;\n          description\n            \"References an existing selection filter that is to be\n             applied to the subscription.\";\n        }\n      }\n      case within-subscription {\n        description\n          \"A local definition allows a filter to have the same\n           lifecycle as the subscription.\";\n        uses selection-filter-types;\n      }\n    }\n  }\n\n  grouping update-policy-modifiable {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions that can be changed during the lifetime of the\n       subscription.\";\n    choice update-trigger {\n      description\n        \"Defines necessary conditions for sending an event record to\n         the subscriber.\";\n      case periodic {\n        container periodic {\n          presence \"indicates a periodic subscription\";\n          description\n            \"The publisher is requested to periodically notify the\n             receiver regarding the current values of the datastore\n             as defined by the selection filter.\";\n          leaf period {\n            type centiseconds;\n            mandatory true;\n            description\n              \"Duration of time that should occur between periodic\n               push updates, in units of 0.01 seconds.\";\n          }\n          leaf anchor-time {\n            type yang:date-and-time;\n            description\n              \"Designates a timestamp before or after which a series\n               of periodic push updates are determined.  The next\n               update will take place at a point in time that is a\n               multiple of a period from the 'anchor-time'.\n               For example, for an 'anchor-time' that is set for the\n               top of a particular minute and a period interval of a\n               minute, updates will be sent at the top of every\n               minute that this subscription is active.\";\n          }\n        }\n      }\n      case on-change {\n        if-feature \"on-change\";\n        container on-change {\n          presence \"indicates an on-change subscription\";\n          description\n            \"The publisher is requested to notify the receiver\n             regarding changes in values in the datastore subset as\n             defined by a selection filter.\";\n          leaf dampening-period {\n            type centiseconds;\n            default \"0\";\n            description\n              \"Specifies the minimum interval between the assembly of\n               successive update records for a single receiver of a\n               subscription.  Whenever subscribed objects change and\n               a dampening-period interval (which may be zero) has\n               elapsed since the previous update record creation for\n               a receiver, any subscribed objects and properties\n               that have changed since the previous update record\n               will have their current values marshalled and placed\n               in a new update record.\";\n          }\n        }\n      }\n    }\n  }\n\n  grouping update-policy {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions of a subscription.\";\n    uses update-policy-modifiable {\n      augment \"update-trigger/on-change/on-change\" {\n        description\n          \"Includes objects that are not modifiable once a\n           subscription is established.\";\n        leaf sync-on-start {\n          type boolean;\n          default \"true\";\n          description\n            \"When this object is set to 'false', (1) it restricts an\n             on-change subscription from sending 'push-update'\n             notifications and (2) pushing a full selection per the\n             terms of the selection filter MUST NOT be done for\n             this subscription.  Only updates about changes\n             (i.e., only 'push-change-update' notifications)\n             are sent.  When set to 'true' (the default behavior),\n             in order to facilitate a receiver's synchronization,\n             a full update is sent, via a 'push-update' notification,\n             when the subscription starts.  After that,\n             'push-change-update' notifications are exclusively sent,\n             unless the publisher chooses to resync the subscription\n             via a new 'push-update' notification.\";\n        }\n        leaf-list excluded-change {\n          type change-type;\n          description\n            \"Used to restrict which changes trigger an update.  For\n             example, if a 'replace' operation is excluded, only the\n             creation and deletion of objects are reported.\";\n        }\n      }\n    }\n  }\n\n  grouping hints {\n    description\n      \"Parameters associated with an error for a subscription\n       made upon a datastore.\";\n    leaf period-hint {\n      type centiseconds;\n      description\n        \"Returned when the requested time period is too short.  This\n         hint can assert a viable period for either a periodic push\n         cadence or an on-change dampening interval.\";\n    }\n    leaf filter-failure-hint {\n      type string;\n      description\n        \"Information describing where and/or why a provided filter\n         was unsupportable for a subscription.\";\n    }\n    leaf object-count-estimate {\n      type uint32;\n      description\n        \"If there are too many objects that could potentially be\n         returned by the selection filter, this identifies the\n         estimate of the number of objects that the filter would\n         potentially pass.\";\n    }\n    leaf object-count-limit {\n      type uint32;\n      description\n        \"If there are too many objects that could be returned by\n         the selection filter, this identifies the upper limit of\n         the publisher's ability to service this subscription.\";\n    }\n    leaf kilobytes-estimate {\n      type uint32;\n      description\n        \"If the returned information could be beyond the capacity\n         of the publisher, this would identify the estimated\n         data size that could result from this selection filter.\";\n    }\n    leaf kilobytes-limit {\n      type uint32;\n      description\n        \"If the returned information would be beyond the capacity\n         of the publisher, this identifies the upper limit of the\n         publisher's ability to service this subscription.\";\n    }\n  }\n\n  augment \"/sn:establish-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       that apply specifically to datastore updates to RPC input.\";\n    uses update-policy;\n  }\n  augment \"/sn:establish-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:modify-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       specific to datastore updates.\";\n    uses update-policy-modifiable;\n  }\n  augment \"/sn:modify-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:subscription-started\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has started.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-started/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has started.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:subscription-modified\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has been modified.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-modified/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has been\n       modified.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:filters\" {\n    description\n      \"This augmentation allows the datastore to be included as part\n       of the selection-filtering criteria for a subscription.\";\n    list selection-filter {\n      key \"filter-id\";\n      description\n        \"A list of preconfigured filters that can be applied\n         to datastore subscriptions.\";\n      leaf filter-id {\n        type string;\n        description\n          \"An identifier to differentiate between selection\n           filters.\";\n      }\n      uses selection-filter-types;\n    }\n  }\n  augment \"/sn:subscriptions/sn:subscription\" {\n    when \"yp:datastore\";\n    description\n      \"This augmentation adds objects to a subscription that are\n       specific to a datastore subscription, i.e., a subscription to\n       a stream of datastore node updates.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscriptions/sn:subscription/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the selection-filtering criteria for a subscription.\";\n    case datastore {\n      uses datastore-criteria;\n    }\n  }\n\n  rpc resync-subscription {\n    if-feature \"on-change\";\n    description\n      \"This RPC allows a subscriber of an active on-change\n       subscription to request a full push of objects.\n\n       A successful invocation results in a 'push-update' of all\n       datastore nodes that the subscriber is permitted to access.\n       This RPC can only be invoked on the same session on which the\n       subscription is currently active.  In the case of an error, a\n       'resync-subscription-error' is sent as part of an error\n       response.\";\n\n    input {\n      leaf id {\n        type sn:subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be resynced.\";\n      }\n    }\n  }\n\n  notification push-update {\n    description\n      \"This notification contains a push update that in turn contains\n       data subscribed to via a subscription.  In the case of a\n       periodic subscription, this notification is sent for periodic\n       updates.  It can also be used for synchronization updates of\n       an on-change subscription.  This notification shall only be\n       sent to receivers of a subscription.  It does not constitute\n       a general-purpose notification that would be subscribable as\n       part of the NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    anydata datastore-contents {\n      description\n        \"This contains the updated data.  It constitutes a snapshot\n         at the time of update of the set of data that has been\n         subscribed to.  The snapshot corresponds to the same\n         snapshot that would be returned in a corresponding 'get'\n         operation with the same selection filter parameters\n         applied.\";\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"This is a flag that indicates that not all datastore\n         nodes subscribed to are included with this update.  In\n         other words, the publisher has failed to fulfill its full\n         subscription obligations and, despite its best efforts, is\n         providing an incomplete set of objects.\";\n    }\n  }\n  notification push-change-update {\n    if-feature \"on-change\";\n    description\n      \"This notification contains an on-change push update.  This\n       notification shall only be sent to the receivers of a\n       subscription.  It does not constitute a general-purpose\n       notification that would be subscribable as part of the\n       NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    container datastore-changes {\n      description\n        \"This contains the set of datastore changes of the target\n         datastore, starting at the time of the previous update, per\n         the terms of the subscription.\";\n      uses ypatch:yang-patch;\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"The presence of this object indicates that not all changes\n         that have occurred since the last update are included with\n         this update.  In other words, the publisher has failed to\n         fulfill its full subscription obligations -- for example,\n         in cases where it was not able to keep up with a burst of\n         changes.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-subscribed-notifications",
              "subject": "ietf-subscribed-notifications-subject",
              "schema": "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\";\n  prefix sn;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\n\n     Author:  Alberto Gonzalez Prieto\n              &lt;mailto:alberto.gonzalez@microsoft.com&gt;\n\n     Author:  Einar Nilsen-Nygaard\n              &lt;mailto:einarnn@cisco.com&gt;\n\n     Author:  Ambika Prasad Tripathy\n              &lt;mailto:ambtripa@cisco.com&gt;\";\n  description\n    \"This module defines a YANG data model for subscribing to event\n     records and receiving matching content in notification messages.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8639; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model for Subscriptions to\n                 Event Notifications\";\n  }\n\n  extension subscription-state-notification {\n    description\n      \"This statement applies only to notifications.  It indicates\n       that the notification is a subscription state change\n       notification.  Therefore, it does not participate in a regular\n       event stream and does not need to be specifically subscribed\n       to in order to be received.  This statement can only occur as\n       a substatement of the YANG 'notification' statement.  This\n       statement is not for use outside of this YANG module.\";\n  }\n\n  rc:yang-data \"establish-subscription-stream-error-info\" {\n    container establish-subscription-stream-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the event stream, a subscription\n         is not created and the RPC error response MUST indicate the\n         reason why the subscription failed to be created.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason for\n         the failure.  This yang-data MUST be inserted if hints are\n         to be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted event stream.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The\n           syntax and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"modify-subscription-stream-error-info\" {\n    container modify-subscription-stream-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against an\n         event stream.  This yang-data MUST be used if hints are to\n         be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base modify-subscription-error;\n        }\n        description\n          \"Information in a 'modify-subscription' RPC error response\n           that indicates the reason why the subscription to an event\n           stream has failed to be modified.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The syntax\n           and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"delete-subscription-error-info\" {\n    container delete-subscription-error-info {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription' RPC\n         fails, the subscription is not deleted and the RPC error\n         response MUST indicate the reason for this failure.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason\n         for the failure.\";\n      leaf reason {\n        type identityref {\n          base delete-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the subscription has failed to be\n           deleted.\";\n      }\n    }\n  }\n\n  feature configured {\n    description\n      \"This feature indicates that configuration of subscriptions is\n       supported.\";\n  }\n\n  feature dscp {\n    description\n      \"This feature indicates that a publisher supports the ability\n       to set the Differentiated Services Code Point (DSCP) value in\n       outgoing packets.\";\n  }\n\n  feature encode-json {\n    description\n      \"This feature indicates that JSON encoding of notification\n       messages is supported.\";\n  }\n\n  feature encode-xml {\n    description\n      \"This feature indicates that XML encoding of notification\n       messages is supported.\";\n  }\n\n  feature interface-designation {\n    description\n      \"This feature indicates that a publisher supports sourcing all\n       receiver interactions for a configured subscription from a\n       single designated egress interface.\";\n  }\n\n  feature qos {\n    description\n      \"This feature indicates that a publisher supports absolute\n       dependencies of one subscription's traffic over another\n       as well as weighted bandwidth sharing between subscriptions.\n       Both of these are Quality of Service (QoS) features that allow\n       differentiated treatment of notification messages between a\n       publisher and a specific receiver.\";\n  }\n\n  feature replay {\n    description\n      \"This feature indicates that historical event record replay is\n       supported.  With replay, it is possible for past event records\n       to be streamed in chronological order.\";\n  }\n\n  feature subtree {\n    description\n      \"This feature indicates support for YANG subtree filtering.\";\n    reference\n      \"RFC 6241: Network Configuration Protocol (NETCONF),\n                 Section 6\";\n  }\n\n  feature supports-vrf {\n    description\n      \"This feature indicates that a publisher supports VRF\n       configuration for configured subscriptions.  VRF support for\n       dynamic subscriptions does not require this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances,\n                 Section 6\";\n  }\n\n  feature xpath {\n    description\n      \"This feature indicates support for XPath filtering.\";\n    reference\n      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\";\n  }\n\n  identity delete-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription' RPC request.\";\n  }\n\n  identity establish-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill an 'establish-subscription' RPC request.\";\n  }\n\n  identity modify-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n\n  identity subscription-suspended-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n       notification.\";\n  }\n\n  identity subscription-terminated-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-terminated'\n       notification.\";\n  }\n\n  identity dscp-unavailable {\n    if-feature \"dscp\";\n    base establish-subscription-error;\n    description\n      \"The publisher is unable to mark notification messages with\n       prioritization information in a way that will be respected\n       during network transit.\";\n  }\n\n  identity encoding-unsupported {\n    base establish-subscription-error;\n    description\n      \"Unable to encode notification messages in the desired\n       format.\";\n  }\n\n  identity filter-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Referenced filter does not exist.  This means a receiver is\n       referencing a filter that doesn't exist or to which it\n       does not have access permissions.\";\n  }\n\n  identity filter-unsupported {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    description\n      \"Cannot parse syntax in the filter.  This failure can be from\n       a syntax error or a syntax too complex to be processed by the\n       publisher.\";\n  }\n\n  identity insufficient-resources {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have sufficient resources to support\n       the requested subscription.  An example might be that\n       allocated CPU is too limited to generate the desired set of\n       notification messages.\";\n  }\n\n  identity no-such-subscription {\n    base modify-subscription-error;\n    base delete-subscription-error;\n    base subscription-terminated-reason;\n    description\n      \"Referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity replay-unsupported {\n    if-feature \"replay\";\n    base establish-subscription-error;\n    description\n      \"Replay cannot be performed for this subscription.  This means\n       the publisher will not provide the requested historic\n       information from the event stream via replay to this\n       receiver.\";\n  }\n\n  identity stream-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Not a subscribable event stream.  This means the referenced\n       event stream is not available for subscription by the\n       receiver.\";\n  }\n\n  identity suspension-timeout {\n    base subscription-terminated-reason;\n    description\n      \"Termination of a previously suspended subscription.  The\n       publisher has eliminated the subscription, as it exceeded a\n       time limit for suspension.\";\n  }\n\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have the network bandwidth needed to\n       get the volume of generated information intended for a\n       receiver.\";\n  }\n\n  identity configurable-encoding {\n    description\n      \"If a transport identity derives from this identity, it means\n       that it supports configurable encodings.  An example of a\n       configurable encoding might be a new identity such as\n       'encode-cbor'.  Such an identity could use\n       'configurable-encoding' as its base.  This would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n       that notification messages be encoded via the Concise Binary\n       Object Representation (CBOR) (RFC 7049).  Further details for\n       any specific configurable encoding would be explored in a\n       transport document based on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object Notation (JSON) Data\n                 Interchange Format\n       RFC 7049: Concise Binary Object Representation (CBOR)\";\n  }\n\n  identity encoding {\n    description\n      \"Base identity to represent data encodings.\";\n  }\n\n  identity encode-xml {\n    if-feature \"encode-xml\";\n    base encoding;\n    description\n      \"Encode data using XML as described in RFC 7950.\";\n    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\n  identity encode-json {\n    if-feature \"encode-json\";\n    base encoding;\n    description\n      \"Encode data using JSON as described in RFC 7951.\";\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\";\n  }\n\n  identity transport {\n    description\n      \"An identity that represents the underlying mechanism for\n       passing notification messages.\";\n  }\n\n  typedef encoding {\n    type identityref {\n      base encoding;\n    }\n    description\n      \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n\n  typedef stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\";\n    }\n    description\n      \"This type is used to reference an event stream filter.\";\n  }\n\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\";\n    }\n    description\n      \"This type is used to reference a system-provided\n       event stream.\";\n  }\n\n  typedef subscription-id {\n    type uint32;\n    description\n      \"A type for subscription identifiers.\";\n  }\n\n  typedef transport {\n    type identityref {\n      base transport;\n    }\n    description\n      \"Specifies the transport used to send notification messages\n       to a receiver.\";\n  }\n\n  grouping stream-filter-elements {\n    description\n      \"This grouping defines the base for filters applied to event\n       streams.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           a subtree filter as defined in RFC 6241, Section 6.\n\n           The subtree filter is applied to the representation of\n           individual, delineated event records as contained in the\n           event stream.\n\n           If the subtree filter returns a non-empty node set, the\n           filter matches the event record, and the event record is\n           included in the notification message sent to the\n           receivers.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           an XPath 1.0 expression.\n\n           The XPath expression is evaluated on the representation of\n           individual, delineated event records as contained in\n           the event stream.\n\n           The result of the XPath expression is converted to a\n           boolean value using the standard XPath 1.0 rules.  If the\n           boolean value is 'true', the filter matches the event\n           record, and the event record is included in the\n           notification message sent to the receivers.\n\n           The expression is evaluated in the following XPath\n           context:\n\n              o  The set of namespace declarations is the set of\n                 prefix and namespace pairs for all YANG modules\n                 implemented by the server, where the prefix is the\n                 YANG module name and the namespace is as defined by\n                 the 'namespace' statement in the YANG module.\n\n                 If the leaf is encoded in XML, all namespace\n                 declarations in scope on the 'stream-xpath-filter'\n                 leaf element are added to the set of namespace\n                 declarations.  If a prefix found in the XML is\n                 already present in the set of namespace\n                 declarations, the namespace in the XML is used.\n\n              o  The set of variable bindings is empty.\n\n              o  The function library is comprised of the core\n                 function library and the XPath functions defined in\n                 Section 10 in RFC 7950.\n\n              o  The context node is the root node.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping update-qos {\n    description\n      \"This grouping describes QoS information concerning a\n       subscription.  This information is passed to lower layers\n       for transport prioritization and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The desired network transport priority level.  This is the\n         priority set on notification messages encapsulating the\n         results of the subscription.  This transport priority is\n         shared for all receivers of a given subscription.\";\n    }\n    leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for a subscription.  Larger weights get\n         more resources.  Allows an underlying transport layer to\n         perform informed load-balance allocations between various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n      description\n        \"Provides the 'subscription-id' of a parent subscription.\n         The parent subscription has absolute precedence should\n         that parent have push updates ready to egress the publisher.\n         In other words, there should be no streaming of objects from\n         the current subscription if the parent has something ready\n         to push.\n\n         If a dependency is asserted via configuration or via an RPC\n         but the referenced 'subscription-id' does not exist, the\n         dependency is silently discarded.  If a referenced\n         subscription is deleted, this dependency is removed.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.1\";\n    }\n  }\n\n  grouping subscription-policy-modifiable {\n    description\n      \"This grouping describes all objects that may be changed\n       in a subscription.\";\n    choice target {\n      mandatory true;\n      description\n        \"Identifies the source of information against which a\n         subscription is being applied as well as specifics on the\n         subset of information desired from that source.\";\n      case stream {\n        choice stream-filter {\n          description\n            \"An event stream filter can be applied to a subscription.\n             That filter will either come referenced from a global\n             list or be provided in the subscription itself.\";\n          case by-reference {\n            description\n              \"Apply a filter that has been configured separately.\";\n            leaf stream-filter-name {\n              type stream-filter-ref;\n              mandatory true;\n              description\n                \"References an existing event stream filter that is\n                 to be applied to an event stream for the\n                 subscription.\";\n            }\n          }\n          case within-subscription {\n            description\n              \"A local definition allows a filter to have the same\n               lifecycle as the subscription.\";\n            uses stream-filter-elements;\n          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n      description\n        \"Identifies a time after which notification messages for a\n         subscription should not be sent.  If 'stop-time' is not\n         present, the notification messages will continue until the\n         subscription is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time', when\n         established, must be for a future time.\";\n    }\n  }\n\n  grouping subscription-policy-dynamic {\n    description\n      \"This grouping describes the only information concerning a\n       subscription that can be passed over the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable {\n      augment \"target/stream\" {\n        description\n          \"Adds additional objects that can be modified by an RPC.\";\n        leaf stream {\n          type stream-ref {\n            require-instance false;\n          }\n          mandatory true;\n          description\n            \"Indicates the event stream to be considered for\n             this subscription.\";\n        }\n        leaf replay-start-time {\n          if-feature \"replay\";\n          type yang:date-and-time;\n          config false;\n          description\n            \"Used to trigger the 'replay' feature for a dynamic\n             subscription, where event records that are selected\n             need to be at or after the specified starting time.  If\n             'replay-start-time' is not present, this is not a replay\n             subscription and event record push should start\n             immediately.  It is never valid to specify start times\n             that are later than or equal to the current time.\";\n        }\n      }\n    }\n    uses update-qos;\n  }\n\n  grouping subscription-policy {\n    description\n      \"This grouping describes the full set of policy information\n       concerning both dynamic and configured subscriptions, with the\n       exclusion of both receivers and networking information\n       specific to the publisher, such as what interface should be\n       used to transmit notification messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n      if-feature \"configured\";\n      type transport;\n      description\n        \"For a configured subscription, this leaf specifies the\n         transport used to deliver messages destined for all\n         receivers of that subscription.\";\n    }\n    leaf encoding {\n      when \"not(../transport) or derived-from(../transport,\n        \\\"sn:configurable-encoding\\\")\";\n      type encoding;\n      description\n        \"The type of encoding for notification messages.  For a\n         dynamic subscription, if not included as part of an\n         'establish-subscription' RPC, the encoding will be populated\n         with the encoding used by that RPC.  For a configured\n         subscription, if not explicitly configured, the encoding\n         will be the default encoding for an underlying transport.\";\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n      description\n        \"Open text allowing a configuring entity to embed the\n         originator or other specifics of this subscription.\";\n    }\n  }\n\n  container streams {\n    config false;\n    description\n      \"Contains information on the built-in event streams provided by\n       the publisher.\";\n    list stream {\n      key \"name\";\n      description\n        \"Identifies the built-in event streams that are supported by\n         the publisher.\";\n      leaf name {\n        type string;\n        description\n          \"A handle for a system-provided event stream made up of a\n           sequential set of event records, each of which is\n           characterized by its own domain and semantics.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A description of the event stream, including such\n           information as the type of event records that are\n           available in this event stream.\";\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n        type empty;\n        description\n          \"Indicates that event record replay is available on this\n           event stream.\";\n      }\n      leaf replay-log-creation-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"The timestamp of the creation of the log used to support\n           the replay function on this event stream.  This time\n           might be earlier than the earliest available information\n           contained in the log.  This object is updated if the log\n           resets for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"The timestamp associated with the last event record that\n           has been aged out of the log.  This timestamp identifies\n           how far back in history this replay log extends, if it\n           doesn't extend back to the 'replay-log-creation-time'.\n           This object MUST be present if replay is supported and any\n           event records have been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n    description\n      \"Contains a list of configurable filters that can be applied to\n       subscriptions.  This facilitates the reuse of complex filters\n       once defined.\";\n    list stream-filter {\n      key \"name\";\n      description\n        \"A list of preconfigured filters that can be applied to\n         subscriptions.\";\n      leaf name {\n        type string;\n        description\n          \"A name to differentiate between filters.\";\n      }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions {\n    description\n      \"Contains the list of currently active subscriptions, i.e.,\n       subscriptions that are currently in effect, used for\n       subscription management and monitoring purposes.  This\n       includes subscriptions that have been set up via\n       RPC primitives as well as subscriptions that have been\n       established via configuration.\";\n    list subscription {\n      key \"id\";\n      description\n        \"The identity and specific parameters of a subscription.\n         Subscriptions in this list can be created using a control\n         channel or RPC or can be established through configuration.\n\n         If the 'kill-subscription' RPC or configuration operations\n         are used to delete a subscription, a\n         'subscription-terminated' message is sent to any active or\n         suspended receivers.\";\n      leaf id {\n        type subscription-id;\n        description\n          \"Identifier of a subscription; unique in a given\n           publisher.\";\n      }\n      uses subscription-policy {\n        refine \"target/stream/stream\" {\n          description\n            \"Indicates the event stream to be considered for this\n             subscription.  If an event stream has been removed\n             and can no longer be referenced by an active\n             subscription, send a 'subscription-terminated'\n             notification with 'stream-unavailable' as the reason.\n             If a configured subscription refers to a nonexistent\n             event stream, move that subscription to the\n             'invalid' state.\";\n        }\n        refine \"transport\" {\n          description\n            \"For a configured subscription, this leaf specifies the\n             transport used to deliver messages destined for all\n             receivers of that subscription.  This object is\n             mandatory for subscriptions in the configuration\n             datastore.  This object (1) is not mandatory for dynamic\n             subscriptions in the operational state datastore and\n             (2) should not be present for other types of dynamic\n             subscriptions.\";\n        }\n        augment \"target/stream\" {\n          description\n            \"Enables objects to be added to a configured stream\n             subscription.\";\n          leaf configured-replay {\n            if-feature \"configured\";\n            if-feature \"replay\";\n            type empty;\n            description\n              \"The presence of this leaf indicates that replay for\n               the configured subscription should start at the\n               earliest time in the event log or at the publisher\n               boot time, whichever is later.\";\n          }\n        }\n      }\n      choice notification-message-origin {\n        if-feature \"configured\";\n        description\n          \"Identifies the egress interface on the publisher\n           from which notification messages are to be sent.\";\n        case interface-originated {\n          description\n            \"When notification messages are to egress a specific,\n             designated interface on the publisher.\";\n          leaf source-interface {\n            if-feature \"interface-designation\";\n            type if:interface-ref;\n            description\n              \"References the interface for notification messages.\";\n          }\n        }\n        case address-originated {\n          description\n            \"When notification messages are to depart from a\n             publisher using a specific originating address and/or\n             routing context information.\";\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n            type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\";\n            }\n            description\n              \"VRF from which notification messages should egress a\n               publisher.\";\n          }\n          leaf source-address {\n            type inet:ip-address-no-zone;\n            description\n              \"The source address for the notification messages.\n               If a source VRF exists but this object doesn't, a\n               publisher's default address for that VRF must\n               be used.\";\n          }\n        }\n      }\n      leaf configured-subscription-state {\n        if-feature \"configured\";\n        type enumeration {\n          enum \"valid\" {\n            value 1;\n            description\n              \"The subscription is supportable with its current\n               parameters.\";\n          }\n          enum \"invalid\" {\n            value 2;\n            description\n              \"The subscription as a whole is unsupportable with its\n               current parameters.\";\n          }\n          enum \"concluded\" {\n            value 3;\n            description\n              \"A subscription is inactive, as it has hit a\n               stop time.  It no longer has receivers in the\n               'active' or 'suspended' state, but the subscription\n               has not yet been removed from configuration.\";\n          }\n        }\n        config false;\n        description\n          \"The presence of this leaf indicates that the subscription\n           originated from configuration, not through a control\n           channel or RPC.  The value indicates the state of the\n           subscription as established by the publisher.\";\n      }\n      container receivers {\n        description\n          \"Set of receivers in a subscription.\";\n        list receiver {\n          key \"name\";\n          min-elements 1;\n          description\n            \"A host intended as a recipient for the notification\n             messages of a subscription.  For configured\n             subscriptions, transport-specific network parameters\n             (or a leafref to those parameters) may be augmented to a\n             specific receiver in this list.\";\n          leaf name {\n            type string;\n            description\n              \"Identifies a unique receiver for a subscription.\";\n          }\n          leaf sent-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records sent to the receiver.  The\n               count is initialized when a dynamic subscription is\n               established or when a configured receiver\n               transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records explicitly removed via\n               either an event stream filter or an access control\n               filter so that they are not passed to a receiver.\n               This count is set to zero each time\n               'sent-event-records' is initialized.\";\n          }\n          leaf state {\n            type enumeration {\n              enum \"active\" {\n                value 1;\n                description\n                  \"The receiver is currently being sent any\n                   applicable notification messages for the\n                   subscription.\";\n              }\n              enum \"suspended\" {\n                value 2;\n                description\n                  \"The receiver state is 'suspended', so the\n                   publisher is currently unable to provide\n                   notification messages for the subscription.\";\n              }\n              enum \"connecting\" {\n                if-feature \"configured\";\n                value 3;\n                description\n                  \"A subscription has been configured, but a\n                   'subscription-started' subscription state change\n                   notification needs to be successfully received\n                   before notification messages are sent.\n\n                   If the 'reset' action is invoked for a receiver of\n                   an active configured subscription, the state\n                   must be moved to 'connecting'.\";\n              }\n              enum \"disconnected\" {\n                if-feature \"configured\";\n                value 4;\n                description\n                  \"A subscription has failed to send a\n                   'subscription-started' state change to the\n                   receiver.  Additional connection attempts are not\n                   currently being made.\";\n              }\n            }\n            config false;\n            mandatory true;\n            description\n              \"Specifies the state of a subscription from the\n               perspective of a particular receiver.  With this\n               information, it is possible to determine whether a\n               publisher is currently generating notification\n               messages intended for that receiver.\";\n          }\n          action reset {\n            if-feature \"configured\";\n            description\n              \"Allows the reset of this configured subscription's\n               receiver to the 'connecting' state.  This enables the\n               connection process to be reinitiated.\";\n\n            output {\n              leaf time {\n                type yang:date-and-time;\n                mandatory true;\n                description\n                  \"Time at which a publisher returned the receiver to\n                   the 'connecting' state.\";\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  rpc establish-subscription {\n    description\n      \"This RPC allows a subscriber to create (and possibly\n       negotiate) a subscription on its own behalf.  If successful,\n       the subscription remains in effect for the duration of the\n       subscriber's association with the publisher or until the\n       subscription is terminated.  If an error occurs or the\n       publisher cannot meet the terms of a subscription, an RPC\n       error is returned, and the subscription is not created.\n       In that case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings that would have a higher\n       likelihood of succeeding in a subsequent\n       'establish-subscription' request.\";\n\n    input {\n      uses subscription-policy-dynamic;\n      leaf encoding {\n        type encoding;\n        description\n          \"The type of encoding for the subscribed data.  If not\n           included as part of the RPC, the encoding MUST be set by\n           the publisher to be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision {\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"If a replay has been requested, this object represents\n           the earliest time covered by the event buffer for the\n           requested event stream.  The value of this object is the\n           'replay-log-aged-time' if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.  All buffered event\n           records after this time will be replayed to a receiver.\n           This object will only be sent if the starting time has\n           been revised to be later than the time requested by the\n           subscriber.\";\n      }\n    }\n  }\n  rpc modify-subscription {\n    description\n      \"This RPC allows a subscriber to modify a dynamic\n       subscription's parameters.  If successful, the changed\n       subscription parameters remain in effect for the duration of\n       the subscription, until the subscription is again modified, or\n       until the subscription is terminated.  In the case of an error\n       or an inability to meet the modified parameters, the\n       subscription is not modified and the original subscription\n       parameters remain in effect.  In that case, the RPC error MAY\n       include 'error-info' suggested parameter hints that would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription' request.  A successful\n       'modify-subscription' will return a suspended subscription to\n       the 'active' state.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier to use for this subscription.\";\n      }\n      uses subscription-policy-modifiable;\n    }\n  }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber to delete a subscription that\n       was previously created by that same subscriber using the\n       'establish-subscription' RPC.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' from the same origin as this RPC\n           can be deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n    nacm:default-deny-all;\n    description\n      \"This RPC allows an operator to delete a dynamic subscription\n       without restrictions on the originating subscriber or\n       underlying transport session.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n  }\n\n  notification replay-completed {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n    description\n      \"This notification is sent to indicate that all of the replay\n       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification is sent to indicate that a subscription has\n       finished passing event records, as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the gracefully completed subscription.\";\n    }\n  }\n  notification subscription-modified {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       modified.  Notification messages sent from this point on will\n       conform to the modified terms of the subscription.  For\n       completeness, this subscription state change notification\n       includes both modified and unmodified aspects of a\n       subscription.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification subscription-resumed {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription that had\n       previously been suspended has resumed.  Notifications will\n       once again be sent.  In addition, a 'subscription-resumed'\n       indicates that no modification of parameters has occurred\n       since the last time event records have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification indicates that a subscription has started\n       and notifications will now be sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/replay-start-time\" {\n        description\n          \"Indicates the time that a replay is using for the\n           streaming of buffered event records.  This will be\n           populated with the most recent of the following:\n           the event time of the previous event record sent to a\n           receiver, the 'replay-log-creation-time', the\n           'replay-log-aged-time', or the most recent publisher\n           boot time.\";\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n      augment \"target/stream\" {\n        description\n          \"This augmentation adds additional parameters specific to a\n           'subscription-started' notification.\";\n        leaf replay-previous-event-time {\n          when \"../replay-start-time\";\n          if-feature \"replay\";\n          type yang:date-and-time;\n          description\n            \"If there is at least one event in the replay buffer\n             prior to 'replay-start-time', this gives the time of\n             the event generated immediately prior to the\n             'replay-start-time'.\n\n             If a receiver previously received event records for\n             this configured subscription, it can compare this time\n             to the last event record previously received.  If the\n             two are not the same (perhaps due to a reboot), then a\n             dynamic replay can be initiated to acquire any missing\n             event records.\";\n        }\n      }\n    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a suspension of the\n       subscription by the publisher has occurred.  No further\n       notifications will be sent until the subscription resumes.\n       This notification shall only be sent to receivers of a\n       subscription; it does not constitute a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-suspended-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the suspension.\";\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-terminated-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the termination.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-inet-types",
                  "subject": "ietf-inet-types-subject",
                  "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-interfaces",
                  "subject": "ietf-interfaces-subject",
                  "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "arbitrary-names",
                      "pre-provisioning",
                      "if-mib"
                    ]
                  }
                },
                {
                  "name": "ietf-netconf-acm",
                  "subject": "ietf-netconf-acm-subject",
                  "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-network-instance",
                  "subject": "ietf-network-instance-subject",
                  "schema": "module ietf-network-instance {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-network-instance\";\n  prefix ni;\n\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-ip {\n    prefix ip;\n    reference\n      \"RFC 8344: A YANG Data Model for IP Management\";\n  }\n  import ietf-yang-schema-mount {\n    prefix yangmnt;\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  organization\n    \"IETF Routing Area (rtgwg) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/rtgwg&gt;\n     WG List:  &lt;mailto:rtgwg@ietf.org&gt;\n\n     Author:   Lou Berger\n               &lt;mailto:lberger@labn.net&gt;\n     Author:   Christian Hopps\n               &lt;mailto:chopps@chopps.org&gt;\n     Author:   Acee Lindem\n               &lt;mailto:acee@cisco.com&gt;\n     Author:   Dean Bogdanovic\n               &lt;mailto:ivandean@gmail.com&gt;\";\n  description\n    \"This module is used to support multiple network instances\n     within a single physical or virtual device.  Network\n     instances are commonly known as VRFs (VPN Routing and\n     Forwarding) and VSIs (Virtual Switching Instances).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all capitals,\n      as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8529; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-21 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8529\";\n  }\n\n  container network-instances {\n    description\n      \"Network instances, each of which consists of\n       VRFs and/or VSIs.\";\n    reference\n      \"RFC 8349: A YANG Data Model for Routing Management\";\n    list network-instance {\n      key \"name\";\n      description\n        \"List of network instances.\";\n      leaf name {\n        type string;\n        mandatory true;\n        description\n          \"device-scoped identifier for the network\n           instance.\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Flag indicating whether or not the network\n           instance is enabled.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"Description of the network instance\n           and its intended purpose.\";\n      }\n      choice ni-type {\n        description\n          \"This node serves as an anchor point for different types\n           of network instances.  Each 'case' is expected to\n           differ in terms of the information needed in the\n           parent/core to support the NI and may differ in their\n           mounted-schema definition.  When the mounted schema is\n           not expected to be the same for a specific type of NI,\n           a mount point should be defined.\";\n      }\n      choice root-type {\n        mandatory true;\n        description\n          \"Well-known mount points.\";\n        container vrf-root {\n          yangmnt:mount-point \"vrf-root\" {\n            description\n              \"Root for L3VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vsi-root {\n          yangmnt:mount-point \"vsi-root\" {\n            description\n              \"Root for L2VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vv-root {\n          yangmnt:mount-point \"vv-root\" {\n            description\n              \"Root models that support both L2VPN-type bridging\n               and L3VPN-type routing.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n      }\n    }\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on a interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which an interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv4\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv4 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv4 interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv6\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv6 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv6 interface is bound.\";\n    }\n  }\n\n  notification bind-ni-name-failed {\n    description\n      \"Indicates an error in the association of an interface to an\n       NI.  Only generated after success is initially returned when\n       bind-ni-name is set.\n\n       Note: Some errors may need to be reported for multiple\n       associations, e.g., a single error may need to be reported\n       for an IPv4 and an IPv6 bind-ni-name.\n\n       At least one container with a bind-ni-name leaf MUST be\n       included in this notification.\";\n    leaf name {\n      type leafref {\n        path \"/if:interfaces/if:interface/if:name\";\n      }\n      mandatory true;\n      description\n        \"Contains the interface name associated with the\n         failure.\";\n    }\n    container interface {\n      description\n        \"Generic interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv4 {\n      description\n        \"IPv4 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv6 {\n      description\n        \"IPv6 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv6/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    leaf error-info {\n      type string;\n      description\n        \"Optionally, indicates the source of the assignment\n         failure.\";\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-interfaces",
                      "subject": "ietf-interfaces-subject",
                      "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "arbitrary-names",
                          "pre-provisioning",
                          "if-mib"
                        ]
                      }
                    },
                    {
                      "name": "ietf-ip",
                      "subject": "ietf-ip-subject",
                      "schema": "module ietf-ip {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n  prefix ip;\n\n  import ietf-interfaces {\n    prefix if;\n  }\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   &lt;http://tools.ietf.org/wg/netmod/&gt;\n     WG List:  &lt;mailto:netmod@ietf.org&gt;\n\n     WG Chair: Thomas Nadeau\n               &lt;mailto:tnadeau@lucidvision.com&gt;\n\n     WG Chair: Juergen Schoenwaelder\n               &lt;mailto:j.schoenwaelder@jacobs-university.de&gt;\n\n     Editor:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"This module contains a collection of YANG definitions for\n     configuring IP implementations.\n\n     Copyright (c) 2014 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 7277; see\n     the RFC itself for full legal notices.\";\n\n  revision 2014-06-16 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7277: A YANG Data Model for IP Management\";\n  }\n\n  feature ipv4-non-contiguous-netmasks {\n    description\n      \"Indicates support for configuring non-contiguous\n       subnet masks.\";\n  }\n\n  feature ipv6-privacy-autoconf {\n    description\n      \"Indicates support for Privacy Extensions for Stateless Address\n       Autoconfiguration in IPv6.\";\n    reference\n      \"RFC 4941: Privacy Extensions for Stateless Address\n                 Autoconfiguration in IPv6\";\n  }\n\n  typedef ip-address-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the address has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dhcp\" {\n        description\n          \"Indicates an address that has been assigned to this\n           system by a DHCP server.\";\n      }\n      enum \"link-layer\" {\n        description\n          \"Indicates an address created by IPv6 stateless\n           autoconfiguration that embeds a link-layer address in its\n           interface identifier.\";\n      }\n      enum \"random\" {\n        description\n          \"Indicates an address chosen by the system at\n\n           random, e.g., an IPv4 address within 169.254/16, an\n           RFC 4941 temporary address, or an RFC 7217 semantically\n           opaque address.\";\n        reference\n          \"RFC 4941: Privacy Extensions for Stateless Address\n                     Autoconfiguration in IPv6\n           RFC 7217: A Method for Generating Semantically Opaque\n                     Interface Identifiers with IPv6 Stateless\n                     Address Autoconfiguration (SLAAC)\";\n      }\n    }\n    description\n      \"The origin of an address.\";\n  }\n\n  typedef neighbor-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the mapping has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dynamic\" {\n        description\n          \"Indicates that the mapping has been dynamically resolved\n           using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery\n           protocol.\";\n      }\n    }\n    description\n      \"The origin of a neighbor entry.\";\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Parameters for configuring IP on interfaces.\n\n       If an interface is not capable of running IP, the server\n       must not allow the client to configure these parameters.\";\n    container ipv4 {\n      presence \"Enables IPv4 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv4 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv4 is enabled or disabled on this\n           interface.  When IPv4 is enabled, this interface is\n           connected to an IPv4 stack, and the interface can send\n           and receive IPv4 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv4 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv4 routers\n           forward datagrams.  IPv4 hosts do not (except those\n           source-routed via the host).\";\n      }\n      leaf mtu {\n        type uint16;\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          mandatory true;\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Enables IPv6 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv6 is enabled or disabled on this\n           interface.  When IPv6 is enabled, this interface is\n           connected to an IPv6 stack, and the interface can send\n           and receive IPv6 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv6 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv6 routers\n           forward datagrams.  IPv6 hosts do not (except those\n           source-routed via the host).\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n      leaf dup-addr-detect-transmits {\n        type uint32;\n        default \"1\";\n        description\n          \"The number of consecutive Neighbor Solicitation messages\n           sent while performing Duplicate Address Detection on a\n           tentative address.  A value of zero indicates that\n           Duplicate Address Detection is not performed on\n           tentative addresses.  A value of one indicates a single\n           transmission with no follow-up retransmissions.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      }\n      container autoconf {\n        description\n          \"Parameters to control the autoconfiguration of IPv6\n           addresses, as described in RFC 4862.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        leaf create-global-addresses {\n          type boolean;\n          default \"true\";\n          description\n            \"If enabled, the host creates global addresses as\n             described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\n                       Section 5.5\";\n        }\n        leaf create-temporary-addresses {\n          if-feature \"ipv6-privacy-autoconf\";\n          type boolean;\n          default \"false\";\n          description\n            \"If enabled, the host creates temporary addresses as\n             described in RFC 4941.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\";\n        }\n        leaf temporary-valid-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"604800\";\n          description\n            \"The time period during which the temporary address\n             is valid.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_VALID_LIFETIME\";\n        }\n        leaf temporary-preferred-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"86400\";\n          description\n            \"The time period during which the temporary address is\n             preferred.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_PREFERRED_LIFETIME\";\n        }\n      }\n    }\n  }\n  augment \"/if:interfaces-state/if:interface\" {\n    description\n      \"Data nodes for the operational state of IP on interfaces.\";\n    container ipv4 {\n      presence \"Present if IPv4 is enabled on this interface\";\n      config false;\n      description\n        \"Interface-specific parameters for the IPv4 address family.\";\n      leaf forwarding {\n        type boolean;\n        description\n          \"Indicates whether IPv4 packet forwarding is enabled or\n           disabled on this interface.\";\n      }\n      leaf mtu {\n        type uint16 {\n          range \"68..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           This list represents the ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Present if IPv6 is enabled on this interface\";\n      config false;\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Indicates whether IPv6 packet forwarding is enabled or\n           disabled on this interface.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n        leaf status {\n          type enumeration {\n            enum \"preferred\" {\n              description\n                \"This is a valid address that can appear as the\n                 destination or source address of a packet.\";\n            }\n            enum \"deprecated\" {\n              description\n                \"This is a valid but deprecated address that should\n                 no longer be used as a source address in new\n                 communications, but packets addressed to such an\n                 address are processed as expected.\";\n            }\n            enum \"invalid\" {\n              description\n                \"This isn't a valid address, and it shouldn't appear\n                 as the destination or source address of a packet.\";\n            }\n            enum \"inaccessible\" {\n              description\n                \"The address is not accessible because the interface\n                 to which this address is assigned is not\n                 operational.\";\n            }\n            enum \"unknown\" {\n              description\n                \"The status cannot be determined for some reason.\";\n            }\n            enum \"tentative\" {\n              description\n                \"The uniqueness of the address on the link is being\n                 verified.  Addresses in this state should not be\n                 used for general communication and should only be\n                 used to determine the uniqueness of the address.\";\n            }\n            enum \"duplicate\" {\n              description\n                \"The address has been determined to be non-unique on\n                 the link and so must not be used.\";\n            }\n            enum \"optimistic\" {\n              description\n                \"The address is available for use, subject to\n                 restrictions, while its uniqueness on a link is\n                 being verified.\";\n            }\n          }\n          description\n            \"The status of an address.  Most of the states correspond\n             to states from the IPv6 Stateless Address\n             Autoconfiguration protocol.\";\n          reference\n            \"RFC 4293: Management Information Base for the\n                       Internet Protocol (IP)\n                       - IpAddressStatusTC\n             RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           This list represents the Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n        leaf is-router {\n          type empty;\n          description\n            \"Indicates that the neighbor node acts as a router.\";\n        }\n        leaf state {\n          type enumeration {\n            enum \"incomplete\" {\n              description\n                \"Address resolution is in progress, and the link-layer\n                 address of the neighbor has not yet been\n                 determined.\";\n            }\n            enum \"reachable\" {\n              description\n                \"Roughly speaking, the neighbor is known to have been\n                 reachable recently (within tens of seconds ago).\";\n            }\n            enum \"stale\" {\n              description\n                \"The neighbor is no longer known to be reachable, but\n                 until traffic is sent to the neighbor no attempt\n                 should be made to verify its reachability.\";\n            }\n            enum \"delay\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 traffic has recently been sent to the neighbor.\n                 Rather than probe the neighbor immediately, however,\n                 delay sending probes for a short while in order to\n                 give upper-layer protocols a chance to provide\n                 reachability confirmation.\";\n            }\n            enum \"probe\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 unicast Neighbor Solicitation probes are being sent\n                 to verify reachability.\";\n            }\n          }\n          description\n            \"The Neighbor Unreachability Detection state of this\n             entry.\";\n          reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                       Section 7.3.2\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-interfaces",
                          "subject": "ietf-interfaces-subject",
                          "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                          "references": [
                            {
                              "name": "ietf-yang-types",
                              "subject": "ietf-yang-types-subject",
                              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                              "references": [],
                              "properties": null,
                              "tags": null
                            }
                          ],
                          "properties": null,
                          "tags": {
                            "features": [
                              "arbitrary-names",
                              "pre-provisioning",
                              "if-mib"
                            ]
                          }
                        },
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "ipv4-non-contiguous-netmasks",
                          "ipv6-privacy-autoconf"
                        ]
                      }
                    },
                    {
                      "name": "ietf-yang-schema-mount",
                      "subject": "ietf-yang-schema-mount-subject",
                      "schema": "module ietf-yang-schema-mount {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n  prefix yangmnt;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Editor:   Ladislav Lhotka\n               <mailto:lhotka@nic.cz>\";\n  description\n    \"This module defines a YANG extension statement that can be used\n     to incorporate data models defined in other YANG modules in a\n     module.  It also defines operational state data that specify the\n     overall structure of the data model.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8528;\n     see the RFC itself for full legal notices.\";\n\n  revision 2019-01-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  extension mount-point {\n    argument label;\n    description\n      \"The argument 'label' is a YANG identifier, i.e., it is of the\n       type 'yang:yang-identifier'.\n\n       The 'mount-point' statement MUST NOT be used in a YANG\n       version 1 module, neither explicitly nor via a 'uses'\n       statement.\n       The 'mount-point' statement MAY be present as a substatement\n       of 'container' and 'list' and MUST NOT be present elsewhere.\n       There MUST NOT be more than one 'mount-point' statement in a\n       given 'container' or 'list' statement.\n\n       If a mount point is defined within a grouping, its label is\n       bound to the module where the grouping is used.\n\n       A mount point defines a place in the node hierarchy where\n       other data models may be attached.  A server that implements a\n       module with a mount point populates the\n       '/schema-mounts/mount-point' list with detailed information on\n       which data models are mounted at each mount point.\n\n       Note that the 'mount-point' statement does not define a new\n       data node.\";\n  }\n\n  container schema-mounts {\n    config false;\n    description\n      \"Contains information about the structure of the overall\n       mounted data model implemented in the server.\";\n    list namespace {\n      key \"prefix\";\n      description\n        \"This list provides a mapping of namespace prefixes that are\n         used in XPath expressions of 'parent-reference' leafs to the\n         corresponding namespace URI references.\";\n      leaf prefix {\n        type yang:yang-identifier;\n        description\n          \"Namespace prefix.\";\n      }\n      leaf uri {\n        type inet:uri;\n        description\n          \"Namespace URI reference.\";\n      }\n    }\n    list mount-point {\n      key \"module label\";\n      description\n        \"Each entry of this list specifies a schema for a particular\n         mount point.\n\n         Each mount point MUST be defined using the 'mount-point'\n         extension in one of the modules listed in the server's\n         YANG library instance with conformance type 'implement'.\";\n      leaf module {\n        type yang:yang-identifier;\n        description\n          \"Name of a module containing the mount point.\";\n      }\n      leaf label {\n        type yang:yang-identifier;\n        description\n          \"Label of the mount point defined using the 'mount-point'\n           extension.\";\n      }\n      leaf config {\n        type boolean;\n        default \"true\";\n        description\n          \"If this leaf is set to 'false', then all data nodes in the\n           mounted schema are read-only ('config false'), regardless\n           of their 'config' property.\";\n      }\n      choice schema-ref {\n        mandatory true;\n        description\n          \"Alternatives for specifying the schema.\";\n        container inline {\n          presence \"A complete self-contained schema is mounted at the\n           mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.\n\n             Different instances of the mount point may have\n             different schemas mounted.\";\n        }\n        container shared-schema {\n          presence \"The mounted schema together with the 'parent-reference'\n           make up the schema for this mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.  When XPath expressions in the mounted\n             schema are evaluated, the 'parent-reference' leaf-list\n             is taken into account.\n\n             Different instances of the mount point MUST have the\n             same schema mounted.\";\n          leaf-list parent-reference {\n            type yang:xpath1.0;\n            description\n              \"Entries of this leaf-list are XPath 1.0 expressions\n               that are evaluated in the following context:\n\n               - The context node is the node in the parent data tree\n                 where the mount-point is defined.\n\n               - The accessible tree is the parent data tree\n                 *without* any nodes defined in modules that are\n                 mounted inside the parent schema.\n\n               - The context position and context size are both equal\n                 to 1.\n\n               - The set of variable bindings is empty.\n\n               - The function library is the core function library\n                 defined in the W3C XPath 1.0 document\n                 (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                 the functions defined in Section 10 of RFC 7950.\n\n               - The set of namespace declarations is defined by the\n                 'namespace' list under 'schema-mounts'.\n\n               Each XPath expression MUST evaluate to a node-set\n               (possibly empty).  For the purposes of evaluating\n               XPath expressions whose context nodes are defined in\n               the mounted schema, the union of all these node-sets\n               together with ancestor nodes are added to the\n               accessible data tree.\n\n               Note that in the case 'ietf-yang-schema-mount' is\n               itself mounted, a 'parent-reference' in the mounted\n               module may refer to nodes that were brought into the\n               accessible tree through a 'parent-reference' in the\n               parent schema.\";\n          }\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": {
                "features": [
                  "configured",
                  "dscp",
                  "encode-json",
                  "encode-xml",
                  "interface-designation",
                  "qos",
                  "replay",
                  "subtree",
                  "supports-vrf",
                  "xpath"
                ]
              }
            },
            {
              "name": "ietf-datastores",
              "subject": "ietf-datastores-subject",
              "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-patch",
              "subject": "ietf-yang-patch-subject",
              "schema": "module ietf-yang-patch {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-patch\";\n  prefix ypatch;\n\n  import ietf-restconf {\n    prefix rc;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\";\n  description\n    \"This module contains conceptual YANG specifications\n     for the YANG Patch and YANG Patch Status data structures.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The YANG grouping statements provide a normative syntax\n     for XML and JSON message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8072; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-02-22 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type.\";\n  }\n\n  rc:yang-data \"yang-patch\" {\n    uses yang-patch;\n  }\n  rc:yang-data \"yang-patch-status\" {\n    uses yang-patch-status;\n  }\n\n  typedef target-resource-offset {\n    type string;\n    description\n      \"Contains a data resource identifier string representing\n       a sub-resource within the target resource.\n       The document root for this expression is the\n       target resource that is specified in the\n       protocol operation (e.g., the URI for the PATCH request).\n\n       This string is encoded according to the same rules as those\n       for a data resource identifier in a RESTCONF request URI.\";\n    reference\n      \"RFC 8040, Section 3.5.3.\";\n  }\n\n  grouping yang-patch {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch edit request message.\";\n    container yang-patch {\n      description\n        \"Represents a conceptual sequence of datastore edits,\n         called a patch.  Each patch is given a client-assigned\n         patch identifier.  Each edit MUST be applied\n         in ascending order, and all edits MUST be applied.\n         If any errors occur, then the target datastore MUST NOT\n         be changed by the YANG Patch operation.\n\n         It is possible for a datastore constraint violation to occur\n         due to any node in the datastore, including nodes not\n         included in the 'edit' list.  Any validation errors MUST\n         be reported in the reply message.\";\n      reference\n        \"RFC 7950, Section 8.3.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"An arbitrary string provided by the client to identify\n           the entire patch.  Error messages returned by the server\n           that pertain to this patch will be identified by this\n           'patch-id' value.  A client SHOULD attempt to generate\n           unique 'patch-id' values to distinguish between\n           transactions from multiple clients in any audit logs\n           maintained by the server.\";\n      }\n      leaf comment {\n        type string;\n        description\n          \"An arbitrary string provided by the client to describe\n           the entire patch.  This value SHOULD be present in any\n           audit logging records generated by the server for the\n           patch.\";\n      }\n      list edit {\n        key \"edit-id\";\n        ordered-by user;\n        description\n          \"Represents one edit within the YANG Patch request message.\n           The 'edit' list is applied in the following manner:\n\n             - The first edit is conceptually applied to a copy\n               of the existing target datastore, e.g., the\n               running configuration datastore.\n             - Each ascending edit is conceptually applied to\n               the result of the previous edit(s).\n             - After all edits have been successfully processed,\n               the result is validated according to YANG constraints.\n             - If successful, the server will attempt to apply\n               the result to the target datastore.\";\n        leaf edit-id {\n          type string;\n          description\n            \"Arbitrary string index for the edit.\n             Error messages returned by the server that pertain\n             to a specific edit will be identified by this value.\";\n        }\n        leaf operation {\n          type enumeration {\n            enum \"create\" {\n              description\n                \"The target data node is created using the supplied\n                 value, only if it does not already exist.  The\n                 'target' leaf identifies the data node to be\n                 created, not the parent data node.\";\n            }\n            enum \"delete\" {\n              description\n                \"Delete the target node, only if the data resource\n                 currently exists; otherwise, return an error.\";\n            }\n            enum \"insert\" {\n              description\n                \"Insert the supplied value into a user-ordered\n                 list or leaf-list entry.  The target node must\n                 represent a new data resource.  If the 'where'\n                 parameter is set to 'before' or 'after', then\n                 the 'point' parameter identifies the insertion\n                 point for the target node.\";\n            }\n            enum \"merge\" {\n              description\n                \"The supplied value is merged with the target data\n                 node.\";\n            }\n            enum \"move\" {\n              description\n                \"Move the target node.  Reorder a user-ordered\n                 list or leaf-list.  The target node must represent\n                 an existing data resource.  If the 'where' parameter\n                 is set to 'before' or 'after', then the 'point'\n                 parameter identifies the insertion point to move\n                 the target node.\";\n            }\n            enum \"replace\" {\n              description\n                \"The supplied value is used to replace the target\n                 data node.\";\n            }\n            enum \"remove\" {\n              description\n                \"Delete the target node if it currently exists.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The datastore operation requested for the associated\n             'edit' entry.\";\n        }\n        leaf target {\n          type target-resource-offset;\n          mandatory true;\n          description\n            \"Identifies the target data node for the edit\n             operation.  If the target has the value '/', then\n             the target data node is the target resource.\n             The target node MUST identify a data resource,\n             not the datastore resource.\";\n        }\n        leaf point {\n          when \"(../operation = 'insert' or ../operation = 'move')and (../where = 'before' or ../where = 'after')\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations, before or after an existing entry.\";\n          }\n          type target-resource-offset;\n          description\n            \"The absolute URL path for the data node that is being\n             used as the insertion point or move point for the\n             target of this 'edit' entry.\";\n        }\n        leaf where {\n          when \"../operation = 'insert' or ../operation = 'move'\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations.\";\n          }\n          type enumeration {\n            enum \"before\" {\n              description\n                \"Insert or move a data node before the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"after\" {\n              description\n                \"Insert or move a data node after the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"first\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the first entry.\";\n            }\n            enum \"last\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the last entry.\";\n            }\n          }\n          default \"last\";\n          description\n            \"Identifies where a data resource will be inserted\n             or moved.  YANG only allows these operations for\n             list and leaf-list data nodes that are\n             'ordered-by user'.\";\n        }\n        anydata value {\n          when \"../operation = 'create' or ../operation = 'merge' or ../operation = 'replace' or ../operation = 'insert'\" {\n            description\n              \"The anydata 'value' is only used for 'create',\n               'merge', 'replace', and 'insert' operations.\";\n          }\n          description\n            \"Value used for this edit operation.  The anydata 'value'\n             contains the target resource associated with the\n             'target' leaf.\n\n             For example, suppose the target node is a YANG container\n             named foo:\n\n                 container foo {\n                   leaf a { type string; }\n                   leaf b { type int32; }\n                 }\n\n             The 'value' node contains one instance of foo:\n\n                 <value>\n                    <foo xmlns='example-foo-namespace'>\n                       <a>some value</a>\n                       <b>42</b>\n                    </foo>\n                 </value>\n              \";\n        }\n      }\n    }\n  }\n\n  grouping yang-patch-status {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch Status response\n       message.\";\n    container yang-patch-status {\n      description\n        \"A container representing the response message sent by the\n         server after a YANG Patch edit request message has been\n         processed.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"The 'patch-id' value used in the request.\";\n      }\n      choice global-status {\n        description\n          \"Report global errors or complete success.\n           If there is no case selected, then errors\n           are reported in the 'edit-status' container.\";\n        case global-errors {\n          description\n            \"This container will be present if global errors that\n             are unrelated to a specific edit occurred.\";\n          uses rc:errors;\n        }\n        leaf ok {\n          type empty;\n          description\n            \"This leaf will be present if the request succeeded\n             and there are no errors reported in the 'edit-status'\n             container.\";\n        }\n      }\n      container edit-status {\n        description\n          \"This container will be present if there are\n           edit-specific status responses to report.\n           If all edits succeeded and the 'global-status'\n           returned is 'ok', then a server MAY omit this\n           container.\";\n        list edit {\n          key \"edit-id\";\n          description\n            \"Represents a list of status responses,\n             corresponding to edits in the YANG Patch\n             request message.  If an 'edit' entry was\n             skipped or not reached by the server,\n             then this list will not contain a corresponding\n             entry for that edit.\";\n          leaf edit-id {\n            type string;\n            description\n              \"Response status is for the 'edit' list entry\n               with this 'edit-id' value.\";\n          }\n          choice edit-status-choice {\n            description\n              \"A choice between different types of status\n               responses for each 'edit' entry.\";\n            leaf ok {\n              type empty;\n              description\n                \"This 'edit' entry was invoked without any\n                 errors detected by the server associated\n                 with this edit.\";\n            }\n            case errors {\n              description\n                \"The server detected errors associated with the\n                 edit identified by the same 'edit-id' value.\";\n              uses rc:errors;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": {
            "features": [
              "on-change"
            ]
          }
        }
      ],
      "properties": null,
      "tags": null
    },
    {
      "name": "ietf-system-capabilities",
      "subject": "ietf-system-capabilities-subject",
      "schema": "module ietf-system-capabilities {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-system-capabilities\";\n  prefix sysc;\n\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-yang-library {\n    prefix yanglib;\n    description\n      \"This module requires ietf-yang-library to be implemented.\n       Revision 2019-01-04 or a revision derived from it\n       is REQUIRED.\";\n    reference\n      \"RFC8525: YANG Library\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Editor:   Balazs Lengyel\n               <mailto:balazs.lengyel@ericsson.com>\";\n  description\n    \"This module specifies a structure to specify system\n     capabilities for a server or a publisher.  System capabilities\n     may include capabilities of a NETCONF or RESTCONF server or a\n     notification publisher.\n\n     This module does not contain any specific capabilities; it only\n     provides a structure where containers containing the actual\n     capabilities are augmented in.\n\n     Capability values can be specified at the system level, at the\n     datastore level (by selecting all nodes in the datastore), or\n     for specific data nodes of a specific datastore (and their\n     contained subtrees).\n     Capability values specified for a specific datastore or\n     node-set override values specified on the system/publisher\n     level.\n\n     The same grouping MUST be used to define hierarchical\n     capabilities supported both at the system level and at the\n     datastore/data-node level.\n\n     To find a capability value for a specific data node in a\n     specific datastore, the user SHALL:\n\n     1) search for a datastore-capabilities list entry for\n     the specific datastore.  When stating a specific capability, the\n     relative path for any specific capability must be the same\n     under the system-capabilities container and under the\n     per-node-capabilities list.\n\n     2) If the datastore entry is found within that entry, process\n     all per-node-capabilities entries in the order they appear in\n     the list.  The first entry that specifies the specific\n     capability and has a node-selector selecting the specific data\n     node defines the capability value.\n\n     3) If the capability value is not found above and the specific\n     capability is specified under the system-capabilities container\n     (outside the datastore-capabilities list), this value shall be\n     used.\n\n     4) If no values are found in the previous steps, the\n     system/publisher is not capable of providing a value.  Possible\n     reasons are that it is unknown, the capability is changing for\n     some reason, there is no specified limit, etc.  In this case,\n     the system's behavior is unspecified.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all\n     capitals, as shown here.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Revised BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 9196\n     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself\n     for full legal notices.\";\n\n  revision 2022-02-17 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  container system-capabilities {\n    config false;\n    description\n      \"System capabilities.\n       Capability values specified here at the system level\n       are valid for all datastores and are used when the\n       capability is not specified at the datastore level\n       or for specific data nodes.\";\n    list datastore-capabilities {\n      key \"datastore\";\n      description\n        \"Capabilities values per datastore.\n\n         For non-NMDA servers/publishers, 'config false' data is\n         considered as if it were part of the running datastore.\";\n      leaf datastore {\n        type leafref {\n          path \"/yanglib:yang-library/yanglib:datastore/yanglib:name\";\n        }\n        description\n          \"The datastore for which capabilities are defined.\n           Only one specific datastore can be specified,\n           e.g., ds:conventional must not be used, as it\n           represents a set of configuration datastores.\";\n      }\n      list per-node-capabilities {\n        description\n          \"Each list entry specifies capabilities for the selected\n           data nodes.  The same capabilities apply to the data nodes\n           in the subtree below the selected nodes.\n\n           The system SHALL order the entries according to their\n           precedence. The order of the entries MUST NOT change\n           unless the underlying capabilities also change.\n\n           Note that the longest patch matching can be achieved\n           by ordering more specific matches before less\n           specific ones.\";\n        choice node-selection {\n          description\n            \"A method to select some or all nodes within a\n             datastore.\";\n          leaf node-selector {\n            type nacm:node-instance-identifier;\n            description\n              \"Selects the data nodes for which capabilities are\n               specified. The special value '/' denotes all data\n               nodes in the datastore, consistent with the path\n               leaf node on page 41 of [RFC8341].\";\n            reference\n              \"RFC 8341: Network Configuration Access Control Model\";\n          }\n        }\n      }\n    }\n  }\n}\n",
      "references": [
        {
          "name": "ietf-netconf-acm",
          "subject": "ietf-netconf-acm-subject",
          "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        },
        {
          "name": "ietf-yang-library",
          "subject": "ietf-yang-library-subject",
          "schema": "module ietf-yang-library {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-library\";\n  prefix yanglib;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture\n                 (NMDA)\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Kent Watsen\n               <mailto:kent+ietf@watsen.net>\n\n     Author:   Robert Wilton\n               <mailto:rwilton@cisco.com>\";\n  description\n    \"This module provides information about the YANG modules,\n     datastores, and datastore schemas used by a network\n     management server.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8525; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-04 {\n    description\n      \"Added support for multiple datastores according to the\n       Network Management Datastore Architecture (NMDA).\";\n    reference\n      \"RFC 8525: YANG Library\";\n  }\n  revision 2016-04-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7895: YANG Module Library\";\n  }\n\n  typedef revision-identifier {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}';\n    }\n    description\n      \"Represents a specific date in YYYY-MM-DD format.\";\n  }\n\n  grouping module-identification-leafs {\n    description\n      \"Parameters for identifying YANG modules and submodules.\";\n    leaf name {\n      type yang:yang-identifier;\n      mandatory true;\n      description\n        \"The YANG module or submodule name.\";\n    }\n    leaf revision {\n      type revision-identifier;\n      description\n        \"The YANG module or submodule revision date.  If no revision\n         statement is present in the YANG module or submodule, this\n         leaf is not instantiated.\";\n    }\n  }\n\n  grouping location-leaf-list {\n    description\n      \"Common leaf-list parameter for the locations of modules and\n       submodules.\";\n    leaf-list location {\n      type inet:uri;\n      description\n        \"Contains a URL that represents the YANG schema\n         resource for this module or submodule.\n\n         This leaf will only be present if there is a URL\n         available for retrieval of the schema for this entry.\";\n    }\n  }\n\n  grouping module-implementation-parameters {\n    description\n      \"Parameters for describing the implementation of a module.\";\n    leaf-list feature {\n      type yang:yang-identifier;\n      description\n        \"List of all YANG feature names from this module that are\n         supported by the server, regardless whether they are defined\n         in the module or any included submodule.\";\n    }\n    leaf-list deviation {\n      type leafref {\n        path \"../../module/name\";\n      }\n      description\n        \"List of all YANG deviation modules used by this server to\n         modify the conformance of the module associated with this\n         entry.  Note that the same module can be used for deviations\n         for multiple modules, so the same entry MAY appear within\n         multiple 'module' entries.\n\n         This reference MUST NOT (directly or indirectly)\n         refer to the module being deviated.\n\n         Robust clients may want to make sure that they handle a\n         situation where a module deviates itself (directly or\n         indirectly) gracefully.\";\n    }\n  }\n\n  grouping module-set-parameters {\n    description\n      \"A set of parameters that describe a module set.\";\n    leaf name {\n      type string;\n      description\n        \"An arbitrary name of the module set.\";\n    }\n    list module {\n      key \"name\";\n      description\n        \"An entry in this list represents a module implemented by the\n         server, as per Section 5.6.5 of RFC 7950, with a particular\n         set of supported features and deviations.\";\n      reference\n        \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n      uses module-identification-leafs;\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n      uses module-implementation-parameters;\n    }\n    list import-only-module {\n      key \"name revision\";\n      description\n        \"An entry in this list indicates that the server imports\n         reusable definitions from the specified revision of the\n         module but does not implement any protocol-accessible\n         objects from this revision.\n\n         Multiple entries for the same module name MAY exist.  This\n         can occur if multiple modules import the same module but\n         specify different revision dates in the import statements.\";\n      leaf name {\n        type yang:yang-identifier;\n        description\n          \"The YANG module name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        description\n          \"The YANG module revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module.\";\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n    }\n  }\n\n  grouping yang-library-parameters {\n    description\n      \"The YANG library data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    list module-set {\n      key \"name\";\n      description\n        \"A set of modules that may be used by one or more schemas.\n\n         A module set does not have to be referentially complete,\n         i.e., it may define modules that contain import statements\n         for other modules not included in the module set.\";\n      uses module-set-parameters;\n    }\n    list schema {\n      key \"name\";\n      description\n        \"A datastore schema that may be used by one or more\n         datastores.\n\n         The schema must be valid and referentially complete, i.e.,\n         it must contain modules to satisfy all used import\n         statements for all modules specified in the schema.\";\n      leaf name {\n        type string;\n        description\n          \"An arbitrary name of the schema.\";\n      }\n      leaf-list module-set {\n        type leafref {\n          path \"../../module-set/name\";\n        }\n        description\n          \"A set of module-sets that are included in this schema.\n           If a non-import-only module appears in multiple module\n           sets, then the module revision and the associated features\n           and deviations must be identical.\";\n      }\n    }\n    list datastore {\n      key \"name\";\n      description\n        \"A datastore supported by this server.\n\n         Each datastore indicates which schema it supports.\n\n         The server MUST instantiate one entry in this list per\n         specific datastore it supports.\n         Each datastore entry with the same datastore schema SHOULD\n         reference the same schema.\";\n      leaf name {\n        type ds:datastore-ref;\n        description\n          \"The identity of the datastore.\";\n      }\n      leaf schema {\n        type leafref {\n          path \"../../schema/name\";\n        }\n        mandatory true;\n        description\n          \"A reference to the schema supported by this datastore.\n           All non-import-only modules of the schema are implemented\n           with their associated features and deviations.\";\n      }\n    }\n  }\n\n  grouping module-list {\n    status deprecated;\n    description\n      \"The module data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    grouping common-leafs {\n      status deprecated;\n      description\n        \"Common parameters for YANG modules and submodules.\";\n      leaf name {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"The YANG module or submodule name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        status deprecated;\n        description\n          \"The YANG module or submodule revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module or submodule.\";\n      }\n    }\n    grouping schema-leaf {\n      status deprecated;\n      description\n        \"Common schema leaf parameter for modules and submodules.\";\n      leaf schema {\n        type inet:uri;\n        description\n          \"Contains a URL that represents the YANG schema\n           resource for this module or submodule.\n\n           This leaf will only be present if there is a URL\n           available for retrieval of the schema for this entry.\";\n      }\n    }\n    list module {\n      key \"name revision\";\n      status deprecated;\n      description\n        \"Each entry represents one revision of one module\n         currently supported by the server.\";\n      uses common-leafs {\n        status deprecated;\n      }\n      uses schema-leaf {\n        status deprecated;\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        status deprecated;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      leaf-list feature {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"List of YANG feature names from this module that are\n           supported by the server, regardless of whether they are\n           defined in the module or any included submodule.\";\n      }\n      list deviation {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"List of YANG deviation module names and revisions\n           used by this server to modify the conformance of\n           the module associated with this entry.  Note that\n           the same module can be used for deviations for\n           multiple modules, so the same entry MAY appear\n           within multiple 'module' entries.\n\n           The deviation module MUST be present in the 'module'\n           list, with the same name and revision values.\n           The 'conformance-type' value will be 'implement' for\n           the deviation module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n      }\n      leaf conformance-type {\n        type enumeration {\n          enum \"implement\" {\n            description\n              \"Indicates that the server implements one or more\n               protocol-accessible objects defined in the YANG module\n               identified in this entry.  This includes deviation\n               statements defined in the module.\n\n               For YANG version 1.1 modules, there is at most one\n               'module' entry with conformance type 'implement' for a\n               particular module name, since YANG 1.1 requires that\n               at most one revision of a module is implemented.\n\n               For YANG version 1 modules, there SHOULD NOT be more\n               than one 'module' entry for a particular module\n               name.\";\n          }\n          enum \"import\" {\n            description\n              \"Indicates that the server imports reusable definitions\n               from the specified revision of the module but does\n               not implement any protocol-accessible objects from\n               this revision.\n\n               Multiple 'module' entries for the same module name MAY\n               exist.  This can occur if multiple modules import the\n               same module but specify different revision dates in\n               the import statements.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"Indicates the type of conformance the server is claiming\n           for the YANG module identified by this entry.\";\n      }\n      list submodule {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n        uses schema-leaf {\n          status deprecated;\n        }\n      }\n    }\n  }\n\n  container yang-library {\n    config false;\n    description\n      \"Container holding the entire YANG library of this server.\";\n    uses yang-library-parameters;\n    leaf content-id {\n      type string;\n      mandatory true;\n      description\n        \"A server-generated identifier of the contents of the\n         '/yang-library' tree.  The server MUST change the value of\n         this leaf if the information represented by the\n         '/yang-library' tree, except '/yang-library/content-id', has\n         changed.\";\n    }\n  }\n  container modules-state {\n    config false;\n    status deprecated;\n    description\n      \"Contains YANG module monitoring information.\";\n    leaf module-set-id {\n      type string;\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains a server-specific identifier representing\n         the current set of modules and submodules.  The\n         server MUST change the value of this leaf if the\n         information represented by the 'module' list instances\n         has changed.\";\n    }\n    uses module-list {\n      status deprecated;\n    }\n  }\n\n  notification yang-library-update {\n    description\n      \"Generated when any YANG library information on the\n       server has changed.\";\n    leaf content-id {\n      type leafref {\n        path \"/yanglib:yang-library/yanglib:content-id\";\n      }\n      mandatory true;\n      description\n        \"Contains the YANG library content identifier for the updated\n         YANG library at the time the notification is generated.\";\n    }\n  }\n  notification yang-library-change {\n    status deprecated;\n    description\n      \"Generated when the set of modules and submodules supported\n       by the server has changed.\";\n    leaf module-set-id {\n      type leafref {\n        path \"/yanglib:modules-state/yanglib:module-set-id\";\n      }\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains the module-set-id value representing the\n         set of modules and submodules supported at the server\n         at the time the notification is generated.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-inet-types",
              "subject": "ietf-inet-types-subject",
              "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-datastores",
              "subject": "ietf-datastores-subject",
              "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        }
      ],
      "properties": null,
      "tags": null
    },
    {
      "name": "ietf-notification-capabilities",
      "subject": "ietf-notification-capabilities-subject",
      "schema": "module ietf-notification-capabilities {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-notification-capabilities\";\n  prefix notc;\n\n  import ietf-yang-push {\n    prefix yp;\n    description\n      \"This module requires ietf-yang-push to be implemented.\";\n    reference\n      \"RFC 8641: Subscription to YANG Notifications for\n       Datastore Updates\";\n  }\n  import ietf-system-capabilities {\n    prefix sysc;\n    description\n      \"This module requires ietf-system-capabilities to be\n       implemented.\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Editor:   Balazs Lengyel\n               <mailto:balazs.lengyel@ericsson.com>\";\n  description\n    \"This module specifies publisher capabilities related to\n     YANG-Push (RFC 8641).\n\n     The module contains:\n\n     - a specification of the data nodes that support 'on-change' or\n     'periodic' notifications.\n\n     - capabilities related to the throughput of notification data\n     that the publisher can support.  (Note that for a specific\n     subscription, the publisher MAY allow only longer periods\n     or smaller updates depending on, e.g., actual load conditions.)\n\n     Capability values can be specified at the system/publisher\n     level, at the datastore level, or for specific data nodes of\n     a specific datastore (and their contained subtrees), as defined\n     in the ietf-system-capabilities module.\n\n     If different data nodes covered by a single subscription\n     have different values for a specific capability, then using\n     values that are only acceptable for some of these data nodes,\n     but not for others, may result in the rejection of the\n     subscription.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all\n     capitals, as shown here.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Revised BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 9196\n     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself\n     for full legal notices.\";\n\n  revision 2022-02-17 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  grouping subscription-capabilities {\n    description\n      \"Capabilities related to YANG-Push subscriptions\n       and notifications\";\n    container subscription-capabilities {\n      description\n        \"Capabilities related to YANG-Push subscriptions\n         and notifications\";\n      typedef notification-support {\n        type bits {\n          bit config-changes {\n            description\n              \"The publisher is capable of sending\n               notifications for 'config true' nodes for the\n               relevant scope and subscription type.\";\n          }\n          bit state-changes {\n            description\n              \"The publisher is capable of sending\n               notifications for 'config false' nodes for the\n               relevant scope and subscription type.\";\n          }\n        }\n        description\n          \"Type for defining whether 'on-change' or\n           'periodic' notifications are supported for all data nodes,\n           'config false' data nodes, 'config true' data nodes, or\n           no data nodes.\n\n           The bits config-changes or state-changes have no effect\n           when they are set for a datastore or for a set of nodes\n           that does not contain nodes with the indicated config\n           value.  In those cases, the effect is the same as if no\n           support was declared.  One example of this is indicating\n           support for state-changes for a candidate datastore that\n           has no effect.\";\n      }\n      leaf max-nodes-per-update {\n        type uint32 {\n          range \"1..max\";\n        }\n        description\n          \"Maximum number of data nodes that can be sent\n           in an update. The publisher MAY support more data nodes\n           but SHOULD support at least this number.\n\n           May be used to avoid the 'update-too-big' error\n           during subscription.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, the 'update-too-big' error/identity\";\n      }\n      leaf periodic-notifications-supported {\n        type notification-support;\n        description\n          \"Specifies whether the publisher is capable of\n           sending 'periodic' notifications for the selected\n           data nodes, including any subtrees that may exist\n           below them.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, 'periodic' subscription concept\";\n      }\n      choice update-period {\n        description\n          \"Supported update period value or values for\n           'periodic' subscriptions.\";\n        leaf minimum-update-period {\n          type uint32;\n          units \"centiseconds\";\n          description\n            \"Indicates the minimal update period that is\n             supported for a 'periodic' subscription.\n\n             A subscription request to the selected data nodes with\n             a smaller period than what this leaf specifies is\n             likely to result in a 'period-unsupported' error.\";\n          reference\n            \"RFC 8641: Subscription to YANG Notifications for\n             Datastore Updates, the period leaf in the ietf-yang-push\n             YANG module\";\n        }\n        leaf-list supported-update-period {\n          type uint32;\n          units \"centiseconds\";\n          description\n            \"Supported update period values for a 'periodic'\n             subscription.\n\n             A subscription request to the selected data nodes with a\n             period not included in the leaf-list will result in a\n             'period-unsupported' error.\";\n          reference\n            \"RFC 8641: Subscription to YANG Notifications for\n             Datastore Updates, the period leaf in the ietf-yang-push\n             YANG module\";\n        }\n      }\n      leaf on-change-supported {\n        if-feature \"yp:on-change\";\n        type notification-support;\n        description\n          \"Specifies whether the publisher is capable of\n           sending 'on-change' notifications for the selected\n           data nodes and the subtree below them.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for Datastore\n           Updates, on-change concept\";\n      }\n      leaf minimum-dampening-period {\n        if-feature \"yp:on-change\";\n        type uint32;\n        units \"centiseconds\";\n        description\n          \"The minimum dampening period supported for 'on-change'\n           subscriptions for the selected data nodes.\n\n           If this value is present and greater than zero,\n           that implies dampening is mandatory.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, the dampening-period leaf in the\n           ietf-yang-push YANG module\";\n      }\n      leaf-list supported-excluded-change-type {\n        if-feature \"yp:on-change\";\n        type union {\n          type enumeration {\n            enum \"none\" {\n              value -2;\n              description\n                \"None of the change types can be excluded.\";\n            }\n            enum \"all\" {\n              value -1;\n              description\n                \"Any combination of change types can be excluded.\";\n            }\n          }\n          type yp:change-type;\n        }\n        description\n          \"The change types that can be excluded in\n           YANG-Push subscriptions for the selected data nodes.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for Datastore\n           Updates, the change-type typedef in the ietf-yang-push\n           YANG module\";\n      }\n    }\n  }\n\n  augment \"/sysc:system-capabilities\" {\n    description\n      \"Add system level capabilities\";\n    uses subscription-capabilities {\n      refine \"subscription-capabilities/supported-excluded-change-type\" {\n        default \"none\";\n      }\n    }\n  }\n  augment \"/sysc:system-capabilities/sysc:datastore-capabilities/sysc:per-node-capabilities\" {\n    description\n      \"Add datastore and node-level capabilities\";\n    uses subscription-capabilities {\n      refine \"subscription-capabilities/supported-excluded-change-type\" {\n        default \"none\";\n      }\n    }\n  }\n}\n",
      "references": [
        {
          "name": "ietf-yang-push",
          "subject": "ietf-yang-push-subject",
          "schema": "module ietf-yang-push {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-push\";\n  prefix yp;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-subscribed-notifications {\n    prefix sn;\n    reference\n      \"RFC 8639: Subscription to YANG Notifications\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-patch {\n    prefix ypatch;\n    reference\n      \"RFC 8072: YANG Patch Media Type\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\";\n  description\n    \"This module contains YANG specifications for YANG-Push.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8641; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8641: Subscriptions to YANG Datastores\";\n  }\n\n  rc:yang-data \"resync-subscription-error\" {\n    container resync-subscription-error {\n      description\n        \"If a 'resync-subscription' RPC fails, the subscription is\n         not resynced and the RPC error response MUST indicate the\n         reason for this failure.  This yang-data MAY be inserted as\n         structured data in a subscription's RPC error response\n         to indicate the reason for the failure.\";\n      leaf reason {\n        type identityref {\n          base resync-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the publisher has declined a\n           request for subscription resynchronization.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"establish-subscription-datastore-error-info\" {\n    container establish-subscription-datastore-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the datastore, a subscription is not\n         created and the RPC error response MUST indicate the reason\n         why the subscription failed to be created.  This yang-data\n         MAY be inserted as structured data in a subscription's\n         RPC error response to indicate the reason for the failure.\n         This yang-data MUST be inserted if hints are to be provided\n         back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted datastore.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"modify-subscription-datastore-error-info\" {\n    container modify-subscription-datastore-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against a\n         datastore.  This yang-data MUST be used if hints are to be\n         provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:modify-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be modified.\";\n      }\n      uses hints;\n    }\n  }\n\n  feature on-change {\n    description\n      \"This feature indicates that on-change triggered subscriptions\n       are supported.\";\n  }\n\n  identity resync-subscription-error {\n    description\n      \"Problem found while attempting to fulfill a\n       'resync-subscription' RPC request.\";\n  }\n\n  identity cant-exclude {\n    base sn:establish-subscription-error;\n    description\n      \"Unable to remove the set of 'excluded-change' parameters.\n       This means that the publisher is unable to restrict\n       'push-change-update' notifications to just the change types\n       requested for this subscription.\";\n  }\n\n  identity datastore-not-subscribable {\n    base sn:establish-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"This is not a subscribable datastore.\";\n  }\n\n  identity no-such-subscription-resync {\n    base resync-subscription-error;\n    description\n      \"The referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity on-change-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"On-change is not supported for any objects that are\n       selectable by this filter.\";\n  }\n\n  identity on-change-sync-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"Neither 'sync-on-start' nor resynchronization is supported for\n       this subscription.  This error will be used for two reasons:\n       (1) if an 'establish-subscription' RPC includes\n       'sync-on-start' but the publisher can't support sending a\n       'push-update' for this subscription for reasons other than\n       'on-change-unsupported' or 'sync-too-big'\n       (2) if the 'resync-subscription' RPC is invoked for either an\n       existing periodic subscription or an on-change subscription\n       that can't support resynchronization.\";\n  }\n\n  identity period-unsupported {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The requested time period or 'dampening-period' is too short.\n       This can be for both periodic and on-change subscriptions\n       (with or without dampening).  Hints suggesting alternative\n       periods may be returned as supplemental information.\";\n  }\n\n  identity update-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"Periodic or on-change push update data trees exceed a maximum\n       size limit.  Hints on the estimated size of what was too big\n       may be returned as supplemental information.\";\n  }\n\n  identity sync-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base resync-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The 'sync-on-start' or resynchronization data tree exceeds a\n       maximum size limit.  Hints on the estimated size of what was\n       too big may be returned as supplemental information.\";\n  }\n\n  identity unchanging-selection {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"The selection filter is unlikely to ever select data tree\n       nodes.  This means that based on the subscriber's current\n       access rights, the publisher recognizes that the selection\n       filter is unlikely to ever select data tree nodes that change.\n       Examples for this might be that the node or subtree doesn't\n       exist, read access is not permitted for a receiver, or static\n       objects that only change at reboot have been chosen.\";\n  }\n\n  typedef change-type {\n    type enumeration {\n      enum \"create\" {\n        description\n          \"A change that refers to the creation of a new\n           datastore node.\";\n      }\n      enum \"delete\" {\n        description\n          \"A change that refers to the deletion of a\n           datastore node.\";\n      }\n      enum \"insert\" {\n        description\n          \"A change that refers to the insertion of a new\n           user-ordered datastore node.\";\n      }\n      enum \"move\" {\n        description\n          \"A change that refers to a reordering of the target\n           datastore node.\";\n      }\n      enum \"replace\" {\n        description\n          \"A change that refers to a replacement of the target\n           datastore node's value.\";\n      }\n    }\n    description\n      \"Specifies different types of datastore changes.\n\n       This type is based on the edit operations defined for\n       YANG Patch, with the difference that it is valid for a\n       receiver to process an update record that performs a\n       'create' operation on a datastore node the receiver believes\n       exists or to process a delete on a datastore node the\n       receiver believes is missing.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type, Section 2.5\";\n  }\n\n  typedef selection-filter-ref {\n    type leafref {\n      path \"/sn:filters/yp:selection-filter/yp:filter-id\";\n    }\n    description\n      \"This type is used to reference a selection filter.\";\n  }\n\n  typedef centiseconds {\n    type uint32;\n    description\n      \"A period of time, measured in units of 0.01 seconds.\";\n  }\n\n  grouping datastore-criteria {\n    description\n      \"A grouping to define criteria for which selected objects from\n       a targeted datastore should be included in push updates.\";\n    leaf datastore {\n      type identityref {\n        base ds:datastore;\n      }\n      mandatory true;\n      description\n        \"Datastore from which to retrieve data.\";\n    }\n    uses selection-filter-objects;\n  }\n\n  grouping selection-filter-types {\n    description\n      \"This grouping defines the types of selectors for objects\n       from a datastore.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata datastore-subtree-filter {\n        if-feature \"sn:subtree\";\n        description\n          \"This parameter identifies the portions of the\n           target datastore to retrieve.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf datastore-xpath-filter {\n        if-feature \"sn:xpath\";\n        type yang:xpath1.0;\n        description\n          \"This parameter contains an XPath expression identifying\n           the portions of the target datastore to retrieve.\n\n           If the expression returns a node set, all nodes in the\n           node set are selected by the filter.  Otherwise, if the\n           expression does not return a node set, the filter\n           doesn't select any nodes.\n\n           The expression is evaluated in the following XPath\n           context:\n\n           o  The set of namespace declarations is the set of prefix\n              and namespace pairs for all YANG modules implemented\n              by the server, where the prefix is the YANG module\n              name and the namespace is as defined by the\n              'namespace' statement in the YANG module.\n\n              If the leaf is encoded in XML, all namespace\n              declarations in scope on the 'stream-xpath-filter'\n              leaf element are added to the set of namespace\n              declarations.  If a prefix found in the XML is\n              already present in the set of namespace declarations,\n              the namespace in the XML is used.\n\n           o  The set of variable bindings is empty.\n\n           o  The function library is comprised of the core\n              function library and the XPath functions defined in\n              Section 10 in RFC 7950.\n\n           o  The context node is the root node of the target\n              datastore.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping selection-filter-objects {\n    description\n      \"This grouping defines a selector for objects from a\n       datastore.\";\n    choice selection-filter {\n      description\n        \"The source of the selection filter applied to the\n         subscription.  This will either (1) come referenced from a\n         global list or (2) be provided in the subscription itself.\";\n      case by-reference {\n        description\n          \"Incorporates a filter that has been configured\n           separately.\";\n        leaf selection-filter-ref {\n          type selection-filter-ref;\n          mandatory true;\n          description\n            \"References an existing selection filter that is to be\n             applied to the subscription.\";\n        }\n      }\n      case within-subscription {\n        description\n          \"A local definition allows a filter to have the same\n           lifecycle as the subscription.\";\n        uses selection-filter-types;\n      }\n    }\n  }\n\n  grouping update-policy-modifiable {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions that can be changed during the lifetime of the\n       subscription.\";\n    choice update-trigger {\n      description\n        \"Defines necessary conditions for sending an event record to\n         the subscriber.\";\n      case periodic {\n        container periodic {\n          presence \"indicates a periodic subscription\";\n          description\n            \"The publisher is requested to periodically notify the\n             receiver regarding the current values of the datastore\n             as defined by the selection filter.\";\n          leaf period {\n            type centiseconds;\n            mandatory true;\n            description\n              \"Duration of time that should occur between periodic\n               push updates, in units of 0.01 seconds.\";\n          }\n          leaf anchor-time {\n            type yang:date-and-time;\n            description\n              \"Designates a timestamp before or after which a series\n               of periodic push updates are determined.  The next\n               update will take place at a point in time that is a\n               multiple of a period from the 'anchor-time'.\n               For example, for an 'anchor-time' that is set for the\n               top of a particular minute and a period interval of a\n               minute, updates will be sent at the top of every\n               minute that this subscription is active.\";\n          }\n        }\n      }\n      case on-change {\n        if-feature \"on-change\";\n        container on-change {\n          presence \"indicates an on-change subscription\";\n          description\n            \"The publisher is requested to notify the receiver\n             regarding changes in values in the datastore subset as\n             defined by a selection filter.\";\n          leaf dampening-period {\n            type centiseconds;\n            default \"0\";\n            description\n              \"Specifies the minimum interval between the assembly of\n               successive update records for a single receiver of a\n               subscription.  Whenever subscribed objects change and\n               a dampening-period interval (which may be zero) has\n               elapsed since the previous update record creation for\n               a receiver, any subscribed objects and properties\n               that have changed since the previous update record\n               will have their current values marshalled and placed\n               in a new update record.\";\n          }\n        }\n      }\n    }\n  }\n\n  grouping update-policy {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions of a subscription.\";\n    uses update-policy-modifiable {\n      augment \"update-trigger/on-change/on-change\" {\n        description\n          \"Includes objects that are not modifiable once a\n           subscription is established.\";\n        leaf sync-on-start {\n          type boolean;\n          default \"true\";\n          description\n            \"When this object is set to 'false', (1) it restricts an\n             on-change subscription from sending 'push-update'\n             notifications and (2) pushing a full selection per the\n             terms of the selection filter MUST NOT be done for\n             this subscription.  Only updates about changes\n             (i.e., only 'push-change-update' notifications)\n             are sent.  When set to 'true' (the default behavior),\n             in order to facilitate a receiver's synchronization,\n             a full update is sent, via a 'push-update' notification,\n             when the subscription starts.  After that,\n             'push-change-update' notifications are exclusively sent,\n             unless the publisher chooses to resync the subscription\n             via a new 'push-update' notification.\";\n        }\n        leaf-list excluded-change {\n          type change-type;\n          description\n            \"Used to restrict which changes trigger an update.  For\n             example, if a 'replace' operation is excluded, only the\n             creation and deletion of objects are reported.\";\n        }\n      }\n    }\n  }\n\n  grouping hints {\n    description\n      \"Parameters associated with an error for a subscription\n       made upon a datastore.\";\n    leaf period-hint {\n      type centiseconds;\n      description\n        \"Returned when the requested time period is too short.  This\n         hint can assert a viable period for either a periodic push\n         cadence or an on-change dampening interval.\";\n    }\n    leaf filter-failure-hint {\n      type string;\n      description\n        \"Information describing where and/or why a provided filter\n         was unsupportable for a subscription.\";\n    }\n    leaf object-count-estimate {\n      type uint32;\n      description\n        \"If there are too many objects that could potentially be\n         returned by the selection filter, this identifies the\n         estimate of the number of objects that the filter would\n         potentially pass.\";\n    }\n    leaf object-count-limit {\n      type uint32;\n      description\n        \"If there are too many objects that could be returned by\n         the selection filter, this identifies the upper limit of\n         the publisher's ability to service this subscription.\";\n    }\n    leaf kilobytes-estimate {\n      type uint32;\n      description\n        \"If the returned information could be beyond the capacity\n         of the publisher, this would identify the estimated\n         data size that could result from this selection filter.\";\n    }\n    leaf kilobytes-limit {\n      type uint32;\n      description\n        \"If the returned information would be beyond the capacity\n         of the publisher, this identifies the upper limit of the\n         publisher's ability to service this subscription.\";\n    }\n  }\n\n  augment \"/sn:establish-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       that apply specifically to datastore updates to RPC input.\";\n    uses update-policy;\n  }\n  augment \"/sn:establish-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:modify-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       specific to datastore updates.\";\n    uses update-policy-modifiable;\n  }\n  augment \"/sn:modify-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:subscription-started\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has started.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-started/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has started.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:subscription-modified\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has been modified.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-modified/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has been\n       modified.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:filters\" {\n    description\n      \"This augmentation allows the datastore to be included as part\n       of the selection-filtering criteria for a subscription.\";\n    list selection-filter {\n      key \"filter-id\";\n      description\n        \"A list of preconfigured filters that can be applied\n         to datastore subscriptions.\";\n      leaf filter-id {\n        type string;\n        description\n          \"An identifier to differentiate between selection\n           filters.\";\n      }\n      uses selection-filter-types;\n    }\n  }\n  augment \"/sn:subscriptions/sn:subscription\" {\n    when \"yp:datastore\";\n    description\n      \"This augmentation adds objects to a subscription that are\n       specific to a datastore subscription, i.e., a subscription to\n       a stream of datastore node updates.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscriptions/sn:subscription/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the selection-filtering criteria for a subscription.\";\n    case datastore {\n      uses datastore-criteria;\n    }\n  }\n\n  rpc resync-subscription {\n    if-feature \"on-change\";\n    description\n      \"This RPC allows a subscriber of an active on-change\n       subscription to request a full push of objects.\n\n       A successful invocation results in a 'push-update' of all\n       datastore nodes that the subscriber is permitted to access.\n       This RPC can only be invoked on the same session on which the\n       subscription is currently active.  In the case of an error, a\n       'resync-subscription-error' is sent as part of an error\n       response.\";\n\n    input {\n      leaf id {\n        type sn:subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be resynced.\";\n      }\n    }\n  }\n\n  notification push-update {\n    description\n      \"This notification contains a push update that in turn contains\n       data subscribed to via a subscription.  In the case of a\n       periodic subscription, this notification is sent for periodic\n       updates.  It can also be used for synchronization updates of\n       an on-change subscription.  This notification shall only be\n       sent to receivers of a subscription.  It does not constitute\n       a general-purpose notification that would be subscribable as\n       part of the NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    anydata datastore-contents {\n      description\n        \"This contains the updated data.  It constitutes a snapshot\n         at the time of update of the set of data that has been\n         subscribed to.  The snapshot corresponds to the same\n         snapshot that would be returned in a corresponding 'get'\n         operation with the same selection filter parameters\n         applied.\";\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"This is a flag that indicates that not all datastore\n         nodes subscribed to are included with this update.  In\n         other words, the publisher has failed to fulfill its full\n         subscription obligations and, despite its best efforts, is\n         providing an incomplete set of objects.\";\n    }\n  }\n  notification push-change-update {\n    if-feature \"on-change\";\n    description\n      \"This notification contains an on-change push update.  This\n       notification shall only be sent to the receivers of a\n       subscription.  It does not constitute a general-purpose\n       notification that would be subscribable as part of the\n       NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    container datastore-changes {\n      description\n        \"This contains the set of datastore changes of the target\n         datastore, starting at the time of the previous update, per\n         the terms of the subscription.\";\n      uses ypatch:yang-patch;\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"The presence of this object indicates that not all changes\n         that have occurred since the last update are included with\n         this update.  In other words, the publisher has failed to\n         fulfill its full subscription obligations -- for example,\n         in cases where it was not able to keep up with a burst of\n         changes.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-subscribed-notifications",
              "subject": "ietf-subscribed-notifications-subject",
              "schema": "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\";\n  prefix sn;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\n\n     Author:  Alberto Gonzalez Prieto\n              &lt;mailto:alberto.gonzalez@microsoft.com&gt;\n\n     Author:  Einar Nilsen-Nygaard\n              &lt;mailto:einarnn@cisco.com&gt;\n\n     Author:  Ambika Prasad Tripathy\n              &lt;mailto:ambtripa@cisco.com&gt;\";\n  description\n    \"This module defines a YANG data model for subscribing to event\n     records and receiving matching content in notification messages.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8639; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model for Subscriptions to\n                 Event Notifications\";\n  }\n\n  extension subscription-state-notification {\n    description\n      \"This statement applies only to notifications.  It indicates\n       that the notification is a subscription state change\n       notification.  Therefore, it does not participate in a regular\n       event stream and does not need to be specifically subscribed\n       to in order to be received.  This statement can only occur as\n       a substatement of the YANG 'notification' statement.  This\n       statement is not for use outside of this YANG module.\";\n  }\n\n  rc:yang-data \"establish-subscription-stream-error-info\" {\n    container establish-subscription-stream-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the event stream, a subscription\n         is not created and the RPC error response MUST indicate the\n         reason why the subscription failed to be created.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason for\n         the failure.  This yang-data MUST be inserted if hints are\n         to be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted event stream.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The\n           syntax and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"modify-subscription-stream-error-info\" {\n    container modify-subscription-stream-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against an\n         event stream.  This yang-data MUST be used if hints are to\n         be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base modify-subscription-error;\n        }\n        description\n          \"Information in a 'modify-subscription' RPC error response\n           that indicates the reason why the subscription to an event\n           stream has failed to be modified.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The syntax\n           and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"delete-subscription-error-info\" {\n    container delete-subscription-error-info {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription' RPC\n         fails, the subscription is not deleted and the RPC error\n         response MUST indicate the reason for this failure.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason\n         for the failure.\";\n      leaf reason {\n        type identityref {\n          base delete-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the subscription has failed to be\n           deleted.\";\n      }\n    }\n  }\n\n  feature configured {\n    description\n      \"This feature indicates that configuration of subscriptions is\n       supported.\";\n  }\n\n  feature dscp {\n    description\n      \"This feature indicates that a publisher supports the ability\n       to set the Differentiated Services Code Point (DSCP) value in\n       outgoing packets.\";\n  }\n\n  feature encode-json {\n    description\n      \"This feature indicates that JSON encoding of notification\n       messages is supported.\";\n  }\n\n  feature encode-xml {\n    description\n      \"This feature indicates that XML encoding of notification\n       messages is supported.\";\n  }\n\n  feature interface-designation {\n    description\n      \"This feature indicates that a publisher supports sourcing all\n       receiver interactions for a configured subscription from a\n       single designated egress interface.\";\n  }\n\n  feature qos {\n    description\n      \"This feature indicates that a publisher supports absolute\n       dependencies of one subscription's traffic over another\n       as well as weighted bandwidth sharing between subscriptions.\n       Both of these are Quality of Service (QoS) features that allow\n       differentiated treatment of notification messages between a\n       publisher and a specific receiver.\";\n  }\n\n  feature replay {\n    description\n      \"This feature indicates that historical event record replay is\n       supported.  With replay, it is possible for past event records\n       to be streamed in chronological order.\";\n  }\n\n  feature subtree {\n    description\n      \"This feature indicates support for YANG subtree filtering.\";\n    reference\n      \"RFC 6241: Network Configuration Protocol (NETCONF),\n                 Section 6\";\n  }\n\n  feature supports-vrf {\n    description\n      \"This feature indicates that a publisher supports VRF\n       configuration for configured subscriptions.  VRF support for\n       dynamic subscriptions does not require this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances,\n                 Section 6\";\n  }\n\n  feature xpath {\n    description\n      \"This feature indicates support for XPath filtering.\";\n    reference\n      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\";\n  }\n\n  identity delete-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription' RPC request.\";\n  }\n\n  identity establish-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill an 'establish-subscription' RPC request.\";\n  }\n\n  identity modify-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n\n  identity subscription-suspended-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n       notification.\";\n  }\n\n  identity subscription-terminated-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-terminated'\n       notification.\";\n  }\n\n  identity dscp-unavailable {\n    if-feature \"dscp\";\n    base establish-subscription-error;\n    description\n      \"The publisher is unable to mark notification messages with\n       prioritization information in a way that will be respected\n       during network transit.\";\n  }\n\n  identity encoding-unsupported {\n    base establish-subscription-error;\n    description\n      \"Unable to encode notification messages in the desired\n       format.\";\n  }\n\n  identity filter-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Referenced filter does not exist.  This means a receiver is\n       referencing a filter that doesn't exist or to which it\n       does not have access permissions.\";\n  }\n\n  identity filter-unsupported {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    description\n      \"Cannot parse syntax in the filter.  This failure can be from\n       a syntax error or a syntax too complex to be processed by the\n       publisher.\";\n  }\n\n  identity insufficient-resources {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have sufficient resources to support\n       the requested subscription.  An example might be that\n       allocated CPU is too limited to generate the desired set of\n       notification messages.\";\n  }\n\n  identity no-such-subscription {\n    base modify-subscription-error;\n    base delete-subscription-error;\n    base subscription-terminated-reason;\n    description\n      \"Referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity replay-unsupported {\n    if-feature \"replay\";\n    base establish-subscription-error;\n    description\n      \"Replay cannot be performed for this subscription.  This means\n       the publisher will not provide the requested historic\n       information from the event stream via replay to this\n       receiver.\";\n  }\n\n  identity stream-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Not a subscribable event stream.  This means the referenced\n       event stream is not available for subscription by the\n       receiver.\";\n  }\n\n  identity suspension-timeout {\n    base subscription-terminated-reason;\n    description\n      \"Termination of a previously suspended subscription.  The\n       publisher has eliminated the subscription, as it exceeded a\n       time limit for suspension.\";\n  }\n\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have the network bandwidth needed to\n       get the volume of generated information intended for a\n       receiver.\";\n  }\n\n  identity configurable-encoding {\n    description\n      \"If a transport identity derives from this identity, it means\n       that it supports configurable encodings.  An example of a\n       configurable encoding might be a new identity such as\n       'encode-cbor'.  Such an identity could use\n       'configurable-encoding' as its base.  This would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n       that notification messages be encoded via the Concise Binary\n       Object Representation (CBOR) (RFC 7049).  Further details for\n       any specific configurable encoding would be explored in a\n       transport document based on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object Notation (JSON) Data\n                 Interchange Format\n       RFC 7049: Concise Binary Object Representation (CBOR)\";\n  }\n\n  identity encoding {\n    description\n      \"Base identity to represent data encodings.\";\n  }\n\n  identity encode-xml {\n    if-feature \"encode-xml\";\n    base encoding;\n    description\n      \"Encode data using XML as described in RFC 7950.\";\n    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\n  identity encode-json {\n    if-feature \"encode-json\";\n    base encoding;\n    description\n      \"Encode data using JSON as described in RFC 7951.\";\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\";\n  }\n\n  identity transport {\n    description\n      \"An identity that represents the underlying mechanism for\n       passing notification messages.\";\n  }\n\n  typedef encoding {\n    type identityref {\n      base encoding;\n    }\n    description\n      \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n\n  typedef stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\";\n    }\n    description\n      \"This type is used to reference an event stream filter.\";\n  }\n\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\";\n    }\n    description\n      \"This type is used to reference a system-provided\n       event stream.\";\n  }\n\n  typedef subscription-id {\n    type uint32;\n    description\n      \"A type for subscription identifiers.\";\n  }\n\n  typedef transport {\n    type identityref {\n      base transport;\n    }\n    description\n      \"Specifies the transport used to send notification messages\n       to a receiver.\";\n  }\n\n  grouping stream-filter-elements {\n    description\n      \"This grouping defines the base for filters applied to event\n       streams.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           a subtree filter as defined in RFC 6241, Section 6.\n\n           The subtree filter is applied to the representation of\n           individual, delineated event records as contained in the\n           event stream.\n\n           If the subtree filter returns a non-empty node set, the\n           filter matches the event record, and the event record is\n           included in the notification message sent to the\n           receivers.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           an XPath 1.0 expression.\n\n           The XPath expression is evaluated on the representation of\n           individual, delineated event records as contained in\n           the event stream.\n\n           The result of the XPath expression is converted to a\n           boolean value using the standard XPath 1.0 rules.  If the\n           boolean value is 'true', the filter matches the event\n           record, and the event record is included in the\n           notification message sent to the receivers.\n\n           The expression is evaluated in the following XPath\n           context:\n\n              o  The set of namespace declarations is the set of\n                 prefix and namespace pairs for all YANG modules\n                 implemented by the server, where the prefix is the\n                 YANG module name and the namespace is as defined by\n                 the 'namespace' statement in the YANG module.\n\n                 If the leaf is encoded in XML, all namespace\n                 declarations in scope on the 'stream-xpath-filter'\n                 leaf element are added to the set of namespace\n                 declarations.  If a prefix found in the XML is\n                 already present in the set of namespace\n                 declarations, the namespace in the XML is used.\n\n              o  The set of variable bindings is empty.\n\n              o  The function library is comprised of the core\n                 function library and the XPath functions defined in\n                 Section 10 in RFC 7950.\n\n              o  The context node is the root node.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping update-qos {\n    description\n      \"This grouping describes QoS information concerning a\n       subscription.  This information is passed to lower layers\n       for transport prioritization and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The desired network transport priority level.  This is the\n         priority set on notification messages encapsulating the\n         results of the subscription.  This transport priority is\n         shared for all receivers of a given subscription.\";\n    }\n    leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for a subscription.  Larger weights get\n         more resources.  Allows an underlying transport layer to\n         perform informed load-balance allocations between various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n      description\n        \"Provides the 'subscription-id' of a parent subscription.\n         The parent subscription has absolute precedence should\n         that parent have push updates ready to egress the publisher.\n         In other words, there should be no streaming of objects from\n         the current subscription if the parent has something ready\n         to push.\n\n         If a dependency is asserted via configuration or via an RPC\n         but the referenced 'subscription-id' does not exist, the\n         dependency is silently discarded.  If a referenced\n         subscription is deleted, this dependency is removed.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.1\";\n    }\n  }\n\n  grouping subscription-policy-modifiable {\n    description\n      \"This grouping describes all objects that may be changed\n       in a subscription.\";\n    choice target {\n      mandatory true;\n      description\n        \"Identifies the source of information against which a\n         subscription is being applied as well as specifics on the\n         subset of information desired from that source.\";\n      case stream {\n        choice stream-filter {\n          description\n            \"An event stream filter can be applied to a subscription.\n             That filter will either come referenced from a global\n             list or be provided in the subscription itself.\";\n          case by-reference {\n            description\n              \"Apply a filter that has been configured separately.\";\n            leaf stream-filter-name {\n              type stream-filter-ref;\n              mandatory true;\n              description\n                \"References an existing event stream filter that is\n                 to be applied to an event stream for the\n                 subscription.\";\n            }\n          }\n          case within-subscription {\n            description\n              \"A local definition allows a filter to have the same\n               lifecycle as the subscription.\";\n            uses stream-filter-elements;\n          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n      description\n        \"Identifies a time after which notification messages for a\n         subscription should not be sent.  If 'stop-time' is not\n         present, the notification messages will continue until the\n         subscription is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time', when\n         established, must be for a future time.\";\n    }\n  }\n\n  grouping subscription-policy-dynamic {\n    description\n      \"This grouping describes the only information concerning a\n       subscription that can be passed over the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable {\n      augment \"target/stream\" {\n        description\n          \"Adds additional objects that can be modified by an RPC.\";\n        leaf stream {\n          type stream-ref {\n            require-instance false;\n          }\n          mandatory true;\n          description\n            \"Indicates the event stream to be considered for\n             this subscription.\";\n        }\n        leaf replay-start-time {\n          if-feature \"replay\";\n          type yang:date-and-time;\n          config false;\n          description\n            \"Used to trigger the 'replay' feature for a dynamic\n             subscription, where event records that are selected\n             need to be at or after the specified starting time.  If\n             'replay-start-time' is not present, this is not a replay\n             subscription and event record push should start\n             immediately.  It is never valid to specify start times\n             that are later than or equal to the current time.\";\n        }\n      }\n    }\n    uses update-qos;\n  }\n\n  grouping subscription-policy {\n    description\n      \"This grouping describes the full set of policy information\n       concerning both dynamic and configured subscriptions, with the\n       exclusion of both receivers and networking information\n       specific to the publisher, such as what interface should be\n       used to transmit notification messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n      if-feature \"configured\";\n      type transport;\n      description\n        \"For a configured subscription, this leaf specifies the\n         transport used to deliver messages destined for all\n         receivers of that subscription.\";\n    }\n    leaf encoding {\n      when \"not(../transport) or derived-from(../transport,\n        \\\"sn:configurable-encoding\\\")\";\n      type encoding;\n      description\n        \"The type of encoding for notification messages.  For a\n         dynamic subscription, if not included as part of an\n         'establish-subscription' RPC, the encoding will be populated\n         with the encoding used by that RPC.  For a configured\n         subscription, if not explicitly configured, the encoding\n         will be the default encoding for an underlying transport.\";\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n      description\n        \"Open text allowing a configuring entity to embed the\n         originator or other specifics of this subscription.\";\n    }\n  }\n\n  container streams {\n    config false;\n    description\n      \"Contains information on the built-in event streams provided by\n       the publisher.\";\n    list stream {\n      key \"name\";\n      description\n        \"Identifies the built-in event streams that are supported by\n         the publisher.\";\n      leaf name {\n        type string;\n        description\n          \"A handle for a system-provided event stream made up of a\n           sequential set of event records, each of which is\n           characterized by its own domain and semantics.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A description of the event stream, including such\n           information as the type of event records that are\n           available in this event stream.\";\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n        type empty;\n        description\n          \"Indicates that event record replay is available on this\n           event stream.\";\n      }\n      leaf replay-log-creation-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"The timestamp of the creation of the log used to support\n           the replay function on this event stream.  This time\n           might be earlier than the earliest available information\n           contained in the log.  This object is updated if the log\n           resets for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"The timestamp associated with the last event record that\n           has been aged out of the log.  This timestamp identifies\n           how far back in history this replay log extends, if it\n           doesn't extend back to the 'replay-log-creation-time'.\n           This object MUST be present if replay is supported and any\n           event records have been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n    description\n      \"Contains a list of configurable filters that can be applied to\n       subscriptions.  This facilitates the reuse of complex filters\n       once defined.\";\n    list stream-filter {\n      key \"name\";\n      description\n        \"A list of preconfigured filters that can be applied to\n         subscriptions.\";\n      leaf name {\n        type string;\n        description\n          \"A name to differentiate between filters.\";\n      }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions {\n    description\n      \"Contains the list of currently active subscriptions, i.e.,\n       subscriptions that are currently in effect, used for\n       subscription management and monitoring purposes.  This\n       includes subscriptions that have been set up via\n       RPC primitives as well as subscriptions that have been\n       established via configuration.\";\n    list subscription {\n      key \"id\";\n      description\n        \"The identity and specific parameters of a subscription.\n         Subscriptions in this list can be created using a control\n         channel or RPC or can be established through configuration.\n\n         If the 'kill-subscription' RPC or configuration operations\n         are used to delete a subscription, a\n         'subscription-terminated' message is sent to any active or\n         suspended receivers.\";\n      leaf id {\n        type subscription-id;\n        description\n          \"Identifier of a subscription; unique in a given\n           publisher.\";\n      }\n      uses subscription-policy {\n        refine \"target/stream/stream\" {\n          description\n            \"Indicates the event stream to be considered for this\n             subscription.  If an event stream has been removed\n             and can no longer be referenced by an active\n             subscription, send a 'subscription-terminated'\n             notification with 'stream-unavailable' as the reason.\n             If a configured subscription refers to a nonexistent\n             event stream, move that subscription to the\n             'invalid' state.\";\n        }\n        refine \"transport\" {\n          description\n            \"For a configured subscription, this leaf specifies the\n             transport used to deliver messages destined for all\n             receivers of that subscription.  This object is\n             mandatory for subscriptions in the configuration\n             datastore.  This object (1) is not mandatory for dynamic\n             subscriptions in the operational state datastore and\n             (2) should not be present for other types of dynamic\n             subscriptions.\";\n        }\n        augment \"target/stream\" {\n          description\n            \"Enables objects to be added to a configured stream\n             subscription.\";\n          leaf configured-replay {\n            if-feature \"configured\";\n            if-feature \"replay\";\n            type empty;\n            description\n              \"The presence of this leaf indicates that replay for\n               the configured subscription should start at the\n               earliest time in the event log or at the publisher\n               boot time, whichever is later.\";\n          }\n        }\n      }\n      choice notification-message-origin {\n        if-feature \"configured\";\n        description\n          \"Identifies the egress interface on the publisher\n           from which notification messages are to be sent.\";\n        case interface-originated {\n          description\n            \"When notification messages are to egress a specific,\n             designated interface on the publisher.\";\n          leaf source-interface {\n            if-feature \"interface-designation\";\n            type if:interface-ref;\n            description\n              \"References the interface for notification messages.\";\n          }\n        }\n        case address-originated {\n          description\n            \"When notification messages are to depart from a\n             publisher using a specific originating address and/or\n             routing context information.\";\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n            type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\";\n            }\n            description\n              \"VRF from which notification messages should egress a\n               publisher.\";\n          }\n          leaf source-address {\n            type inet:ip-address-no-zone;\n            description\n              \"The source address for the notification messages.\n               If a source VRF exists but this object doesn't, a\n               publisher's default address for that VRF must\n               be used.\";\n          }\n        }\n      }\n      leaf configured-subscription-state {\n        if-feature \"configured\";\n        type enumeration {\n          enum \"valid\" {\n            value 1;\n            description\n              \"The subscription is supportable with its current\n               parameters.\";\n          }\n          enum \"invalid\" {\n            value 2;\n            description\n              \"The subscription as a whole is unsupportable with its\n               current parameters.\";\n          }\n          enum \"concluded\" {\n            value 3;\n            description\n              \"A subscription is inactive, as it has hit a\n               stop time.  It no longer has receivers in the\n               'active' or 'suspended' state, but the subscription\n               has not yet been removed from configuration.\";\n          }\n        }\n        config false;\n        description\n          \"The presence of this leaf indicates that the subscription\n           originated from configuration, not through a control\n           channel or RPC.  The value indicates the state of the\n           subscription as established by the publisher.\";\n      }\n      container receivers {\n        description\n          \"Set of receivers in a subscription.\";\n        list receiver {\n          key \"name\";\n          min-elements 1;\n          description\n            \"A host intended as a recipient for the notification\n             messages of a subscription.  For configured\n             subscriptions, transport-specific network parameters\n             (or a leafref to those parameters) may be augmented to a\n             specific receiver in this list.\";\n          leaf name {\n            type string;\n            description\n              \"Identifies a unique receiver for a subscription.\";\n          }\n          leaf sent-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records sent to the receiver.  The\n               count is initialized when a dynamic subscription is\n               established or when a configured receiver\n               transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records explicitly removed via\n               either an event stream filter or an access control\n               filter so that they are not passed to a receiver.\n               This count is set to zero each time\n               'sent-event-records' is initialized.\";\n          }\n          leaf state {\n            type enumeration {\n              enum \"active\" {\n                value 1;\n                description\n                  \"The receiver is currently being sent any\n                   applicable notification messages for the\n                   subscription.\";\n              }\n              enum \"suspended\" {\n                value 2;\n                description\n                  \"The receiver state is 'suspended', so the\n                   publisher is currently unable to provide\n                   notification messages for the subscription.\";\n              }\n              enum \"connecting\" {\n                if-feature \"configured\";\n                value 3;\n                description\n                  \"A subscription has been configured, but a\n                   'subscription-started' subscription state change\n                   notification needs to be successfully received\n                   before notification messages are sent.\n\n                   If the 'reset' action is invoked for a receiver of\n                   an active configured subscription, the state\n                   must be moved to 'connecting'.\";\n              }\n              enum \"disconnected\" {\n                if-feature \"configured\";\n                value 4;\n                description\n                  \"A subscription has failed to send a\n                   'subscription-started' state change to the\n                   receiver.  Additional connection attempts are not\n                   currently being made.\";\n              }\n            }\n            config false;\n            mandatory true;\n            description\n              \"Specifies the state of a subscription from the\n               perspective of a particular receiver.  With this\n               information, it is possible to determine whether a\n               publisher is currently generating notification\n               messages intended for that receiver.\";\n          }\n          action reset {\n            if-feature \"configured\";\n            description\n              \"Allows the reset of this configured subscription's\n               receiver to the 'connecting' state.  This enables the\n               connection process to be reinitiated.\";\n\n            output {\n              leaf time {\n                type yang:date-and-time;\n                mandatory true;\n                description\n                  \"Time at which a publisher returned the receiver to\n                   the 'connecting' state.\";\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  rpc establish-subscription {\n    description\n      \"This RPC allows a subscriber to create (and possibly\n       negotiate) a subscription on its own behalf.  If successful,\n       the subscription remains in effect for the duration of the\n       subscriber's association with the publisher or until the\n       subscription is terminated.  If an error occurs or the\n       publisher cannot meet the terms of a subscription, an RPC\n       error is returned, and the subscription is not created.\n       In that case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings that would have a higher\n       likelihood of succeeding in a subsequent\n       'establish-subscription' request.\";\n\n    input {\n      uses subscription-policy-dynamic;\n      leaf encoding {\n        type encoding;\n        description\n          \"The type of encoding for the subscribed data.  If not\n           included as part of the RPC, the encoding MUST be set by\n           the publisher to be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision {\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"If a replay has been requested, this object represents\n           the earliest time covered by the event buffer for the\n           requested event stream.  The value of this object is the\n           'replay-log-aged-time' if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.  All buffered event\n           records after this time will be replayed to a receiver.\n           This object will only be sent if the starting time has\n           been revised to be later than the time requested by the\n           subscriber.\";\n      }\n    }\n  }\n  rpc modify-subscription {\n    description\n      \"This RPC allows a subscriber to modify a dynamic\n       subscription's parameters.  If successful, the changed\n       subscription parameters remain in effect for the duration of\n       the subscription, until the subscription is again modified, or\n       until the subscription is terminated.  In the case of an error\n       or an inability to meet the modified parameters, the\n       subscription is not modified and the original subscription\n       parameters remain in effect.  In that case, the RPC error MAY\n       include 'error-info' suggested parameter hints that would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription' request.  A successful\n       'modify-subscription' will return a suspended subscription to\n       the 'active' state.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier to use for this subscription.\";\n      }\n      uses subscription-policy-modifiable;\n    }\n  }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber to delete a subscription that\n       was previously created by that same subscriber using the\n       'establish-subscription' RPC.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' from the same origin as this RPC\n           can be deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n    nacm:default-deny-all;\n    description\n      \"This RPC allows an operator to delete a dynamic subscription\n       without restrictions on the originating subscriber or\n       underlying transport session.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n  }\n\n  notification replay-completed {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n    description\n      \"This notification is sent to indicate that all of the replay\n       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification is sent to indicate that a subscription has\n       finished passing event records, as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the gracefully completed subscription.\";\n    }\n  }\n  notification subscription-modified {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       modified.  Notification messages sent from this point on will\n       conform to the modified terms of the subscription.  For\n       completeness, this subscription state change notification\n       includes both modified and unmodified aspects of a\n       subscription.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification subscription-resumed {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription that had\n       previously been suspended has resumed.  Notifications will\n       once again be sent.  In addition, a 'subscription-resumed'\n       indicates that no modification of parameters has occurred\n       since the last time event records have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification indicates that a subscription has started\n       and notifications will now be sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/replay-start-time\" {\n        description\n          \"Indicates the time that a replay is using for the\n           streaming of buffered event records.  This will be\n           populated with the most recent of the following:\n           the event time of the previous event record sent to a\n           receiver, the 'replay-log-creation-time', the\n           'replay-log-aged-time', or the most recent publisher\n           boot time.\";\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n      augment \"target/stream\" {\n        description\n          \"This augmentation adds additional parameters specific to a\n           'subscription-started' notification.\";\n        leaf replay-previous-event-time {\n          when \"../replay-start-time\";\n          if-feature \"replay\";\n          type yang:date-and-time;\n          description\n            \"If there is at least one event in the replay buffer\n             prior to 'replay-start-time', this gives the time of\n             the event generated immediately prior to the\n             'replay-start-time'.\n\n             If a receiver previously received event records for\n             this configured subscription, it can compare this time\n             to the last event record previously received.  If the\n             two are not the same (perhaps due to a reboot), then a\n             dynamic replay can be initiated to acquire any missing\n             event records.\";\n        }\n      }\n    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a suspension of the\n       subscription by the publisher has occurred.  No further\n       notifications will be sent until the subscription resumes.\n       This notification shall only be sent to receivers of a\n       subscription; it does not constitute a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-suspended-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the suspension.\";\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-terminated-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the termination.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-inet-types",
                  "subject": "ietf-inet-types-subject",
                  "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-interfaces",
                  "subject": "ietf-interfaces-subject",
                  "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "arbitrary-names",
                      "pre-provisioning",
                      "if-mib"
                    ]
                  }
                },
                {
                  "name": "ietf-netconf-acm",
                  "subject": "ietf-netconf-acm-subject",
                  "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-network-instance",
                  "subject": "ietf-network-instance-subject",
                  "schema": "module ietf-network-instance {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-network-instance\";\n  prefix ni;\n\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-ip {\n    prefix ip;\n    reference\n      \"RFC 8344: A YANG Data Model for IP Management\";\n  }\n  import ietf-yang-schema-mount {\n    prefix yangmnt;\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  organization\n    \"IETF Routing Area (rtgwg) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/rtgwg&gt;\n     WG List:  &lt;mailto:rtgwg@ietf.org&gt;\n\n     Author:   Lou Berger\n               &lt;mailto:lberger@labn.net&gt;\n     Author:   Christian Hopps\n               &lt;mailto:chopps@chopps.org&gt;\n     Author:   Acee Lindem\n               &lt;mailto:acee@cisco.com&gt;\n     Author:   Dean Bogdanovic\n               &lt;mailto:ivandean@gmail.com&gt;\";\n  description\n    \"This module is used to support multiple network instances\n     within a single physical or virtual device.  Network\n     instances are commonly known as VRFs (VPN Routing and\n     Forwarding) and VSIs (Virtual Switching Instances).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all capitals,\n      as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8529; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-21 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8529\";\n  }\n\n  container network-instances {\n    description\n      \"Network instances, each of which consists of\n       VRFs and/or VSIs.\";\n    reference\n      \"RFC 8349: A YANG Data Model for Routing Management\";\n    list network-instance {\n      key \"name\";\n      description\n        \"List of network instances.\";\n      leaf name {\n        type string;\n        mandatory true;\n        description\n          \"device-scoped identifier for the network\n           instance.\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Flag indicating whether or not the network\n           instance is enabled.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"Description of the network instance\n           and its intended purpose.\";\n      }\n      choice ni-type {\n        description\n          \"This node serves as an anchor point for different types\n           of network instances.  Each 'case' is expected to\n           differ in terms of the information needed in the\n           parent/core to support the NI and may differ in their\n           mounted-schema definition.  When the mounted schema is\n           not expected to be the same for a specific type of NI,\n           a mount point should be defined.\";\n      }\n      choice root-type {\n        mandatory true;\n        description\n          \"Well-known mount points.\";\n        container vrf-root {\n          yangmnt:mount-point \"vrf-root\" {\n            description\n              \"Root for L3VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vsi-root {\n          yangmnt:mount-point \"vsi-root\" {\n            description\n              \"Root for L2VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vv-root {\n          yangmnt:mount-point \"vv-root\" {\n            description\n              \"Root models that support both L2VPN-type bridging\n               and L3VPN-type routing.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n      }\n    }\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on a interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which an interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv4\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv4 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv4 interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv6\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv6 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv6 interface is bound.\";\n    }\n  }\n\n  notification bind-ni-name-failed {\n    description\n      \"Indicates an error in the association of an interface to an\n       NI.  Only generated after success is initially returned when\n       bind-ni-name is set.\n\n       Note: Some errors may need to be reported for multiple\n       associations, e.g., a single error may need to be reported\n       for an IPv4 and an IPv6 bind-ni-name.\n\n       At least one container with a bind-ni-name leaf MUST be\n       included in this notification.\";\n    leaf name {\n      type leafref {\n        path \"/if:interfaces/if:interface/if:name\";\n      }\n      mandatory true;\n      description\n        \"Contains the interface name associated with the\n         failure.\";\n    }\n    container interface {\n      description\n        \"Generic interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv4 {\n      description\n        \"IPv4 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv6 {\n      description\n        \"IPv6 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv6/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    leaf error-info {\n      type string;\n      description\n        \"Optionally, indicates the source of the assignment\n         failure.\";\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-interfaces",
                      "subject": "ietf-interfaces-subject",
                      "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "arbitrary-names",
                          "pre-provisioning",
                          "if-mib"
                        ]
                      }
                    },
                    {
                      "name": "ietf-ip",
                      "subject": "ietf-ip-subject",
                      "schema": "module ietf-ip {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n  prefix ip;\n\n  import ietf-interfaces {\n    prefix if;\n  }\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   &lt;http://tools.ietf.org/wg/netmod/&gt;\n     WG List:  &lt;mailto:netmod@ietf.org&gt;\n\n     WG Chair: Thomas Nadeau\n               &lt;mailto:tnadeau@lucidvision.com&gt;\n\n     WG Chair: Juergen Schoenwaelder\n               &lt;mailto:j.schoenwaelder@jacobs-university.de&gt;\n\n     Editor:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"This module contains a collection of YANG definitions for\n     configuring IP implementations.\n\n     Copyright (c) 2014 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 7277; see\n     the RFC itself for full legal notices.\";\n\n  revision 2014-06-16 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7277: A YANG Data Model for IP Management\";\n  }\n\n  feature ipv4-non-contiguous-netmasks {\n    description\n      \"Indicates support for configuring non-contiguous\n       subnet masks.\";\n  }\n\n  feature ipv6-privacy-autoconf {\n    description\n      \"Indicates support for Privacy Extensions for Stateless Address\n       Autoconfiguration in IPv6.\";\n    reference\n      \"RFC 4941: Privacy Extensions for Stateless Address\n                 Autoconfiguration in IPv6\";\n  }\n\n  typedef ip-address-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the address has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dhcp\" {\n        description\n          \"Indicates an address that has been assigned to this\n           system by a DHCP server.\";\n      }\n      enum \"link-layer\" {\n        description\n          \"Indicates an address created by IPv6 stateless\n           autoconfiguration that embeds a link-layer address in its\n           interface identifier.\";\n      }\n      enum \"random\" {\n        description\n          \"Indicates an address chosen by the system at\n\n           random, e.g., an IPv4 address within 169.254/16, an\n           RFC 4941 temporary address, or an RFC 7217 semantically\n           opaque address.\";\n        reference\n          \"RFC 4941: Privacy Extensions for Stateless Address\n                     Autoconfiguration in IPv6\n           RFC 7217: A Method for Generating Semantically Opaque\n                     Interface Identifiers with IPv6 Stateless\n                     Address Autoconfiguration (SLAAC)\";\n      }\n    }\n    description\n      \"The origin of an address.\";\n  }\n\n  typedef neighbor-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the mapping has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dynamic\" {\n        description\n          \"Indicates that the mapping has been dynamically resolved\n           using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery\n           protocol.\";\n      }\n    }\n    description\n      \"The origin of a neighbor entry.\";\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Parameters for configuring IP on interfaces.\n\n       If an interface is not capable of running IP, the server\n       must not allow the client to configure these parameters.\";\n    container ipv4 {\n      presence \"Enables IPv4 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv4 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv4 is enabled or disabled on this\n           interface.  When IPv4 is enabled, this interface is\n           connected to an IPv4 stack, and the interface can send\n           and receive IPv4 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv4 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv4 routers\n           forward datagrams.  IPv4 hosts do not (except those\n           source-routed via the host).\";\n      }\n      leaf mtu {\n        type uint16;\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          mandatory true;\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Enables IPv6 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv6 is enabled or disabled on this\n           interface.  When IPv6 is enabled, this interface is\n           connected to an IPv6 stack, and the interface can send\n           and receive IPv6 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv6 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv6 routers\n           forward datagrams.  IPv6 hosts do not (except those\n           source-routed via the host).\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n      leaf dup-addr-detect-transmits {\n        type uint32;\n        default \"1\";\n        description\n          \"The number of consecutive Neighbor Solicitation messages\n           sent while performing Duplicate Address Detection on a\n           tentative address.  A value of zero indicates that\n           Duplicate Address Detection is not performed on\n           tentative addresses.  A value of one indicates a single\n           transmission with no follow-up retransmissions.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      }\n      container autoconf {\n        description\n          \"Parameters to control the autoconfiguration of IPv6\n           addresses, as described in RFC 4862.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        leaf create-global-addresses {\n          type boolean;\n          default \"true\";\n          description\n            \"If enabled, the host creates global addresses as\n             described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\n                       Section 5.5\";\n        }\n        leaf create-temporary-addresses {\n          if-feature \"ipv6-privacy-autoconf\";\n          type boolean;\n          default \"false\";\n          description\n            \"If enabled, the host creates temporary addresses as\n             described in RFC 4941.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\";\n        }\n        leaf temporary-valid-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"604800\";\n          description\n            \"The time period during which the temporary address\n             is valid.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_VALID_LIFETIME\";\n        }\n        leaf temporary-preferred-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"86400\";\n          description\n            \"The time period during which the temporary address is\n             preferred.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_PREFERRED_LIFETIME\";\n        }\n      }\n    }\n  }\n  augment \"/if:interfaces-state/if:interface\" {\n    description\n      \"Data nodes for the operational state of IP on interfaces.\";\n    container ipv4 {\n      presence \"Present if IPv4 is enabled on this interface\";\n      config false;\n      description\n        \"Interface-specific parameters for the IPv4 address family.\";\n      leaf forwarding {\n        type boolean;\n        description\n          \"Indicates whether IPv4 packet forwarding is enabled or\n           disabled on this interface.\";\n      }\n      leaf mtu {\n        type uint16 {\n          range \"68..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           This list represents the ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Present if IPv6 is enabled on this interface\";\n      config false;\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Indicates whether IPv6 packet forwarding is enabled or\n           disabled on this interface.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n        leaf status {\n          type enumeration {\n            enum \"preferred\" {\n              description\n                \"This is a valid address that can appear as the\n                 destination or source address of a packet.\";\n            }\n            enum \"deprecated\" {\n              description\n                \"This is a valid but deprecated address that should\n                 no longer be used as a source address in new\n                 communications, but packets addressed to such an\n                 address are processed as expected.\";\n            }\n            enum \"invalid\" {\n              description\n                \"This isn't a valid address, and it shouldn't appear\n                 as the destination or source address of a packet.\";\n            }\n            enum \"inaccessible\" {\n              description\n                \"The address is not accessible because the interface\n                 to which this address is assigned is not\n                 operational.\";\n            }\n            enum \"unknown\" {\n              description\n                \"The status cannot be determined for some reason.\";\n            }\n            enum \"tentative\" {\n              description\n                \"The uniqueness of the address on the link is being\n                 verified.  Addresses in this state should not be\n                 used for general communication and should only be\n                 used to determine the uniqueness of the address.\";\n            }\n            enum \"duplicate\" {\n              description\n                \"The address has been determined to be non-unique on\n                 the link and so must not be used.\";\n            }\n            enum \"optimistic\" {\n              description\n                \"The address is available for use, subject to\n                 restrictions, while its uniqueness on a link is\n                 being verified.\";\n            }\n          }\n          description\n            \"The status of an address.  Most of the states correspond\n             to states from the IPv6 Stateless Address\n             Autoconfiguration protocol.\";\n          reference\n            \"RFC 4293: Management Information Base for the\n                       Internet Protocol (IP)\n                       - IpAddressStatusTC\n             RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           This list represents the Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n        leaf is-router {\n          type empty;\n          description\n            \"Indicates that the neighbor node acts as a router.\";\n        }\n        leaf state {\n          type enumeration {\n            enum \"incomplete\" {\n              description\n                \"Address resolution is in progress, and the link-layer\n                 address of the neighbor has not yet been\n                 determined.\";\n            }\n            enum \"reachable\" {\n              description\n                \"Roughly speaking, the neighbor is known to have been\n                 reachable recently (within tens of seconds ago).\";\n            }\n            enum \"stale\" {\n              description\n                \"The neighbor is no longer known to be reachable, but\n                 until traffic is sent to the neighbor no attempt\n                 should be made to verify its reachability.\";\n            }\n            enum \"delay\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 traffic has recently been sent to the neighbor.\n                 Rather than probe the neighbor immediately, however,\n                 delay sending probes for a short while in order to\n                 give upper-layer protocols a chance to provide\n                 reachability confirmation.\";\n            }\n            enum \"probe\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 unicast Neighbor Solicitation probes are being sent\n                 to verify reachability.\";\n            }\n          }\n          description\n            \"The Neighbor Unreachability Detection state of this\n             entry.\";\n          reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                       Section 7.3.2\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-interfaces",
                          "subject": "ietf-interfaces-subject",
                          "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                          "references": [
                            {
                              "name": "ietf-yang-types",
                              "subject": "ietf-yang-types-subject",
                              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                              "references": [],
                              "properties": null,
                              "tags": null
                            }
                          ],
                          "properties": null,
                          "tags": {
                            "features": [
                              "arbitrary-names",
                              "pre-provisioning",
                              "if-mib"
                            ]
                          }
                        },
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "ipv4-non-contiguous-netmasks",
                          "ipv6-privacy-autoconf"
                        ]
                      }
                    },
                    {
                      "name": "ietf-yang-schema-mount",
                      "subject": "ietf-yang-schema-mount-subject",
                      "schema": "module ietf-yang-schema-mount {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n  prefix yangmnt;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Editor:   Ladislav Lhotka\n               <mailto:lhotka@nic.cz>\";\n  description\n    \"This module defines a YANG extension statement that can be used\n     to incorporate data models defined in other YANG modules in a\n     module.  It also defines operational state data that specify the\n     overall structure of the data model.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8528;\n     see the RFC itself for full legal notices.\";\n\n  revision 2019-01-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  extension mount-point {\n    argument label;\n    description\n      \"The argument 'label' is a YANG identifier, i.e., it is of the\n       type 'yang:yang-identifier'.\n\n       The 'mount-point' statement MUST NOT be used in a YANG\n       version 1 module, neither explicitly nor via a 'uses'\n       statement.\n       The 'mount-point' statement MAY be present as a substatement\n       of 'container' and 'list' and MUST NOT be present elsewhere.\n       There MUST NOT be more than one 'mount-point' statement in a\n       given 'container' or 'list' statement.\n\n       If a mount point is defined within a grouping, its label is\n       bound to the module where the grouping is used.\n\n       A mount point defines a place in the node hierarchy where\n       other data models may be attached.  A server that implements a\n       module with a mount point populates the\n       '/schema-mounts/mount-point' list with detailed information on\n       which data models are mounted at each mount point.\n\n       Note that the 'mount-point' statement does not define a new\n       data node.\";\n  }\n\n  container schema-mounts {\n    config false;\n    description\n      \"Contains information about the structure of the overall\n       mounted data model implemented in the server.\";\n    list namespace {\n      key \"prefix\";\n      description\n        \"This list provides a mapping of namespace prefixes that are\n         used in XPath expressions of 'parent-reference' leafs to the\n         corresponding namespace URI references.\";\n      leaf prefix {\n        type yang:yang-identifier;\n        description\n          \"Namespace prefix.\";\n      }\n      leaf uri {\n        type inet:uri;\n        description\n          \"Namespace URI reference.\";\n      }\n    }\n    list mount-point {\n      key \"module label\";\n      description\n        \"Each entry of this list specifies a schema for a particular\n         mount point.\n\n         Each mount point MUST be defined using the 'mount-point'\n         extension in one of the modules listed in the server's\n         YANG library instance with conformance type 'implement'.\";\n      leaf module {\n        type yang:yang-identifier;\n        description\n          \"Name of a module containing the mount point.\";\n      }\n      leaf label {\n        type yang:yang-identifier;\n        description\n          \"Label of the mount point defined using the 'mount-point'\n           extension.\";\n      }\n      leaf config {\n        type boolean;\n        default \"true\";\n        description\n          \"If this leaf is set to 'false', then all data nodes in the\n           mounted schema are read-only ('config false'), regardless\n           of their 'config' property.\";\n      }\n      choice schema-ref {\n        mandatory true;\n        description\n          \"Alternatives for specifying the schema.\";\n        container inline {\n          presence \"A complete self-contained schema is mounted at the\n           mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.\n\n             Different instances of the mount point may have\n             different schemas mounted.\";\n        }\n        container shared-schema {\n          presence \"The mounted schema together with the 'parent-reference'\n           make up the schema for this mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.  When XPath expressions in the mounted\n             schema are evaluated, the 'parent-reference' leaf-list\n             is taken into account.\n\n             Different instances of the mount point MUST have the\n             same schema mounted.\";\n          leaf-list parent-reference {\n            type yang:xpath1.0;\n            description\n              \"Entries of this leaf-list are XPath 1.0 expressions\n               that are evaluated in the following context:\n\n               - The context node is the node in the parent data tree\n                 where the mount-point is defined.\n\n               - The accessible tree is the parent data tree\n                 *without* any nodes defined in modules that are\n                 mounted inside the parent schema.\n\n               - The context position and context size are both equal\n                 to 1.\n\n               - The set of variable bindings is empty.\n\n               - The function library is the core function library\n                 defined in the W3C XPath 1.0 document\n                 (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                 the functions defined in Section 10 of RFC 7950.\n\n               - The set of namespace declarations is defined by the\n                 'namespace' list under 'schema-mounts'.\n\n               Each XPath expression MUST evaluate to a node-set\n               (possibly empty).  For the purposes of evaluating\n               XPath expressions whose context nodes are defined in\n               the mounted schema, the union of all these node-sets\n               together with ancestor nodes are added to the\n               accessible data tree.\n\n               Note that in the case 'ietf-yang-schema-mount' is\n               itself mounted, a 'parent-reference' in the mounted\n               module may refer to nodes that were brought into the\n               accessible tree through a 'parent-reference' in the\n               parent schema.\";\n          }\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": {
                "features": [
                  "configured",
                  "dscp",
                  "encode-json",
                  "encode-xml",
                  "interface-designation",
                  "qos",
                  "replay",
                  "subtree",
                  "supports-vrf",
                  "xpath"
                ]
              }
            },
            {
              "name": "ietf-datastores",
              "subject": "ietf-datastores-subject",
              "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-patch",
              "subject": "ietf-yang-patch-subject",
              "schema": "module ietf-yang-patch {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-patch\";\n  prefix ypatch;\n\n  import ietf-restconf {\n    prefix rc;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\";\n  description\n    \"This module contains conceptual YANG specifications\n     for the YANG Patch and YANG Patch Status data structures.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The YANG grouping statements provide a normative syntax\n     for XML and JSON message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8072; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-02-22 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type.\";\n  }\n\n  rc:yang-data \"yang-patch\" {\n    uses yang-patch;\n  }\n  rc:yang-data \"yang-patch-status\" {\n    uses yang-patch-status;\n  }\n\n  typedef target-resource-offset {\n    type string;\n    description\n      \"Contains a data resource identifier string representing\n       a sub-resource within the target resource.\n       The document root for this expression is the\n       target resource that is specified in the\n       protocol operation (e.g., the URI for the PATCH request).\n\n       This string is encoded according to the same rules as those\n       for a data resource identifier in a RESTCONF request URI.\";\n    reference\n      \"RFC 8040, Section 3.5.3.\";\n  }\n\n  grouping yang-patch {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch edit request message.\";\n    container yang-patch {\n      description\n        \"Represents a conceptual sequence of datastore edits,\n         called a patch.  Each patch is given a client-assigned\n         patch identifier.  Each edit MUST be applied\n         in ascending order, and all edits MUST be applied.\n         If any errors occur, then the target datastore MUST NOT\n         be changed by the YANG Patch operation.\n\n         It is possible for a datastore constraint violation to occur\n         due to any node in the datastore, including nodes not\n         included in the 'edit' list.  Any validation errors MUST\n         be reported in the reply message.\";\n      reference\n        \"RFC 7950, Section 8.3.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"An arbitrary string provided by the client to identify\n           the entire patch.  Error messages returned by the server\n           that pertain to this patch will be identified by this\n           'patch-id' value.  A client SHOULD attempt to generate\n           unique 'patch-id' values to distinguish between\n           transactions from multiple clients in any audit logs\n           maintained by the server.\";\n      }\n      leaf comment {\n        type string;\n        description\n          \"An arbitrary string provided by the client to describe\n           the entire patch.  This value SHOULD be present in any\n           audit logging records generated by the server for the\n           patch.\";\n      }\n      list edit {\n        key \"edit-id\";\n        ordered-by user;\n        description\n          \"Represents one edit within the YANG Patch request message.\n           The 'edit' list is applied in the following manner:\n\n             - The first edit is conceptually applied to a copy\n               of the existing target datastore, e.g., the\n               running configuration datastore.\n             - Each ascending edit is conceptually applied to\n               the result of the previous edit(s).\n             - After all edits have been successfully processed,\n               the result is validated according to YANG constraints.\n             - If successful, the server will attempt to apply\n               the result to the target datastore.\";\n        leaf edit-id {\n          type string;\n          description\n            \"Arbitrary string index for the edit.\n             Error messages returned by the server that pertain\n             to a specific edit will be identified by this value.\";\n        }\n        leaf operation {\n          type enumeration {\n            enum \"create\" {\n              description\n                \"The target data node is created using the supplied\n                 value, only if it does not already exist.  The\n                 'target' leaf identifies the data node to be\n                 created, not the parent data node.\";\n            }\n            enum \"delete\" {\n              description\n                \"Delete the target node, only if the data resource\n                 currently exists; otherwise, return an error.\";\n            }\n            enum \"insert\" {\n              description\n                \"Insert the supplied value into a user-ordered\n                 list or leaf-list entry.  The target node must\n                 represent a new data resource.  If the 'where'\n                 parameter is set to 'before' or 'after', then\n                 the 'point' parameter identifies the insertion\n                 point for the target node.\";\n            }\n            enum \"merge\" {\n              description\n                \"The supplied value is merged with the target data\n                 node.\";\n            }\n            enum \"move\" {\n              description\n                \"Move the target node.  Reorder a user-ordered\n                 list or leaf-list.  The target node must represent\n                 an existing data resource.  If the 'where' parameter\n                 is set to 'before' or 'after', then the 'point'\n                 parameter identifies the insertion point to move\n                 the target node.\";\n            }\n            enum \"replace\" {\n              description\n                \"The supplied value is used to replace the target\n                 data node.\";\n            }\n            enum \"remove\" {\n              description\n                \"Delete the target node if it currently exists.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The datastore operation requested for the associated\n             'edit' entry.\";\n        }\n        leaf target {\n          type target-resource-offset;\n          mandatory true;\n          description\n            \"Identifies the target data node for the edit\n             operation.  If the target has the value '/', then\n             the target data node is the target resource.\n             The target node MUST identify a data resource,\n             not the datastore resource.\";\n        }\n        leaf point {\n          when \"(../operation = 'insert' or ../operation = 'move')and (../where = 'before' or ../where = 'after')\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations, before or after an existing entry.\";\n          }\n          type target-resource-offset;\n          description\n            \"The absolute URL path for the data node that is being\n             used as the insertion point or move point for the\n             target of this 'edit' entry.\";\n        }\n        leaf where {\n          when \"../operation = 'insert' or ../operation = 'move'\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations.\";\n          }\n          type enumeration {\n            enum \"before\" {\n              description\n                \"Insert or move a data node before the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"after\" {\n              description\n                \"Insert or move a data node after the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"first\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the first entry.\";\n            }\n            enum \"last\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the last entry.\";\n            }\n          }\n          default \"last\";\n          description\n            \"Identifies where a data resource will be inserted\n             or moved.  YANG only allows these operations for\n             list and leaf-list data nodes that are\n             'ordered-by user'.\";\n        }\n        anydata value {\n          when \"../operation = 'create' or ../operation = 'merge' or ../operation = 'replace' or ../operation = 'insert'\" {\n            description\n              \"The anydata 'value' is only used for 'create',\n               'merge', 'replace', and 'insert' operations.\";\n          }\n          description\n            \"Value used for this edit operation.  The anydata 'value'\n             contains the target resource associated with the\n             'target' leaf.\n\n             For example, suppose the target node is a YANG container\n             named foo:\n\n                 container foo {\n                   leaf a { type string; }\n                   leaf b { type int32; }\n                 }\n\n             The 'value' node contains one instance of foo:\n\n                 <value>\n                    <foo xmlns='example-foo-namespace'>\n                       <a>some value</a>\n                       <b>42</b>\n                    </foo>\n                 </value>\n              \";\n        }\n      }\n    }\n  }\n\n  grouping yang-patch-status {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch Status response\n       message.\";\n    container yang-patch-status {\n      description\n        \"A container representing the response message sent by the\n         server after a YANG Patch edit request message has been\n         processed.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"The 'patch-id' value used in the request.\";\n      }\n      choice global-status {\n        description\n          \"Report global errors or complete success.\n           If there is no case selected, then errors\n           are reported in the 'edit-status' container.\";\n        case global-errors {\n          description\n            \"This container will be present if global errors that\n             are unrelated to a specific edit occurred.\";\n          uses rc:errors;\n        }\n        leaf ok {\n          type empty;\n          description\n            \"This leaf will be present if the request succeeded\n             and there are no errors reported in the 'edit-status'\n             container.\";\n        }\n      }\n      container edit-status {\n        description\n          \"This container will be present if there are\n           edit-specific status responses to report.\n           If all edits succeeded and the 'global-status'\n           returned is 'ok', then a server MAY omit this\n           container.\";\n        list edit {\n          key \"edit-id\";\n          description\n            \"Represents a list of status responses,\n             corresponding to edits in the YANG Patch\n             request message.  If an 'edit' entry was\n             skipped or not reached by the server,\n             then this list will not contain a corresponding\n             entry for that edit.\";\n          leaf edit-id {\n            type string;\n            description\n              \"Response status is for the 'edit' list entry\n               with this 'edit-id' value.\";\n          }\n          choice edit-status-choice {\n            description\n              \"A choice between different types of status\n               responses for each 'edit' entry.\";\n            leaf ok {\n              type empty;\n              description\n                \"This 'edit' entry was invoked without any\n                 errors detected by the server associated\n                 with this edit.\";\n            }\n            case errors {\n              description\n                \"The server detected errors associated with the\n                 edit identified by the same 'edit-id' value.\";\n              uses rc:errors;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": {
            "features": [
              "on-change"
            ]
          }
        },
        {
          "name": "ietf-system-capabilities",
          "subject": "ietf-system-capabilities-subject",
          "schema": "module ietf-system-capabilities {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-system-capabilities\";\n  prefix sysc;\n\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-yang-library {\n    prefix yanglib;\n    description\n      \"This module requires ietf-yang-library to be implemented.\n       Revision 2019-01-04 or a revision derived from it\n       is REQUIRED.\";\n    reference\n      \"RFC8525: YANG Library\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Editor:   Balazs Lengyel\n               <mailto:balazs.lengyel@ericsson.com>\";\n  description\n    \"This module specifies a structure to specify system\n     capabilities for a server or a publisher.  System capabilities\n     may include capabilities of a NETCONF or RESTCONF server or a\n     notification publisher.\n\n     This module does not contain any specific capabilities; it only\n     provides a structure where containers containing the actual\n     capabilities are augmented in.\n\n     Capability values can be specified at the system level, at the\n     datastore level (by selecting all nodes in the datastore), or\n     for specific data nodes of a specific datastore (and their\n     contained subtrees).\n     Capability values specified for a specific datastore or\n     node-set override values specified on the system/publisher\n     level.\n\n     The same grouping MUST be used to define hierarchical\n     capabilities supported both at the system level and at the\n     datastore/data-node level.\n\n     To find a capability value for a specific data node in a\n     specific datastore, the user SHALL:\n\n     1) search for a datastore-capabilities list entry for\n     the specific datastore.  When stating a specific capability, the\n     relative path for any specific capability must be the same\n     under the system-capabilities container and under the\n     per-node-capabilities list.\n\n     2) If the datastore entry is found within that entry, process\n     all per-node-capabilities entries in the order they appear in\n     the list.  The first entry that specifies the specific\n     capability and has a node-selector selecting the specific data\n     node defines the capability value.\n\n     3) If the capability value is not found above and the specific\n     capability is specified under the system-capabilities container\n     (outside the datastore-capabilities list), this value shall be\n     used.\n\n     4) If no values are found in the previous steps, the\n     system/publisher is not capable of providing a value.  Possible\n     reasons are that it is unknown, the capability is changing for\n     some reason, there is no specified limit, etc.  In this case,\n     the system's behavior is unspecified.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all\n     capitals, as shown here.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Revised BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 9196\n     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself\n     for full legal notices.\";\n\n  revision 2022-02-17 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  container system-capabilities {\n    config false;\n    description\n      \"System capabilities.\n       Capability values specified here at the system level\n       are valid for all datastores and are used when the\n       capability is not specified at the datastore level\n       or for specific data nodes.\";\n    list datastore-capabilities {\n      key \"datastore\";\n      description\n        \"Capabilities values per datastore.\n\n         For non-NMDA servers/publishers, 'config false' data is\n         considered as if it were part of the running datastore.\";\n      leaf datastore {\n        type leafref {\n          path \"/yanglib:yang-library/yanglib:datastore/yanglib:name\";\n        }\n        description\n          \"The datastore for which capabilities are defined.\n           Only one specific datastore can be specified,\n           e.g., ds:conventional must not be used, as it\n           represents a set of configuration datastores.\";\n      }\n      list per-node-capabilities {\n        description\n          \"Each list entry specifies capabilities for the selected\n           data nodes.  The same capabilities apply to the data nodes\n           in the subtree below the selected nodes.\n\n           The system SHALL order the entries according to their\n           precedence. The order of the entries MUST NOT change\n           unless the underlying capabilities also change.\n\n           Note that the longest patch matching can be achieved\n           by ordering more specific matches before less\n           specific ones.\";\n        choice node-selection {\n          description\n            \"A method to select some or all nodes within a\n             datastore.\";\n          leaf node-selector {\n            type nacm:node-instance-identifier;\n            description\n              \"Selects the data nodes for which capabilities are\n               specified. The special value '/' denotes all data\n               nodes in the datastore, consistent with the path\n               leaf node on page 41 of [RFC8341].\";\n            reference\n              \"RFC 8341: Network Configuration Access Control Model\";\n          }\n        }\n      }\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-netconf-acm",
              "subject": "ietf-netconf-acm-subject",
              "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-library",
              "subject": "ietf-yang-library-subject",
              "schema": "module ietf-yang-library {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-library\";\n  prefix yanglib;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture\n                 (NMDA)\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Kent Watsen\n               <mailto:kent+ietf@watsen.net>\n\n     Author:   Robert Wilton\n               <mailto:rwilton@cisco.com>\";\n  description\n    \"This module provides information about the YANG modules,\n     datastores, and datastore schemas used by a network\n     management server.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8525; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-04 {\n    description\n      \"Added support for multiple datastores according to the\n       Network Management Datastore Architecture (NMDA).\";\n    reference\n      \"RFC 8525: YANG Library\";\n  }\n  revision 2016-04-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7895: YANG Module Library\";\n  }\n\n  typedef revision-identifier {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}';\n    }\n    description\n      \"Represents a specific date in YYYY-MM-DD format.\";\n  }\n\n  grouping module-identification-leafs {\n    description\n      \"Parameters for identifying YANG modules and submodules.\";\n    leaf name {\n      type yang:yang-identifier;\n      mandatory true;\n      description\n        \"The YANG module or submodule name.\";\n    }\n    leaf revision {\n      type revision-identifier;\n      description\n        \"The YANG module or submodule revision date.  If no revision\n         statement is present in the YANG module or submodule, this\n         leaf is not instantiated.\";\n    }\n  }\n\n  grouping location-leaf-list {\n    description\n      \"Common leaf-list parameter for the locations of modules and\n       submodules.\";\n    leaf-list location {\n      type inet:uri;\n      description\n        \"Contains a URL that represents the YANG schema\n         resource for this module or submodule.\n\n         This leaf will only be present if there is a URL\n         available for retrieval of the schema for this entry.\";\n    }\n  }\n\n  grouping module-implementation-parameters {\n    description\n      \"Parameters for describing the implementation of a module.\";\n    leaf-list feature {\n      type yang:yang-identifier;\n      description\n        \"List of all YANG feature names from this module that are\n         supported by the server, regardless whether they are defined\n         in the module or any included submodule.\";\n    }\n    leaf-list deviation {\n      type leafref {\n        path \"../../module/name\";\n      }\n      description\n        \"List of all YANG deviation modules used by this server to\n         modify the conformance of the module associated with this\n         entry.  Note that the same module can be used for deviations\n         for multiple modules, so the same entry MAY appear within\n         multiple 'module' entries.\n\n         This reference MUST NOT (directly or indirectly)\n         refer to the module being deviated.\n\n         Robust clients may want to make sure that they handle a\n         situation where a module deviates itself (directly or\n         indirectly) gracefully.\";\n    }\n  }\n\n  grouping module-set-parameters {\n    description\n      \"A set of parameters that describe a module set.\";\n    leaf name {\n      type string;\n      description\n        \"An arbitrary name of the module set.\";\n    }\n    list module {\n      key \"name\";\n      description\n        \"An entry in this list represents a module implemented by the\n         server, as per Section 5.6.5 of RFC 7950, with a particular\n         set of supported features and deviations.\";\n      reference\n        \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n      uses module-identification-leafs;\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n      uses module-implementation-parameters;\n    }\n    list import-only-module {\n      key \"name revision\";\n      description\n        \"An entry in this list indicates that the server imports\n         reusable definitions from the specified revision of the\n         module but does not implement any protocol-accessible\n         objects from this revision.\n\n         Multiple entries for the same module name MAY exist.  This\n         can occur if multiple modules import the same module but\n         specify different revision dates in the import statements.\";\n      leaf name {\n        type yang:yang-identifier;\n        description\n          \"The YANG module name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        description\n          \"The YANG module revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module.\";\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n    }\n  }\n\n  grouping yang-library-parameters {\n    description\n      \"The YANG library data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    list module-set {\n      key \"name\";\n      description\n        \"A set of modules that may be used by one or more schemas.\n\n         A module set does not have to be referentially complete,\n         i.e., it may define modules that contain import statements\n         for other modules not included in the module set.\";\n      uses module-set-parameters;\n    }\n    list schema {\n      key \"name\";\n      description\n        \"A datastore schema that may be used by one or more\n         datastores.\n\n         The schema must be valid and referentially complete, i.e.,\n         it must contain modules to satisfy all used import\n         statements for all modules specified in the schema.\";\n      leaf name {\n        type string;\n        description\n          \"An arbitrary name of the schema.\";\n      }\n      leaf-list module-set {\n        type leafref {\n          path \"../../module-set/name\";\n        }\n        description\n          \"A set of module-sets that are included in this schema.\n           If a non-import-only module appears in multiple module\n           sets, then the module revision and the associated features\n           and deviations must be identical.\";\n      }\n    }\n    list datastore {\n      key \"name\";\n      description\n        \"A datastore supported by this server.\n\n         Each datastore indicates which schema it supports.\n\n         The server MUST instantiate one entry in this list per\n         specific datastore it supports.\n         Each datastore entry with the same datastore schema SHOULD\n         reference the same schema.\";\n      leaf name {\n        type ds:datastore-ref;\n        description\n          \"The identity of the datastore.\";\n      }\n      leaf schema {\n        type leafref {\n          path \"../../schema/name\";\n        }\n        mandatory true;\n        description\n          \"A reference to the schema supported by this datastore.\n           All non-import-only modules of the schema are implemented\n           with their associated features and deviations.\";\n      }\n    }\n  }\n\n  grouping module-list {\n    status deprecated;\n    description\n      \"The module data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    grouping common-leafs {\n      status deprecated;\n      description\n        \"Common parameters for YANG modules and submodules.\";\n      leaf name {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"The YANG module or submodule name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        status deprecated;\n        description\n          \"The YANG module or submodule revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module or submodule.\";\n      }\n    }\n    grouping schema-leaf {\n      status deprecated;\n      description\n        \"Common schema leaf parameter for modules and submodules.\";\n      leaf schema {\n        type inet:uri;\n        description\n          \"Contains a URL that represents the YANG schema\n           resource for this module or submodule.\n\n           This leaf will only be present if there is a URL\n           available for retrieval of the schema for this entry.\";\n      }\n    }\n    list module {\n      key \"name revision\";\n      status deprecated;\n      description\n        \"Each entry represents one revision of one module\n         currently supported by the server.\";\n      uses common-leafs {\n        status deprecated;\n      }\n      uses schema-leaf {\n        status deprecated;\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        status deprecated;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      leaf-list feature {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"List of YANG feature names from this module that are\n           supported by the server, regardless of whether they are\n           defined in the module or any included submodule.\";\n      }\n      list deviation {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"List of YANG deviation module names and revisions\n           used by this server to modify the conformance of\n           the module associated with this entry.  Note that\n           the same module can be used for deviations for\n           multiple modules, so the same entry MAY appear\n           within multiple 'module' entries.\n\n           The deviation module MUST be present in the 'module'\n           list, with the same name and revision values.\n           The 'conformance-type' value will be 'implement' for\n           the deviation module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n      }\n      leaf conformance-type {\n        type enumeration {\n          enum \"implement\" {\n            description\n              \"Indicates that the server implements one or more\n               protocol-accessible objects defined in the YANG module\n               identified in this entry.  This includes deviation\n               statements defined in the module.\n\n               For YANG version 1.1 modules, there is at most one\n               'module' entry with conformance type 'implement' for a\n               particular module name, since YANG 1.1 requires that\n               at most one revision of a module is implemented.\n\n               For YANG version 1 modules, there SHOULD NOT be more\n               than one 'module' entry for a particular module\n               name.\";\n          }\n          enum \"import\" {\n            description\n              \"Indicates that the server imports reusable definitions\n               from the specified revision of the module but does\n               not implement any protocol-accessible objects from\n               this revision.\n\n               Multiple 'module' entries for the same module name MAY\n               exist.  This can occur if multiple modules import the\n               same module but specify different revision dates in\n               the import statements.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"Indicates the type of conformance the server is claiming\n           for the YANG module identified by this entry.\";\n      }\n      list submodule {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n        uses schema-leaf {\n          status deprecated;\n        }\n      }\n    }\n  }\n\n  container yang-library {\n    config false;\n    description\n      \"Container holding the entire YANG library of this server.\";\n    uses yang-library-parameters;\n    leaf content-id {\n      type string;\n      mandatory true;\n      description\n        \"A server-generated identifier of the contents of the\n         '/yang-library' tree.  The server MUST change the value of\n         this leaf if the information represented by the\n         '/yang-library' tree, except '/yang-library/content-id', has\n         changed.\";\n    }\n  }\n  container modules-state {\n    config false;\n    status deprecated;\n    description\n      \"Contains YANG module monitoring information.\";\n    leaf module-set-id {\n      type string;\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains a server-specific identifier representing\n         the current set of modules and submodules.  The\n         server MUST change the value of this leaf if the\n         information represented by the 'module' list instances\n         has changed.\";\n    }\n    uses module-list {\n      status deprecated;\n    }\n  }\n\n  notification yang-library-update {\n    description\n      \"Generated when any YANG library information on the\n       server has changed.\";\n    leaf content-id {\n      type leafref {\n        path \"/yanglib:yang-library/yanglib:content-id\";\n      }\n      mandatory true;\n      description\n        \"Contains the YANG library content identifier for the updated\n         YANG library at the time the notification is generated.\";\n    }\n  }\n  notification yang-library-change {\n    status deprecated;\n    description\n      \"Generated when the set of modules and submodules supported\n       by the server has changed.\";\n    leaf module-set-id {\n      type leafref {\n        path \"/yanglib:modules-state/yanglib:module-set-id\";\n      }\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains the module-set-id value representing the\n         set of modules and submodules supported at the server\n         at the time the notification is generated.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-inet-types",
                  "subject": "ietf-inet-types-subject",
                  "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-datastores",
                  "subject": "ietf-datastores-subject",
                  "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        }
      ],
      "properties": null,
      "tags": null
    },
    {
      "name": "ietf-notification-capabilities",
      "subject": "ietf-notification-capabilities-subject",
      "schema": "module ietf-notification-capabilities {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-notification-capabilities\";\n  prefix notc;\n\n  import ietf-yang-push {\n    prefix yp;\n    description\n      \"This module requires ietf-yang-push to be implemented.\";\n    reference\n      \"RFC 8641: Subscription to YANG Notifications for\n       Datastore Updates\";\n  }\n  import ietf-system-capabilities {\n    prefix sysc;\n    description\n      \"This module requires ietf-system-capabilities to be\n       implemented.\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Editor:   Balazs Lengyel\n               <mailto:balazs.lengyel@ericsson.com>\";\n  description\n    \"This module specifies publisher capabilities related to\n     YANG-Push (RFC 8641).\n\n     The module contains:\n\n     - a specification of the data nodes that support 'on-change' or\n     'periodic' notifications.\n\n     - capabilities related to the throughput of notification data\n     that the publisher can support.  (Note that for a specific\n     subscription, the publisher MAY allow only longer periods\n     or smaller updates depending on, e.g., actual load conditions.)\n\n     Capability values can be specified at the system/publisher\n     level, at the datastore level, or for specific data nodes of\n     a specific datastore (and their contained subtrees), as defined\n     in the ietf-system-capabilities module.\n\n     If different data nodes covered by a single subscription\n     have different values for a specific capability, then using\n     values that are only acceptable for some of these data nodes,\n     but not for others, may result in the rejection of the\n     subscription.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all\n     capitals, as shown here.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Revised BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 9196\n     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself\n     for full legal notices.\";\n\n  revision 2022-02-17 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  grouping subscription-capabilities {\n    description\n      \"Capabilities related to YANG-Push subscriptions\n       and notifications\";\n    container subscription-capabilities {\n      description\n        \"Capabilities related to YANG-Push subscriptions\n         and notifications\";\n      typedef notification-support {\n        type bits {\n          bit config-changes {\n            description\n              \"The publisher is capable of sending\n               notifications for 'config true' nodes for the\n               relevant scope and subscription type.\";\n          }\n          bit state-changes {\n            description\n              \"The publisher is capable of sending\n               notifications for 'config false' nodes for the\n               relevant scope and subscription type.\";\n          }\n        }\n        description\n          \"Type for defining whether 'on-change' or\n           'periodic' notifications are supported for all data nodes,\n           'config false' data nodes, 'config true' data nodes, or\n           no data nodes.\n\n           The bits config-changes or state-changes have no effect\n           when they are set for a datastore or for a set of nodes\n           that does not contain nodes with the indicated config\n           value.  In those cases, the effect is the same as if no\n           support was declared.  One example of this is indicating\n           support for state-changes for a candidate datastore that\n           has no effect.\";\n      }\n      leaf max-nodes-per-update {\n        type uint32 {\n          range \"1..max\";\n        }\n        description\n          \"Maximum number of data nodes that can be sent\n           in an update. The publisher MAY support more data nodes\n           but SHOULD support at least this number.\n\n           May be used to avoid the 'update-too-big' error\n           during subscription.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, the 'update-too-big' error/identity\";\n      }\n      leaf periodic-notifications-supported {\n        type notification-support;\n        description\n          \"Specifies whether the publisher is capable of\n           sending 'periodic' notifications for the selected\n           data nodes, including any subtrees that may exist\n           below them.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, 'periodic' subscription concept\";\n      }\n      choice update-period {\n        description\n          \"Supported update period value or values for\n           'periodic' subscriptions.\";\n        leaf minimum-update-period {\n          type uint32;\n          units \"centiseconds\";\n          description\n            \"Indicates the minimal update period that is\n             supported for a 'periodic' subscription.\n\n             A subscription request to the selected data nodes with\n             a smaller period than what this leaf specifies is\n             likely to result in a 'period-unsupported' error.\";\n          reference\n            \"RFC 8641: Subscription to YANG Notifications for\n             Datastore Updates, the period leaf in the ietf-yang-push\n             YANG module\";\n        }\n        leaf-list supported-update-period {\n          type uint32;\n          units \"centiseconds\";\n          description\n            \"Supported update period values for a 'periodic'\n             subscription.\n\n             A subscription request to the selected data nodes with a\n             period not included in the leaf-list will result in a\n             'period-unsupported' error.\";\n          reference\n            \"RFC 8641: Subscription to YANG Notifications for\n             Datastore Updates, the period leaf in the ietf-yang-push\n             YANG module\";\n        }\n      }\n      leaf on-change-supported {\n        if-feature \"yp:on-change\";\n        type notification-support;\n        description\n          \"Specifies whether the publisher is capable of\n           sending 'on-change' notifications for the selected\n           data nodes and the subtree below them.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for Datastore\n           Updates, on-change concept\";\n      }\n      leaf minimum-dampening-period {\n        if-feature \"yp:on-change\";\n        type uint32;\n        units \"centiseconds\";\n        description\n          \"The minimum dampening period supported for 'on-change'\n           subscriptions for the selected data nodes.\n\n           If this value is present and greater than zero,\n           that implies dampening is mandatory.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for\n           Datastore Updates, the dampening-period leaf in the\n           ietf-yang-push YANG module\";\n      }\n      leaf-list supported-excluded-change-type {\n        if-feature \"yp:on-change\";\n        type union {\n          type enumeration {\n            enum \"none\" {\n              value -2;\n              description\n                \"None of the change types can be excluded.\";\n            }\n            enum \"all\" {\n              value -1;\n              description\n                \"Any combination of change types can be excluded.\";\n            }\n          }\n          type yp:change-type;\n        }\n        description\n          \"The change types that can be excluded in\n           YANG-Push subscriptions for the selected data nodes.\";\n        reference\n          \"RFC 8641: Subscription to YANG Notifications for Datastore\n           Updates, the change-type typedef in the ietf-yang-push\n           YANG module\";\n      }\n    }\n  }\n\n  augment \"/sysc:system-capabilities\" {\n    description\n      \"Add system level capabilities\";\n    uses subscription-capabilities {\n      refine \"subscription-capabilities/supported-excluded-change-type\" {\n        default \"none\";\n      }\n    }\n  }\n  augment \"/sysc:system-capabilities/sysc:datastore-capabilities/sysc:per-node-capabilities\" {\n    description\n      \"Add datastore and node-level capabilities\";\n    uses subscription-capabilities {\n      refine \"subscription-capabilities/supported-excluded-change-type\" {\n        default \"none\";\n      }\n    }\n  }\n}\n",
      "references": [
        {
          "name": "ietf-yang-push",
          "subject": "ietf-yang-push-subject",
          "schema": "module ietf-yang-push {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-push\";\n  prefix yp;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-subscribed-notifications {\n    prefix sn;\n    reference\n      \"RFC 8639: Subscription to YANG Notifications\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-patch {\n    prefix ypatch;\n    reference\n      \"RFC 8072: YANG Patch Media Type\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\";\n  description\n    \"This module contains YANG specifications for YANG-Push.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8641; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8641: Subscriptions to YANG Datastores\";\n  }\n\n  rc:yang-data \"resync-subscription-error\" {\n    container resync-subscription-error {\n      description\n        \"If a 'resync-subscription' RPC fails, the subscription is\n         not resynced and the RPC error response MUST indicate the\n         reason for this failure.  This yang-data MAY be inserted as\n         structured data in a subscription's RPC error response\n         to indicate the reason for the failure.\";\n      leaf reason {\n        type identityref {\n          base resync-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the publisher has declined a\n           request for subscription resynchronization.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"establish-subscription-datastore-error-info\" {\n    container establish-subscription-datastore-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the datastore, a subscription is not\n         created and the RPC error response MUST indicate the reason\n         why the subscription failed to be created.  This yang-data\n         MAY be inserted as structured data in a subscription's\n         RPC error response to indicate the reason for the failure.\n         This yang-data MUST be inserted if hints are to be provided\n         back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted datastore.\";\n      }\n      uses hints;\n    }\n  }\n  rc:yang-data \"modify-subscription-datastore-error-info\" {\n    container modify-subscription-datastore-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against a\n         datastore.  This yang-data MUST be used if hints are to be\n         provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base sn:modify-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be modified.\";\n      }\n      uses hints;\n    }\n  }\n\n  feature on-change {\n    description\n      \"This feature indicates that on-change triggered subscriptions\n       are supported.\";\n  }\n\n  identity resync-subscription-error {\n    description\n      \"Problem found while attempting to fulfill a\n       'resync-subscription' RPC request.\";\n  }\n\n  identity cant-exclude {\n    base sn:establish-subscription-error;\n    description\n      \"Unable to remove the set of 'excluded-change' parameters.\n       This means that the publisher is unable to restrict\n       'push-change-update' notifications to just the change types\n       requested for this subscription.\";\n  }\n\n  identity datastore-not-subscribable {\n    base sn:establish-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"This is not a subscribable datastore.\";\n  }\n\n  identity no-such-subscription-resync {\n    base resync-subscription-error;\n    description\n      \"The referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity on-change-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"On-change is not supported for any objects that are\n       selectable by this filter.\";\n  }\n\n  identity on-change-sync-unsupported {\n    base sn:establish-subscription-error;\n    description\n      \"Neither 'sync-on-start' nor resynchronization is supported for\n       this subscription.  This error will be used for two reasons:\n       (1) if an 'establish-subscription' RPC includes\n       'sync-on-start' but the publisher can't support sending a\n       'push-update' for this subscription for reasons other than\n       'on-change-unsupported' or 'sync-too-big'\n       (2) if the 'resync-subscription' RPC is invoked for either an\n       existing periodic subscription or an on-change subscription\n       that can't support resynchronization.\";\n  }\n\n  identity period-unsupported {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The requested time period or 'dampening-period' is too short.\n       This can be for both periodic and on-change subscriptions\n       (with or without dampening).  Hints suggesting alternative\n       periods may be returned as supplemental information.\";\n  }\n\n  identity update-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"Periodic or on-change push update data trees exceed a maximum\n       size limit.  Hints on the estimated size of what was too big\n       may be returned as supplemental information.\";\n  }\n\n  identity sync-too-big {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base resync-subscription-error;\n    base sn:subscription-suspended-reason;\n    description\n      \"The 'sync-on-start' or resynchronization data tree exceeds a\n       maximum size limit.  Hints on the estimated size of what was\n       too big may be returned as supplemental information.\";\n  }\n\n  identity unchanging-selection {\n    base sn:establish-subscription-error;\n    base sn:modify-subscription-error;\n    base sn:subscription-terminated-reason;\n    description\n      \"The selection filter is unlikely to ever select data tree\n       nodes.  This means that based on the subscriber's current\n       access rights, the publisher recognizes that the selection\n       filter is unlikely to ever select data tree nodes that change.\n       Examples for this might be that the node or subtree doesn't\n       exist, read access is not permitted for a receiver, or static\n       objects that only change at reboot have been chosen.\";\n  }\n\n  typedef change-type {\n    type enumeration {\n      enum \"create\" {\n        description\n          \"A change that refers to the creation of a new\n           datastore node.\";\n      }\n      enum \"delete\" {\n        description\n          \"A change that refers to the deletion of a\n           datastore node.\";\n      }\n      enum \"insert\" {\n        description\n          \"A change that refers to the insertion of a new\n           user-ordered datastore node.\";\n      }\n      enum \"move\" {\n        description\n          \"A change that refers to a reordering of the target\n           datastore node.\";\n      }\n      enum \"replace\" {\n        description\n          \"A change that refers to a replacement of the target\n           datastore node's value.\";\n      }\n    }\n    description\n      \"Specifies different types of datastore changes.\n\n       This type is based on the edit operations defined for\n       YANG Patch, with the difference that it is valid for a\n       receiver to process an update record that performs a\n       'create' operation on a datastore node the receiver believes\n       exists or to process a delete on a datastore node the\n       receiver believes is missing.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type, Section 2.5\";\n  }\n\n  typedef selection-filter-ref {\n    type leafref {\n      path \"/sn:filters/yp:selection-filter/yp:filter-id\";\n    }\n    description\n      \"This type is used to reference a selection filter.\";\n  }\n\n  typedef centiseconds {\n    type uint32;\n    description\n      \"A period of time, measured in units of 0.01 seconds.\";\n  }\n\n  grouping datastore-criteria {\n    description\n      \"A grouping to define criteria for which selected objects from\n       a targeted datastore should be included in push updates.\";\n    leaf datastore {\n      type identityref {\n        base ds:datastore;\n      }\n      mandatory true;\n      description\n        \"Datastore from which to retrieve data.\";\n    }\n    uses selection-filter-objects;\n  }\n\n  grouping selection-filter-types {\n    description\n      \"This grouping defines the types of selectors for objects\n       from a datastore.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata datastore-subtree-filter {\n        if-feature \"sn:subtree\";\n        description\n          \"This parameter identifies the portions of the\n           target datastore to retrieve.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf datastore-xpath-filter {\n        if-feature \"sn:xpath\";\n        type yang:xpath1.0;\n        description\n          \"This parameter contains an XPath expression identifying\n           the portions of the target datastore to retrieve.\n\n           If the expression returns a node set, all nodes in the\n           node set are selected by the filter.  Otherwise, if the\n           expression does not return a node set, the filter\n           doesn't select any nodes.\n\n           The expression is evaluated in the following XPath\n           context:\n\n           o  The set of namespace declarations is the set of prefix\n              and namespace pairs for all YANG modules implemented\n              by the server, where the prefix is the YANG module\n              name and the namespace is as defined by the\n              'namespace' statement in the YANG module.\n\n              If the leaf is encoded in XML, all namespace\n              declarations in scope on the 'stream-xpath-filter'\n              leaf element are added to the set of namespace\n              declarations.  If a prefix found in the XML is\n              already present in the set of namespace declarations,\n              the namespace in the XML is used.\n\n           o  The set of variable bindings is empty.\n\n           o  The function library is comprised of the core\n              function library and the XPath functions defined in\n              Section 10 in RFC 7950.\n\n           o  The context node is the root node of the target\n              datastore.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping selection-filter-objects {\n    description\n      \"This grouping defines a selector for objects from a\n       datastore.\";\n    choice selection-filter {\n      description\n        \"The source of the selection filter applied to the\n         subscription.  This will either (1) come referenced from a\n         global list or (2) be provided in the subscription itself.\";\n      case by-reference {\n        description\n          \"Incorporates a filter that has been configured\n           separately.\";\n        leaf selection-filter-ref {\n          type selection-filter-ref;\n          mandatory true;\n          description\n            \"References an existing selection filter that is to be\n             applied to the subscription.\";\n        }\n      }\n      case within-subscription {\n        description\n          \"A local definition allows a filter to have the same\n           lifecycle as the subscription.\";\n        uses selection-filter-types;\n      }\n    }\n  }\n\n  grouping update-policy-modifiable {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions that can be changed during the lifetime of the\n       subscription.\";\n    choice update-trigger {\n      description\n        \"Defines necessary conditions for sending an event record to\n         the subscriber.\";\n      case periodic {\n        container periodic {\n          presence \"indicates a periodic subscription\";\n          description\n            \"The publisher is requested to periodically notify the\n             receiver regarding the current values of the datastore\n             as defined by the selection filter.\";\n          leaf period {\n            type centiseconds;\n            mandatory true;\n            description\n              \"Duration of time that should occur between periodic\n               push updates, in units of 0.01 seconds.\";\n          }\n          leaf anchor-time {\n            type yang:date-and-time;\n            description\n              \"Designates a timestamp before or after which a series\n               of periodic push updates are determined.  The next\n               update will take place at a point in time that is a\n               multiple of a period from the 'anchor-time'.\n               For example, for an 'anchor-time' that is set for the\n               top of a particular minute and a period interval of a\n               minute, updates will be sent at the top of every\n               minute that this subscription is active.\";\n          }\n        }\n      }\n      case on-change {\n        if-feature \"on-change\";\n        container on-change {\n          presence \"indicates an on-change subscription\";\n          description\n            \"The publisher is requested to notify the receiver\n             regarding changes in values in the datastore subset as\n             defined by a selection filter.\";\n          leaf dampening-period {\n            type centiseconds;\n            default \"0\";\n            description\n              \"Specifies the minimum interval between the assembly of\n               successive update records for a single receiver of a\n               subscription.  Whenever subscribed objects change and\n               a dampening-period interval (which may be zero) has\n               elapsed since the previous update record creation for\n               a receiver, any subscribed objects and properties\n               that have changed since the previous update record\n               will have their current values marshalled and placed\n               in a new update record.\";\n          }\n        }\n      }\n    }\n  }\n\n  grouping update-policy {\n    description\n      \"This grouping describes the datastore-specific subscription\n       conditions of a subscription.\";\n    uses update-policy-modifiable {\n      augment \"update-trigger/on-change/on-change\" {\n        description\n          \"Includes objects that are not modifiable once a\n           subscription is established.\";\n        leaf sync-on-start {\n          type boolean;\n          default \"true\";\n          description\n            \"When this object is set to 'false', (1) it restricts an\n             on-change subscription from sending 'push-update'\n             notifications and (2) pushing a full selection per the\n             terms of the selection filter MUST NOT be done for\n             this subscription.  Only updates about changes\n             (i.e., only 'push-change-update' notifications)\n             are sent.  When set to 'true' (the default behavior),\n             in order to facilitate a receiver's synchronization,\n             a full update is sent, via a 'push-update' notification,\n             when the subscription starts.  After that,\n             'push-change-update' notifications are exclusively sent,\n             unless the publisher chooses to resync the subscription\n             via a new 'push-update' notification.\";\n        }\n        leaf-list excluded-change {\n          type change-type;\n          description\n            \"Used to restrict which changes trigger an update.  For\n             example, if a 'replace' operation is excluded, only the\n             creation and deletion of objects are reported.\";\n        }\n      }\n    }\n  }\n\n  grouping hints {\n    description\n      \"Parameters associated with an error for a subscription\n       made upon a datastore.\";\n    leaf period-hint {\n      type centiseconds;\n      description\n        \"Returned when the requested time period is too short.  This\n         hint can assert a viable period for either a periodic push\n         cadence or an on-change dampening interval.\";\n    }\n    leaf filter-failure-hint {\n      type string;\n      description\n        \"Information describing where and/or why a provided filter\n         was unsupportable for a subscription.\";\n    }\n    leaf object-count-estimate {\n      type uint32;\n      description\n        \"If there are too many objects that could potentially be\n         returned by the selection filter, this identifies the\n         estimate of the number of objects that the filter would\n         potentially pass.\";\n    }\n    leaf object-count-limit {\n      type uint32;\n      description\n        \"If there are too many objects that could be returned by\n         the selection filter, this identifies the upper limit of\n         the publisher's ability to service this subscription.\";\n    }\n    leaf kilobytes-estimate {\n      type uint32;\n      description\n        \"If the returned information could be beyond the capacity\n         of the publisher, this would identify the estimated\n         data size that could result from this selection filter.\";\n    }\n    leaf kilobytes-limit {\n      type uint32;\n      description\n        \"If the returned information would be beyond the capacity\n         of the publisher, this identifies the upper limit of the\n         publisher's ability to service this subscription.\";\n    }\n  }\n\n  augment \"/sn:establish-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       that apply specifically to datastore updates to RPC input.\";\n    uses update-policy;\n  }\n  augment \"/sn:establish-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:modify-subscription/sn:input\" {\n    description\n      \"This augmentation adds additional subscription parameters\n       specific to datastore updates.\";\n    uses update-policy-modifiable;\n  }\n  augment \"/sn:modify-subscription/sn:input/sn:target\" {\n    description\n      \"This augmentation adds the datastore as a valid target\n       for the subscription to RPC input.\";\n    case datastore {\n      description\n        \"Information specifying the parameters of a request for a\n         datastore subscription.\";\n      uses datastore-criteria;\n    }\n  }\n  augment \"/sn:subscription-started\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has started.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-started/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has started.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:subscription-modified\" {\n    description\n      \"This augmentation adds datastore-specific objects to\n       the notification that a subscription has been modified.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscription-modified/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the notification that a subscription has been\n       modified.\";\n    case datastore {\n      uses datastore-criteria {\n        refine \"selection-filter/within-subscription\" {\n          description\n            \"Specifies the selection filter and where it originated\n             from.  If the 'selection-filter-ref' is populated, the\n             filter in the subscription came from the 'filters'\n             container.  Otherwise, it is populated in-line as part\n             of the subscription itself.\";\n        }\n      }\n    }\n  }\n  augment \"/sn:filters\" {\n    description\n      \"This augmentation allows the datastore to be included as part\n       of the selection-filtering criteria for a subscription.\";\n    list selection-filter {\n      key \"filter-id\";\n      description\n        \"A list of preconfigured filters that can be applied\n         to datastore subscriptions.\";\n      leaf filter-id {\n        type string;\n        description\n          \"An identifier to differentiate between selection\n           filters.\";\n      }\n      uses selection-filter-types;\n    }\n  }\n  augment \"/sn:subscriptions/sn:subscription\" {\n    when \"yp:datastore\";\n    description\n      \"This augmentation adds objects to a subscription that are\n       specific to a datastore subscription, i.e., a subscription to\n       a stream of datastore node updates.\";\n    uses update-policy;\n  }\n  augment \"/sn:subscriptions/sn:subscription/sn:target\" {\n    description\n      \"This augmentation allows the datastore to be included as\n       part of the selection-filtering criteria for a subscription.\";\n    case datastore {\n      uses datastore-criteria;\n    }\n  }\n\n  rpc resync-subscription {\n    if-feature \"on-change\";\n    description\n      \"This RPC allows a subscriber of an active on-change\n       subscription to request a full push of objects.\n\n       A successful invocation results in a 'push-update' of all\n       datastore nodes that the subscriber is permitted to access.\n       This RPC can only be invoked on the same session on which the\n       subscription is currently active.  In the case of an error, a\n       'resync-subscription-error' is sent as part of an error\n       response.\";\n\n    input {\n      leaf id {\n        type sn:subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be resynced.\";\n      }\n    }\n  }\n\n  notification push-update {\n    description\n      \"This notification contains a push update that in turn contains\n       data subscribed to via a subscription.  In the case of a\n       periodic subscription, this notification is sent for periodic\n       updates.  It can also be used for synchronization updates of\n       an on-change subscription.  This notification shall only be\n       sent to receivers of a subscription.  It does not constitute\n       a general-purpose notification that would be subscribable as\n       part of the NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    anydata datastore-contents {\n      description\n        \"This contains the updated data.  It constitutes a snapshot\n         at the time of update of the set of data that has been\n         subscribed to.  The snapshot corresponds to the same\n         snapshot that would be returned in a corresponding 'get'\n         operation with the same selection filter parameters\n         applied.\";\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"This is a flag that indicates that not all datastore\n         nodes subscribed to are included with this update.  In\n         other words, the publisher has failed to fulfill its full\n         subscription obligations and, despite its best efforts, is\n         providing an incomplete set of objects.\";\n    }\n  }\n  notification push-change-update {\n    if-feature \"on-change\";\n    description\n      \"This notification contains an on-change push update.  This\n       notification shall only be sent to the receivers of a\n       subscription.  It does not constitute a general-purpose\n       notification that would be subscribable as part of the\n       NETCONF event stream by any receiver.\";\n    leaf id {\n      type sn:subscription-id;\n      description\n        \"This references the subscription that drove the\n         notification to be sent.\";\n    }\n    container datastore-changes {\n      description\n        \"This contains the set of datastore changes of the target\n         datastore, starting at the time of the previous update, per\n         the terms of the subscription.\";\n      uses ypatch:yang-patch;\n    }\n    leaf incomplete-update {\n      type empty;\n      description\n        \"The presence of this object indicates that not all changes\n         that have occurred since the last update are included with\n         this update.  In other words, the publisher has failed to\n         fulfill its full subscription obligations -- for example,\n         in cases where it was not able to keep up with a burst of\n         changes.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types-subject",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-subscribed-notifications",
              "subject": "ietf-subscribed-notifications-subject",
              "schema": "module ietf-subscribed-notifications {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-subscribed-notifications\";\n  prefix sn;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-network-instance {\n    prefix ni;\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances\";\n  }\n  import ietf-restconf {\n    prefix rc;\n    reference\n      \"RFC 8040: RESTCONF Protocol\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:  &lt;https:/datatracker.ietf.org/wg/netconf/&gt;\n     WG List: &lt;mailto:netconf@ietf.org&gt;\n\n     Author:  Alexander Clemm\n              &lt;mailto:ludwig@clemm.org&gt;\n\n     Author:  Eric Voit\n              &lt;mailto:evoit@cisco.com&gt;\n\n     Author:  Alberto Gonzalez Prieto\n              &lt;mailto:alberto.gonzalez@microsoft.com&gt;\n\n     Author:  Einar Nilsen-Nygaard\n              &lt;mailto:einarnn@cisco.com&gt;\n\n     Author:  Ambika Prasad Tripathy\n              &lt;mailto:ambtripa@cisco.com&gt;\";\n  description\n    \"This module defines a YANG data model for subscribing to event\n     records and receiving matching content in notification messages.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8639; see the\n     RFC itself for full legal notices.\";\n\n  revision 2019-09-09 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 8639: A YANG Data Model for Subscriptions to\n                 Event Notifications\";\n  }\n\n  extension subscription-state-notification {\n    description\n      \"This statement applies only to notifications.  It indicates\n       that the notification is a subscription state change\n       notification.  Therefore, it does not participate in a regular\n       event stream and does not need to be specifically subscribed\n       to in order to be received.  This statement can only occur as\n       a substatement of the YANG 'notification' statement.  This\n       statement is not for use outside of this YANG module.\";\n  }\n\n  rc:yang-data \"establish-subscription-stream-error-info\" {\n    container establish-subscription-stream-error-info {\n      description\n        \"If any 'establish-subscription' RPC parameters are\n         unsupportable against the event stream, a subscription\n         is not created and the RPC error response MUST indicate the\n         reason why the subscription failed to be created.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason for\n         the failure.  This yang-data MUST be inserted if hints are\n         to be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base establish-subscription-error;\n        }\n        description\n          \"Indicates the reason why the subscription has failed to\n           be created to a targeted event stream.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The\n           syntax and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"modify-subscription-stream-error-info\" {\n    container modify-subscription-stream-error-info {\n      description\n        \"This yang-data MAY be provided as part of a subscription's\n         RPC error response when there is a failure of a\n         'modify-subscription' RPC that has been made against an\n         event stream.  This yang-data MUST be used if hints are to\n         be provided back to the subscriber.\";\n      leaf reason {\n        type identityref {\n          base modify-subscription-error;\n        }\n        description\n          \"Information in a 'modify-subscription' RPC error response\n           that indicates the reason why the subscription to an event\n           stream has failed to be modified.\";\n      }\n      leaf filter-failure-hint {\n        type string;\n        description\n          \"Information describing where and/or why a provided\n           filter was unsupportable for a subscription.  The syntax\n           and semantics of this hint are\n           implementation specific.\";\n      }\n    }\n  }\n  rc:yang-data \"delete-subscription-error-info\" {\n    container delete-subscription-error-info {\n      description\n        \"If a 'delete-subscription' RPC or a 'kill-subscription' RPC\n         fails, the subscription is not deleted and the RPC error\n         response MUST indicate the reason for this failure.  This\n         yang-data MAY be inserted as structured data in a\n         subscription's RPC error response to indicate the reason\n         for the failure.\";\n      leaf reason {\n        type identityref {\n          base delete-subscription-error;\n        }\n        mandatory true;\n        description\n          \"Indicates the reason why the subscription has failed to be\n           deleted.\";\n      }\n    }\n  }\n\n  feature configured {\n    description\n      \"This feature indicates that configuration of subscriptions is\n       supported.\";\n  }\n\n  feature dscp {\n    description\n      \"This feature indicates that a publisher supports the ability\n       to set the Differentiated Services Code Point (DSCP) value in\n       outgoing packets.\";\n  }\n\n  feature encode-json {\n    description\n      \"This feature indicates that JSON encoding of notification\n       messages is supported.\";\n  }\n\n  feature encode-xml {\n    description\n      \"This feature indicates that XML encoding of notification\n       messages is supported.\";\n  }\n\n  feature interface-designation {\n    description\n      \"This feature indicates that a publisher supports sourcing all\n       receiver interactions for a configured subscription from a\n       single designated egress interface.\";\n  }\n\n  feature qos {\n    description\n      \"This feature indicates that a publisher supports absolute\n       dependencies of one subscription's traffic over another\n       as well as weighted bandwidth sharing between subscriptions.\n       Both of these are Quality of Service (QoS) features that allow\n       differentiated treatment of notification messages between a\n       publisher and a specific receiver.\";\n  }\n\n  feature replay {\n    description\n      \"This feature indicates that historical event record replay is\n       supported.  With replay, it is possible for past event records\n       to be streamed in chronological order.\";\n  }\n\n  feature subtree {\n    description\n      \"This feature indicates support for YANG subtree filtering.\";\n    reference\n      \"RFC 6241: Network Configuration Protocol (NETCONF),\n                 Section 6\";\n  }\n\n  feature supports-vrf {\n    description\n      \"This feature indicates that a publisher supports VRF\n       configuration for configured subscriptions.  VRF support for\n       dynamic subscriptions does not require this feature.\";\n    reference\n      \"RFC 8529: YANG Data Model for Network Instances,\n                 Section 6\";\n  }\n\n  feature xpath {\n    description\n      \"This feature indicates support for XPath filtering.\";\n    reference\n      \"XML Path Language (XPath) Version 1.0\n       (https://www.w3.org/TR/1999/REC-xpath-19991116)\";\n  }\n\n  identity delete-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill either a 'delete-subscription' RPC request or a\n       'kill-subscription' RPC request.\";\n  }\n\n  identity establish-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill an 'establish-subscription' RPC request.\";\n  }\n\n  identity modify-subscription-error {\n    description\n      \"Base identity for the problem found while attempting to\n       fulfill a 'modify-subscription' RPC request.\";\n  }\n\n  identity subscription-suspended-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-suspended'\n       notification.\";\n  }\n\n  identity subscription-terminated-reason {\n    description\n      \"Base identity for the problem condition communicated to a\n       receiver as part of a 'subscription-terminated'\n       notification.\";\n  }\n\n  identity dscp-unavailable {\n    if-feature \"dscp\";\n    base establish-subscription-error;\n    description\n      \"The publisher is unable to mark notification messages with\n       prioritization information in a way that will be respected\n       during network transit.\";\n  }\n\n  identity encoding-unsupported {\n    base establish-subscription-error;\n    description\n      \"Unable to encode notification messages in the desired\n       format.\";\n  }\n\n  identity filter-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Referenced filter does not exist.  This means a receiver is\n       referencing a filter that doesn't exist or to which it\n       does not have access permissions.\";\n  }\n\n  identity filter-unsupported {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    description\n      \"Cannot parse syntax in the filter.  This failure can be from\n       a syntax error or a syntax too complex to be processed by the\n       publisher.\";\n  }\n\n  identity insufficient-resources {\n    base establish-subscription-error;\n    base modify-subscription-error;\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have sufficient resources to support\n       the requested subscription.  An example might be that\n       allocated CPU is too limited to generate the desired set of\n       notification messages.\";\n  }\n\n  identity no-such-subscription {\n    base modify-subscription-error;\n    base delete-subscription-error;\n    base subscription-terminated-reason;\n    description\n      \"Referenced subscription doesn't exist.  This may be as a\n       result of a nonexistent subscription ID, an ID that belongs to\n       another subscriber, or an ID for a configured subscription.\";\n  }\n\n  identity replay-unsupported {\n    if-feature \"replay\";\n    base establish-subscription-error;\n    description\n      \"Replay cannot be performed for this subscription.  This means\n       the publisher will not provide the requested historic\n       information from the event stream via replay to this\n       receiver.\";\n  }\n\n  identity stream-unavailable {\n    base subscription-terminated-reason;\n    description\n      \"Not a subscribable event stream.  This means the referenced\n       event stream is not available for subscription by the\n       receiver.\";\n  }\n\n  identity suspension-timeout {\n    base subscription-terminated-reason;\n    description\n      \"Termination of a previously suspended subscription.  The\n       publisher has eliminated the subscription, as it exceeded a\n       time limit for suspension.\";\n  }\n\n  identity unsupportable-volume {\n    base subscription-suspended-reason;\n    description\n      \"The publisher does not have the network bandwidth needed to\n       get the volume of generated information intended for a\n       receiver.\";\n  }\n\n  identity configurable-encoding {\n    description\n      \"If a transport identity derives from this identity, it means\n       that it supports configurable encodings.  An example of a\n       configurable encoding might be a new identity such as\n       'encode-cbor'.  Such an identity could use\n       'configurable-encoding' as its base.  This would allow a\n       dynamic subscription encoded in JSON (RFC 8259) to request\n       that notification messages be encoded via the Concise Binary\n       Object Representation (CBOR) (RFC 7049).  Further details for\n       any specific configurable encoding would be explored in a\n       transport document based on this specification.\";\n    reference\n      \"RFC 8259: The JavaScript Object Notation (JSON) Data\n                 Interchange Format\n       RFC 7049: Concise Binary Object Representation (CBOR)\";\n  }\n\n  identity encoding {\n    description\n      \"Base identity to represent data encodings.\";\n  }\n\n  identity encode-xml {\n    if-feature \"encode-xml\";\n    base encoding;\n    description\n      \"Encode data using XML as described in RFC 7950.\";\n    reference\n      \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n  }\n\n  identity encode-json {\n    if-feature \"encode-json\";\n    base encoding;\n    description\n      \"Encode data using JSON as described in RFC 7951.\";\n    reference\n      \"RFC 7951: JSON Encoding of Data Modeled with YANG\";\n  }\n\n  identity transport {\n    description\n      \"An identity that represents the underlying mechanism for\n       passing notification messages.\";\n  }\n\n  typedef encoding {\n    type identityref {\n      base encoding;\n    }\n    description\n      \"Specifies a data encoding, e.g., for a data subscription.\";\n  }\n\n  typedef stream-filter-ref {\n    type leafref {\n      path \"/sn:filters/sn:stream-filter/sn:name\";\n    }\n    description\n      \"This type is used to reference an event stream filter.\";\n  }\n\n  typedef stream-ref {\n    type leafref {\n      path \"/sn:streams/sn:stream/sn:name\";\n    }\n    description\n      \"This type is used to reference a system-provided\n       event stream.\";\n  }\n\n  typedef subscription-id {\n    type uint32;\n    description\n      \"A type for subscription identifiers.\";\n  }\n\n  typedef transport {\n    type identityref {\n      base transport;\n    }\n    description\n      \"Specifies the transport used to send notification messages\n       to a receiver.\";\n  }\n\n  grouping stream-filter-elements {\n    description\n      \"This grouping defines the base for filters applied to event\n       streams.\";\n    choice filter-spec {\n      description\n        \"The content filter specification for this request.\";\n      anydata stream-subtree-filter {\n        if-feature \"subtree\";\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           a subtree filter as defined in RFC 6241, Section 6.\n\n           The subtree filter is applied to the representation of\n           individual, delineated event records as contained in the\n           event stream.\n\n           If the subtree filter returns a non-empty node set, the\n           filter matches the event record, and the event record is\n           included in the notification message sent to the\n           receivers.\";\n        reference\n          \"RFC 6241: Network Configuration Protocol (NETCONF),\n                     Section 6\";\n      }\n      leaf stream-xpath-filter {\n        if-feature \"xpath\";\n        type yang:xpath1.0;\n        description\n          \"Event stream evaluation criteria encoded in the syntax of\n           an XPath 1.0 expression.\n\n           The XPath expression is evaluated on the representation of\n           individual, delineated event records as contained in\n           the event stream.\n\n           The result of the XPath expression is converted to a\n           boolean value using the standard XPath 1.0 rules.  If the\n           boolean value is 'true', the filter matches the event\n           record, and the event record is included in the\n           notification message sent to the receivers.\n\n           The expression is evaluated in the following XPath\n           context:\n\n              o  The set of namespace declarations is the set of\n                 prefix and namespace pairs for all YANG modules\n                 implemented by the server, where the prefix is the\n                 YANG module name and the namespace is as defined by\n                 the 'namespace' statement in the YANG module.\n\n                 If the leaf is encoded in XML, all namespace\n                 declarations in scope on the 'stream-xpath-filter'\n                 leaf element are added to the set of namespace\n                 declarations.  If a prefix found in the XML is\n                 already present in the set of namespace\n                 declarations, the namespace in the XML is used.\n\n              o  The set of variable bindings is empty.\n\n              o  The function library is comprised of the core\n                 function library and the XPath functions defined in\n                 Section 10 in RFC 7950.\n\n              o  The context node is the root node.\";\n        reference\n          \"XML Path Language (XPath) Version 1.0\n           (https://www.w3.org/TR/1999/REC-xpath-19991116)\n           RFC 7950: The YANG 1.1 Data Modeling Language,\n                     Section 10\";\n      }\n    }\n  }\n\n  grouping update-qos {\n    description\n      \"This grouping describes QoS information concerning a\n       subscription.  This information is passed to lower layers\n       for transport prioritization and treatment.\";\n    leaf dscp {\n      if-feature \"dscp\";\n      type inet:dscp;\n      default \"0\";\n      description\n        \"The desired network transport priority level.  This is the\n         priority set on notification messages encapsulating the\n         results of the subscription.  This transport priority is\n         shared for all receivers of a given subscription.\";\n    }\n    leaf weighting {\n      if-feature \"qos\";\n      type uint8 {\n        range \"0 .. 255\";\n      }\n      description\n        \"Relative weighting for a subscription.  Larger weights get\n         more resources.  Allows an underlying transport layer to\n         perform informed load-balance allocations between various\n         subscriptions.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.2\";\n    }\n    leaf dependency {\n      if-feature \"qos\";\n      type subscription-id;\n      description\n        \"Provides the 'subscription-id' of a parent subscription.\n         The parent subscription has absolute precedence should\n         that parent have push updates ready to egress the publisher.\n         In other words, there should be no streaming of objects from\n         the current subscription if the parent has something ready\n         to push.\n\n         If a dependency is asserted via configuration or via an RPC\n         but the referenced 'subscription-id' does not exist, the\n         dependency is silently discarded.  If a referenced\n         subscription is deleted, this dependency is removed.\";\n      reference\n        \"RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2),\n                   Section 5.3.1\";\n    }\n  }\n\n  grouping subscription-policy-modifiable {\n    description\n      \"This grouping describes all objects that may be changed\n       in a subscription.\";\n    choice target {\n      mandatory true;\n      description\n        \"Identifies the source of information against which a\n         subscription is being applied as well as specifics on the\n         subset of information desired from that source.\";\n      case stream {\n        choice stream-filter {\n          description\n            \"An event stream filter can be applied to a subscription.\n             That filter will either come referenced from a global\n             list or be provided in the subscription itself.\";\n          case by-reference {\n            description\n              \"Apply a filter that has been configured separately.\";\n            leaf stream-filter-name {\n              type stream-filter-ref;\n              mandatory true;\n              description\n                \"References an existing event stream filter that is\n                 to be applied to an event stream for the\n                 subscription.\";\n            }\n          }\n          case within-subscription {\n            description\n              \"A local definition allows a filter to have the same\n               lifecycle as the subscription.\";\n            uses stream-filter-elements;\n          }\n        }\n      }\n    }\n    leaf stop-time {\n      type yang:date-and-time;\n      description\n        \"Identifies a time after which notification messages for a\n         subscription should not be sent.  If 'stop-time' is not\n         present, the notification messages will continue until the\n         subscription is terminated.  If 'replay-start-time' exists,\n         'stop-time' must be for a subsequent time.  If\n         'replay-start-time' doesn't exist, 'stop-time', when\n         established, must be for a future time.\";\n    }\n  }\n\n  grouping subscription-policy-dynamic {\n    description\n      \"This grouping describes the only information concerning a\n       subscription that can be passed over the RPCs defined in this\n       data model.\";\n    uses subscription-policy-modifiable {\n      augment \"target/stream\" {\n        description\n          \"Adds additional objects that can be modified by an RPC.\";\n        leaf stream {\n          type stream-ref {\n            require-instance false;\n          }\n          mandatory true;\n          description\n            \"Indicates the event stream to be considered for\n             this subscription.\";\n        }\n        leaf replay-start-time {\n          if-feature \"replay\";\n          type yang:date-and-time;\n          config false;\n          description\n            \"Used to trigger the 'replay' feature for a dynamic\n             subscription, where event records that are selected\n             need to be at or after the specified starting time.  If\n             'replay-start-time' is not present, this is not a replay\n             subscription and event record push should start\n             immediately.  It is never valid to specify start times\n             that are later than or equal to the current time.\";\n        }\n      }\n    }\n    uses update-qos;\n  }\n\n  grouping subscription-policy {\n    description\n      \"This grouping describes the full set of policy information\n       concerning both dynamic and configured subscriptions, with the\n       exclusion of both receivers and networking information\n       specific to the publisher, such as what interface should be\n       used to transmit notification messages.\";\n    uses subscription-policy-dynamic;\n    leaf transport {\n      if-feature \"configured\";\n      type transport;\n      description\n        \"For a configured subscription, this leaf specifies the\n         transport used to deliver messages destined for all\n         receivers of that subscription.\";\n    }\n    leaf encoding {\n      when \"not(../transport) or derived-from(../transport,\n        \\\"sn:configurable-encoding\\\")\";\n      type encoding;\n      description\n        \"The type of encoding for notification messages.  For a\n         dynamic subscription, if not included as part of an\n         'establish-subscription' RPC, the encoding will be populated\n         with the encoding used by that RPC.  For a configured\n         subscription, if not explicitly configured, the encoding\n         will be the default encoding for an underlying transport.\";\n    }\n    leaf purpose {\n      if-feature \"configured\";\n      type string;\n      description\n        \"Open text allowing a configuring entity to embed the\n         originator or other specifics of this subscription.\";\n    }\n  }\n\n  container streams {\n    config false;\n    description\n      \"Contains information on the built-in event streams provided by\n       the publisher.\";\n    list stream {\n      key \"name\";\n      description\n        \"Identifies the built-in event streams that are supported by\n         the publisher.\";\n      leaf name {\n        type string;\n        description\n          \"A handle for a system-provided event stream made up of a\n           sequential set of event records, each of which is\n           characterized by its own domain and semantics.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A description of the event stream, including such\n           information as the type of event records that are\n           available in this event stream.\";\n      }\n      leaf replay-support {\n        if-feature \"replay\";\n        type empty;\n        description\n          \"Indicates that event record replay is available on this\n           event stream.\";\n      }\n      leaf replay-log-creation-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"The timestamp of the creation of the log used to support\n           the replay function on this event stream.  This time\n           might be earlier than the earliest available information\n           contained in the log.  This object is updated if the log\n           resets for some reason.\";\n      }\n      leaf replay-log-aged-time {\n        when \"../replay-support\";\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"The timestamp associated with the last event record that\n           has been aged out of the log.  This timestamp identifies\n           how far back in history this replay log extends, if it\n           doesn't extend back to the 'replay-log-creation-time'.\n           This object MUST be present if replay is supported and any\n           event records have been aged out of the log.\";\n      }\n    }\n  }\n  container filters {\n    description\n      \"Contains a list of configurable filters that can be applied to\n       subscriptions.  This facilitates the reuse of complex filters\n       once defined.\";\n    list stream-filter {\n      key \"name\";\n      description\n        \"A list of preconfigured filters that can be applied to\n         subscriptions.\";\n      leaf name {\n        type string;\n        description\n          \"A name to differentiate between filters.\";\n      }\n      uses stream-filter-elements;\n    }\n  }\n  container subscriptions {\n    description\n      \"Contains the list of currently active subscriptions, i.e.,\n       subscriptions that are currently in effect, used for\n       subscription management and monitoring purposes.  This\n       includes subscriptions that have been set up via\n       RPC primitives as well as subscriptions that have been\n       established via configuration.\";\n    list subscription {\n      key \"id\";\n      description\n        \"The identity and specific parameters of a subscription.\n         Subscriptions in this list can be created using a control\n         channel or RPC or can be established through configuration.\n\n         If the 'kill-subscription' RPC or configuration operations\n         are used to delete a subscription, a\n         'subscription-terminated' message is sent to any active or\n         suspended receivers.\";\n      leaf id {\n        type subscription-id;\n        description\n          \"Identifier of a subscription; unique in a given\n           publisher.\";\n      }\n      uses subscription-policy {\n        refine \"target/stream/stream\" {\n          description\n            \"Indicates the event stream to be considered for this\n             subscription.  If an event stream has been removed\n             and can no longer be referenced by an active\n             subscription, send a 'subscription-terminated'\n             notification with 'stream-unavailable' as the reason.\n             If a configured subscription refers to a nonexistent\n             event stream, move that subscription to the\n             'invalid' state.\";\n        }\n        refine \"transport\" {\n          description\n            \"For a configured subscription, this leaf specifies the\n             transport used to deliver messages destined for all\n             receivers of that subscription.  This object is\n             mandatory for subscriptions in the configuration\n             datastore.  This object (1) is not mandatory for dynamic\n             subscriptions in the operational state datastore and\n             (2) should not be present for other types of dynamic\n             subscriptions.\";\n        }\n        augment \"target/stream\" {\n          description\n            \"Enables objects to be added to a configured stream\n             subscription.\";\n          leaf configured-replay {\n            if-feature \"configured\";\n            if-feature \"replay\";\n            type empty;\n            description\n              \"The presence of this leaf indicates that replay for\n               the configured subscription should start at the\n               earliest time in the event log or at the publisher\n               boot time, whichever is later.\";\n          }\n        }\n      }\n      choice notification-message-origin {\n        if-feature \"configured\";\n        description\n          \"Identifies the egress interface on the publisher\n           from which notification messages are to be sent.\";\n        case interface-originated {\n          description\n            \"When notification messages are to egress a specific,\n             designated interface on the publisher.\";\n          leaf source-interface {\n            if-feature \"interface-designation\";\n            type if:interface-ref;\n            description\n              \"References the interface for notification messages.\";\n          }\n        }\n        case address-originated {\n          description\n            \"When notification messages are to depart from a\n             publisher using a specific originating address and/or\n             routing context information.\";\n          leaf source-vrf {\n            if-feature \"supports-vrf\";\n            type leafref {\n              path \"/ni:network-instances/ni:network-instance/ni:name\";\n            }\n            description\n              \"VRF from which notification messages should egress a\n               publisher.\";\n          }\n          leaf source-address {\n            type inet:ip-address-no-zone;\n            description\n              \"The source address for the notification messages.\n               If a source VRF exists but this object doesn't, a\n               publisher's default address for that VRF must\n               be used.\";\n          }\n        }\n      }\n      leaf configured-subscription-state {\n        if-feature \"configured\";\n        type enumeration {\n          enum \"valid\" {\n            value 1;\n            description\n              \"The subscription is supportable with its current\n               parameters.\";\n          }\n          enum \"invalid\" {\n            value 2;\n            description\n              \"The subscription as a whole is unsupportable with its\n               current parameters.\";\n          }\n          enum \"concluded\" {\n            value 3;\n            description\n              \"A subscription is inactive, as it has hit a\n               stop time.  It no longer has receivers in the\n               'active' or 'suspended' state, but the subscription\n               has not yet been removed from configuration.\";\n          }\n        }\n        config false;\n        description\n          \"The presence of this leaf indicates that the subscription\n           originated from configuration, not through a control\n           channel or RPC.  The value indicates the state of the\n           subscription as established by the publisher.\";\n      }\n      container receivers {\n        description\n          \"Set of receivers in a subscription.\";\n        list receiver {\n          key \"name\";\n          min-elements 1;\n          description\n            \"A host intended as a recipient for the notification\n             messages of a subscription.  For configured\n             subscriptions, transport-specific network parameters\n             (or a leafref to those parameters) may be augmented to a\n             specific receiver in this list.\";\n          leaf name {\n            type string;\n            description\n              \"Identifies a unique receiver for a subscription.\";\n          }\n          leaf sent-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records sent to the receiver.  The\n               count is initialized when a dynamic subscription is\n               established or when a configured receiver\n               transitions to the 'valid' state.\";\n          }\n          leaf excluded-event-records {\n            type yang:zero-based-counter64;\n            config false;\n            description\n              \"The number of event records explicitly removed via\n               either an event stream filter or an access control\n               filter so that they are not passed to a receiver.\n               This count is set to zero each time\n               'sent-event-records' is initialized.\";\n          }\n          leaf state {\n            type enumeration {\n              enum \"active\" {\n                value 1;\n                description\n                  \"The receiver is currently being sent any\n                   applicable notification messages for the\n                   subscription.\";\n              }\n              enum \"suspended\" {\n                value 2;\n                description\n                  \"The receiver state is 'suspended', so the\n                   publisher is currently unable to provide\n                   notification messages for the subscription.\";\n              }\n              enum \"connecting\" {\n                if-feature \"configured\";\n                value 3;\n                description\n                  \"A subscription has been configured, but a\n                   'subscription-started' subscription state change\n                   notification needs to be successfully received\n                   before notification messages are sent.\n\n                   If the 'reset' action is invoked for a receiver of\n                   an active configured subscription, the state\n                   must be moved to 'connecting'.\";\n              }\n              enum \"disconnected\" {\n                if-feature \"configured\";\n                value 4;\n                description\n                  \"A subscription has failed to send a\n                   'subscription-started' state change to the\n                   receiver.  Additional connection attempts are not\n                   currently being made.\";\n              }\n            }\n            config false;\n            mandatory true;\n            description\n              \"Specifies the state of a subscription from the\n               perspective of a particular receiver.  With this\n               information, it is possible to determine whether a\n               publisher is currently generating notification\n               messages intended for that receiver.\";\n          }\n          action reset {\n            if-feature \"configured\";\n            description\n              \"Allows the reset of this configured subscription's\n               receiver to the 'connecting' state.  This enables the\n               connection process to be reinitiated.\";\n\n            output {\n              leaf time {\n                type yang:date-and-time;\n                mandatory true;\n                description\n                  \"Time at which a publisher returned the receiver to\n                   the 'connecting' state.\";\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  rpc establish-subscription {\n    description\n      \"This RPC allows a subscriber to create (and possibly\n       negotiate) a subscription on its own behalf.  If successful,\n       the subscription remains in effect for the duration of the\n       subscriber's association with the publisher or until the\n       subscription is terminated.  If an error occurs or the\n       publisher cannot meet the terms of a subscription, an RPC\n       error is returned, and the subscription is not created.\n       In that case, the RPC reply's 'error-info' MAY include\n       suggested parameter settings that would have a higher\n       likelihood of succeeding in a subsequent\n       'establish-subscription' request.\";\n\n    input {\n      uses subscription-policy-dynamic;\n      leaf encoding {\n        type encoding;\n        description\n          \"The type of encoding for the subscribed data.  If not\n           included as part of the RPC, the encoding MUST be set by\n           the publisher to be the encoding used by this RPC.\";\n      }\n    }\n    output {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier used for this subscription.\";\n      }\n      leaf replay-start-time-revision {\n        if-feature \"replay\";\n        type yang:date-and-time;\n        description\n          \"If a replay has been requested, this object represents\n           the earliest time covered by the event buffer for the\n           requested event stream.  The value of this object is the\n           'replay-log-aged-time' if it exists.  Otherwise, it is\n           the 'replay-log-creation-time'.  All buffered event\n           records after this time will be replayed to a receiver.\n           This object will only be sent if the starting time has\n           been revised to be later than the time requested by the\n           subscriber.\";\n      }\n    }\n  }\n  rpc modify-subscription {\n    description\n      \"This RPC allows a subscriber to modify a dynamic\n       subscription's parameters.  If successful, the changed\n       subscription parameters remain in effect for the duration of\n       the subscription, until the subscription is again modified, or\n       until the subscription is terminated.  In the case of an error\n       or an inability to meet the modified parameters, the\n       subscription is not modified and the original subscription\n       parameters remain in effect.  In that case, the RPC error MAY\n       include 'error-info' suggested parameter hints that would have\n       a high likelihood of succeeding in a subsequent\n       'modify-subscription' request.  A successful\n       'modify-subscription' will return a suspended subscription to\n       the 'active' state.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier to use for this subscription.\";\n      }\n      uses subscription-policy-modifiable;\n    }\n  }\n  rpc delete-subscription {\n    description\n      \"This RPC allows a subscriber to delete a subscription that\n       was previously created by that same subscriber using the\n       'establish-subscription' RPC.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' from the same origin as this RPC\n           can be deleted via this RPC.\";\n      }\n    }\n  }\n  rpc kill-subscription {\n    nacm:default-deny-all;\n    description\n      \"This RPC allows an operator to delete a dynamic subscription\n       without restrictions on the originating subscriber or\n       underlying transport session.\n\n       If an error occurs, the server replies with an 'rpc-error'\n       where the 'error-info' field MAY contain a\n       'delete-subscription-error-info' structure.\";\n\n    input {\n      leaf id {\n        type subscription-id;\n        mandatory true;\n        description\n          \"Identifier of the subscription that is to be deleted.\n           Only subscriptions that were created using\n           'establish-subscription' can be deleted via this RPC.\";\n      }\n    }\n  }\n\n  notification replay-completed {\n    sn:subscription-state-notification;\n    if-feature \"replay\";\n    description\n      \"This notification is sent to indicate that all of the replay\n       notifications have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-completed {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification is sent to indicate that a subscription has\n       finished passing event records, as the 'stop-time' has been\n       reached.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the gracefully completed subscription.\";\n    }\n  }\n  notification subscription-modified {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       modified.  Notification messages sent from this point on will\n       conform to the modified terms of the subscription.  For\n       completeness, this subscription state change notification\n       includes both modified and unmodified aspects of a\n       subscription.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n    }\n  }\n  notification subscription-resumed {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription that had\n       previously been suspended has resumed.  Notifications will\n       once again be sent.  In addition, a 'subscription-resumed'\n       indicates that no modification of parameters has occurred\n       since the last time event records have been sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n  }\n  notification subscription-started {\n    sn:subscription-state-notification;\n    if-feature \"configured\";\n    description\n      \"This notification indicates that a subscription has started\n       and notifications will now be sent.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    uses subscription-policy {\n      refine \"target/stream/replay-start-time\" {\n        description\n          \"Indicates the time that a replay is using for the\n           streaming of buffered event records.  This will be\n           populated with the most recent of the following:\n           the event time of the previous event record sent to a\n           receiver, the 'replay-log-creation-time', the\n           'replay-log-aged-time', or the most recent publisher\n           boot time.\";\n      }\n      refine \"target/stream/stream-filter/within-subscription\" {\n        description\n          \"Filter applied to the subscription.  If the\n           'stream-filter-name' is populated, the filter in the\n           subscription came from the 'filters' container.\n           Otherwise, it is populated in-line as part of the\n           subscription.\";\n      }\n      augment \"target/stream\" {\n        description\n          \"This augmentation adds additional parameters specific to a\n           'subscription-started' notification.\";\n        leaf replay-previous-event-time {\n          when \"../replay-start-time\";\n          if-feature \"replay\";\n          type yang:date-and-time;\n          description\n            \"If there is at least one event in the replay buffer\n             prior to 'replay-start-time', this gives the time of\n             the event generated immediately prior to the\n             'replay-start-time'.\n\n             If a receiver previously received event records for\n             this configured subscription, it can compare this time\n             to the last event record previously received.  If the\n             two are not the same (perhaps due to a reboot), then a\n             dynamic replay can be initiated to acquire any missing\n             event records.\";\n        }\n      }\n    }\n  }\n  notification subscription-suspended {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a suspension of the\n       subscription by the publisher has occurred.  No further\n       notifications will be sent until the subscription resumes.\n       This notification shall only be sent to receivers of a\n       subscription; it does not constitute a general-purpose\n       notification.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-suspended-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the suspension.\";\n    }\n  }\n  notification subscription-terminated {\n    sn:subscription-state-notification;\n    description\n      \"This notification indicates that a subscription has been\n       terminated.\";\n    leaf id {\n      type subscription-id;\n      mandatory true;\n      description\n        \"This references the affected subscription.\";\n    }\n    leaf reason {\n      type identityref {\n        base subscription-terminated-reason;\n      }\n      mandatory true;\n      description\n        \"Identifies the condition that resulted in the termination.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-inet-types",
                  "subject": "ietf-inet-types-subject",
                  "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-interfaces",
                  "subject": "ietf-interfaces-subject",
                  "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": {
                    "features": [
                      "arbitrary-names",
                      "pre-provisioning",
                      "if-mib"
                    ]
                  }
                },
                {
                  "name": "ietf-netconf-acm",
                  "subject": "ietf-netconf-acm-subject",
                  "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-yang-types",
                      "subject": "ietf-yang-types-subject",
                      "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                      "references": [],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-network-instance",
                  "subject": "ietf-network-instance-subject",
                  "schema": "module ietf-network-instance {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-network-instance\";\n  prefix ni;\n\n  import ietf-interfaces {\n    prefix if;\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  import ietf-ip {\n    prefix ip;\n    reference\n      \"RFC 8344: A YANG Data Model for IP Management\";\n  }\n  import ietf-yang-schema-mount {\n    prefix yangmnt;\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  organization\n    \"IETF Routing Area (rtgwg) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/rtgwg&gt;\n     WG List:  &lt;mailto:rtgwg@ietf.org&gt;\n\n     Author:   Lou Berger\n               &lt;mailto:lberger@labn.net&gt;\n     Author:   Christian Hopps\n               &lt;mailto:chopps@chopps.org&gt;\n     Author:   Acee Lindem\n               &lt;mailto:acee@cisco.com&gt;\n     Author:   Dean Bogdanovic\n               &lt;mailto:ivandean@gmail.com&gt;\";\n  description\n    \"This module is used to support multiple network instances\n     within a single physical or virtual device.  Network\n     instances are commonly known as VRFs (VPN Routing and\n     Forwarding) and VSIs (Virtual Switching Instances).\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all capitals,\n      as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's Legal\n     Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8529; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-21 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8529\";\n  }\n\n  container network-instances {\n    description\n      \"Network instances, each of which consists of\n       VRFs and/or VSIs.\";\n    reference\n      \"RFC 8349: A YANG Data Model for Routing Management\";\n    list network-instance {\n      key \"name\";\n      description\n        \"List of network instances.\";\n      leaf name {\n        type string;\n        mandatory true;\n        description\n          \"device-scoped identifier for the network\n           instance.\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Flag indicating whether or not the network\n           instance is enabled.\";\n      }\n      leaf description {\n        type string;\n        description\n          \"Description of the network instance\n           and its intended purpose.\";\n      }\n      choice ni-type {\n        description\n          \"This node serves as an anchor point for different types\n           of network instances.  Each 'case' is expected to\n           differ in terms of the information needed in the\n           parent/core to support the NI and may differ in their\n           mounted-schema definition.  When the mounted schema is\n           not expected to be the same for a specific type of NI,\n           a mount point should be defined.\";\n      }\n      choice root-type {\n        mandatory true;\n        description\n          \"Well-known mount points.\";\n        container vrf-root {\n          yangmnt:mount-point \"vrf-root\" {\n            description\n              \"Root for L3VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vsi-root {\n          yangmnt:mount-point \"vsi-root\" {\n            description\n              \"Root for L2VPN-type models.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n        container vv-root {\n          yangmnt:mount-point \"vv-root\" {\n            description\n              \"Root models that support both L2VPN-type bridging\n               and L3VPN-type routing.  This will typically\n               not be an inline-type mount point.\";\n          }\n          description\n            \"Container for mount point.\";\n        }\n      }\n    }\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on a interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which an interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv4\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv4 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv4 interface is bound.\";\n    }\n  }\n  augment \"/if:interfaces/if:interface/ip:ipv6\" {\n    description\n      \"Add a node for the identification of the network\n       instance associated with the information configured\n       on an IPv6 interface.\n\n       Note that a standard error will be returned if the\n       identified leafref isn't present.  If an interface cannot\n       be assigned for any other reason, the operation SHALL fail\n       with an error-tag of 'operation-failed' and an\n       error-app-tag of 'ni-assignment-failed'.  A meaningful\n       error-info that indicates the source of the assignment\n       failure SHOULD also be provided.\";\n    leaf bind-ni-name {\n      type leafref {\n        path \"/network-instances/network-instance/name\";\n      }\n      description\n        \"Network instance to which IPv6 interface is bound.\";\n    }\n  }\n\n  notification bind-ni-name-failed {\n    description\n      \"Indicates an error in the association of an interface to an\n       NI.  Only generated after success is initially returned when\n       bind-ni-name is set.\n\n       Note: Some errors may need to be reported for multiple\n       associations, e.g., a single error may need to be reported\n       for an IPv4 and an IPv6 bind-ni-name.\n\n       At least one container with a bind-ni-name leaf MUST be\n       included in this notification.\";\n    leaf name {\n      type leafref {\n        path \"/if:interfaces/if:interface/if:name\";\n      }\n      mandatory true;\n      description\n        \"Contains the interface name associated with the\n         failure.\";\n    }\n    container interface {\n      description\n        \"Generic interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv4 {\n      description\n        \"IPv4 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv4/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    container ipv6 {\n      description\n        \"IPv6 interface type.\";\n      leaf bind-ni-name {\n        type leafref {\n          path \"/if:interfaces/if:interface/ip:ipv6/ni:bind-ni-name\";\n        }\n        description\n          \"Contains the bind-ni-name associated with the\n           failure.\";\n      }\n    }\n    leaf error-info {\n      type string;\n      description\n        \"Optionally, indicates the source of the assignment\n         failure.\";\n    }\n  }\n}\n",
                  "references": [
                    {
                      "name": "ietf-interfaces",
                      "subject": "ietf-interfaces-subject",
                      "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "arbitrary-names",
                          "pre-provisioning",
                          "if-mib"
                        ]
                      }
                    },
                    {
                      "name": "ietf-ip",
                      "subject": "ietf-ip-subject",
                      "schema": "module ietf-ip {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-ip\";\n  prefix ip;\n\n  import ietf-interfaces {\n    prefix if;\n  }\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   &lt;http://tools.ietf.org/wg/netmod/&gt;\n     WG List:  &lt;mailto:netmod@ietf.org&gt;\n\n     WG Chair: Thomas Nadeau\n               &lt;mailto:tnadeau@lucidvision.com&gt;\n\n     WG Chair: Juergen Schoenwaelder\n               &lt;mailto:j.schoenwaelder@jacobs-university.de&gt;\n\n     Editor:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"This module contains a collection of YANG definitions for\n     configuring IP implementations.\n\n     Copyright (c) 2014 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 7277; see\n     the RFC itself for full legal notices.\";\n\n  revision 2014-06-16 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7277: A YANG Data Model for IP Management\";\n  }\n\n  feature ipv4-non-contiguous-netmasks {\n    description\n      \"Indicates support for configuring non-contiguous\n       subnet masks.\";\n  }\n\n  feature ipv6-privacy-autoconf {\n    description\n      \"Indicates support for Privacy Extensions for Stateless Address\n       Autoconfiguration in IPv6.\";\n    reference\n      \"RFC 4941: Privacy Extensions for Stateless Address\n                 Autoconfiguration in IPv6\";\n  }\n\n  typedef ip-address-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the address has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dhcp\" {\n        description\n          \"Indicates an address that has been assigned to this\n           system by a DHCP server.\";\n      }\n      enum \"link-layer\" {\n        description\n          \"Indicates an address created by IPv6 stateless\n           autoconfiguration that embeds a link-layer address in its\n           interface identifier.\";\n      }\n      enum \"random\" {\n        description\n          \"Indicates an address chosen by the system at\n\n           random, e.g., an IPv4 address within 169.254/16, an\n           RFC 4941 temporary address, or an RFC 7217 semantically\n           opaque address.\";\n        reference\n          \"RFC 4941: Privacy Extensions for Stateless Address\n                     Autoconfiguration in IPv6\n           RFC 7217: A Method for Generating Semantically Opaque\n                     Interface Identifiers with IPv6 Stateless\n                     Address Autoconfiguration (SLAAC)\";\n      }\n    }\n    description\n      \"The origin of an address.\";\n  }\n\n  typedef neighbor-origin {\n    type enumeration {\n      enum \"other\" {\n        description\n          \"None of the following.\";\n      }\n      enum \"static\" {\n        description\n          \"Indicates that the mapping has been statically\n           configured - for example, using NETCONF or a Command Line\n           Interface.\";\n      }\n      enum \"dynamic\" {\n        description\n          \"Indicates that the mapping has been dynamically resolved\n           using, e.g., IPv4 ARP or the IPv6 Neighbor Discovery\n           protocol.\";\n      }\n    }\n    description\n      \"The origin of a neighbor entry.\";\n  }\n\n  augment \"/if:interfaces/if:interface\" {\n    description\n      \"Parameters for configuring IP on interfaces.\n\n       If an interface is not capable of running IP, the server\n       must not allow the client to configure these parameters.\";\n    container ipv4 {\n      presence \"Enables IPv4 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv4 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv4 is enabled or disabled on this\n           interface.  When IPv4 is enabled, this interface is\n           connected to an IPv4 stack, and the interface can send\n           and receive IPv4 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv4 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv4 routers\n           forward datagrams.  IPv4 hosts do not (except those\n           source-routed via the host).\";\n      }\n      leaf mtu {\n        type uint16;\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          mandatory true;\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Enables IPv6 unless the 'enabled' leaf\n       (which defaults to 'true') is set to 'false'\";\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"Controls whether IPv6 is enabled or disabled on this\n           interface.  When IPv6 is enabled, this interface is\n           connected to an IPv6 stack, and the interface can send\n           and receive IPv6 packets.\";\n      }\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Controls IPv6 packet forwarding of datagrams received by,\n           but not addressed to, this interface.  IPv6 routers\n           forward datagrams.  IPv6 hosts do not (except those\n           source-routed via the host).\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\n\n           The server may restrict the allowed values for this leaf,\n           depending on the interface's type.\n\n           If this leaf is not configured, the operationally used MTU\n           depends on the interface's type.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of configured IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           Entries in this list are used as static entries in the\n           Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          mandatory true;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n      }\n      leaf dup-addr-detect-transmits {\n        type uint32;\n        default \"1\";\n        description\n          \"The number of consecutive Neighbor Solicitation messages\n           sent while performing Duplicate Address Detection on a\n           tentative address.  A value of zero indicates that\n           Duplicate Address Detection is not performed on\n           tentative addresses.  A value of one indicates a single\n           transmission with no follow-up retransmissions.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n      }\n      container autoconf {\n        description\n          \"Parameters to control the autoconfiguration of IPv6\n           addresses, as described in RFC 4862.\";\n        reference\n          \"RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        leaf create-global-addresses {\n          type boolean;\n          default \"true\";\n          description\n            \"If enabled, the host creates global addresses as\n             described in RFC 4862.\";\n          reference\n            \"RFC 4862: IPv6 Stateless Address Autoconfiguration\n                       Section 5.5\";\n        }\n        leaf create-temporary-addresses {\n          if-feature \"ipv6-privacy-autoconf\";\n          type boolean;\n          default \"false\";\n          description\n            \"If enabled, the host creates temporary addresses as\n             described in RFC 4941.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\";\n        }\n        leaf temporary-valid-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"604800\";\n          description\n            \"The time period during which the temporary address\n             is valid.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_VALID_LIFETIME\";\n        }\n        leaf temporary-preferred-lifetime {\n          if-feature \"ipv6-privacy-autoconf\";\n          type uint32;\n          units \"seconds\";\n          default \"86400\";\n          description\n            \"The time period during which the temporary address is\n             preferred.\";\n          reference\n            \"RFC 4941: Privacy Extensions for Stateless Address\n                       Autoconfiguration in IPv6\n                       - TEMP_PREFERRED_LIFETIME\";\n        }\n      }\n    }\n  }\n  augment \"/if:interfaces-state/if:interface\" {\n    description\n      \"Data nodes for the operational state of IP on interfaces.\";\n    container ipv4 {\n      presence \"Present if IPv4 is enabled on this interface\";\n      config false;\n      description\n        \"Interface-specific parameters for the IPv4 address family.\";\n      leaf forwarding {\n        type boolean;\n        description\n          \"Indicates whether IPv4 packet forwarding is enabled or\n           disabled on this interface.\";\n      }\n      leaf mtu {\n        type uint16 {\n          range \"68..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv4 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 791: Internet Protocol\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv4 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address on the interface.\";\n        }\n        choice subnet {\n          description\n            \"The subnet can be specified as a prefix-length, or,\n             if the server supports non-contiguous netmasks, as\n             a netmask.\";\n          leaf prefix-length {\n            type uint8 {\n              range \"0..32\";\n            }\n            description\n              \"The length of the subnet prefix.\";\n          }\n          leaf netmask {\n            if-feature \"ipv4-non-contiguous-netmasks\";\n            type yang:dotted-quad;\n            description\n              \"The subnet specified as a netmask.\";\n          }\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv4 addresses to\n           link-layer addresses.\n\n           This list represents the ARP Cache.\";\n        reference\n          \"RFC 826: An Ethernet Address Resolution Protocol\";\n        leaf ip {\n          type inet:ipv4-address-no-zone;\n          description\n            \"The IPv4 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n      }\n    }\n    container ipv6 {\n      presence \"Present if IPv6 is enabled on this interface\";\n      config false;\n      description\n        \"Parameters for the IPv6 address family.\";\n      leaf forwarding {\n        type boolean;\n        default \"false\";\n        description\n          \"Indicates whether IPv6 packet forwarding is enabled or\n           disabled on this interface.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                     Section 6.2.1, IsRouter\";\n      }\n      leaf mtu {\n        type uint32 {\n          range \"1280..max\";\n        }\n        units \"octets\";\n        description\n          \"The size, in octets, of the largest IPv6 packet that the\n           interface will send and receive.\";\n        reference\n          \"RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n                     Section 5\";\n      }\n      list address {\n        key \"ip\";\n        description\n          \"The list of IPv6 addresses on the interface.\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address on the interface.\";\n        }\n        leaf prefix-length {\n          type uint8 {\n            range \"0..128\";\n          }\n          mandatory true;\n          description\n            \"The length of the subnet prefix.\";\n        }\n        leaf origin {\n          type ip-address-origin;\n          description\n            \"The origin of this address.\";\n        }\n        leaf status {\n          type enumeration {\n            enum \"preferred\" {\n              description\n                \"This is a valid address that can appear as the\n                 destination or source address of a packet.\";\n            }\n            enum \"deprecated\" {\n              description\n                \"This is a valid but deprecated address that should\n                 no longer be used as a source address in new\n                 communications, but packets addressed to such an\n                 address are processed as expected.\";\n            }\n            enum \"invalid\" {\n              description\n                \"This isn't a valid address, and it shouldn't appear\n                 as the destination or source address of a packet.\";\n            }\n            enum \"inaccessible\" {\n              description\n                \"The address is not accessible because the interface\n                 to which this address is assigned is not\n                 operational.\";\n            }\n            enum \"unknown\" {\n              description\n                \"The status cannot be determined for some reason.\";\n            }\n            enum \"tentative\" {\n              description\n                \"The uniqueness of the address on the link is being\n                 verified.  Addresses in this state should not be\n                 used for general communication and should only be\n                 used to determine the uniqueness of the address.\";\n            }\n            enum \"duplicate\" {\n              description\n                \"The address has been determined to be non-unique on\n                 the link and so must not be used.\";\n            }\n            enum \"optimistic\" {\n              description\n                \"The address is available for use, subject to\n                 restrictions, while its uniqueness on a link is\n                 being verified.\";\n            }\n          }\n          description\n            \"The status of an address.  Most of the states correspond\n             to states from the IPv6 Stateless Address\n             Autoconfiguration protocol.\";\n          reference\n            \"RFC 4293: Management Information Base for the\n                       Internet Protocol (IP)\n                       - IpAddressStatusTC\n             RFC 4862: IPv6 Stateless Address Autoconfiguration\";\n        }\n      }\n      list neighbor {\n        key \"ip\";\n        description\n          \"A list of mappings from IPv6 addresses to\n           link-layer addresses.\n\n           This list represents the Neighbor Cache.\";\n        reference\n          \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\";\n        leaf ip {\n          type inet:ipv6-address-no-zone;\n          description\n            \"The IPv6 address of the neighbor node.\";\n        }\n        leaf link-layer-address {\n          type yang:phys-address;\n          description\n            \"The link-layer address of the neighbor node.\";\n        }\n        leaf origin {\n          type neighbor-origin;\n          description\n            \"The origin of this neighbor entry.\";\n        }\n        leaf is-router {\n          type empty;\n          description\n            \"Indicates that the neighbor node acts as a router.\";\n        }\n        leaf state {\n          type enumeration {\n            enum \"incomplete\" {\n              description\n                \"Address resolution is in progress, and the link-layer\n                 address of the neighbor has not yet been\n                 determined.\";\n            }\n            enum \"reachable\" {\n              description\n                \"Roughly speaking, the neighbor is known to have been\n                 reachable recently (within tens of seconds ago).\";\n            }\n            enum \"stale\" {\n              description\n                \"The neighbor is no longer known to be reachable, but\n                 until traffic is sent to the neighbor no attempt\n                 should be made to verify its reachability.\";\n            }\n            enum \"delay\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 traffic has recently been sent to the neighbor.\n                 Rather than probe the neighbor immediately, however,\n                 delay sending probes for a short while in order to\n                 give upper-layer protocols a chance to provide\n                 reachability confirmation.\";\n            }\n            enum \"probe\" {\n              description\n                \"The neighbor is no longer known to be reachable, and\n                 unicast Neighbor Solicitation probes are being sent\n                 to verify reachability.\";\n            }\n          }\n          description\n            \"The Neighbor Unreachability Detection state of this\n             entry.\";\n          reference\n            \"RFC 4861: Neighbor Discovery for IP version 6 (IPv6)\n                       Section 7.3.2\";\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-interfaces",
                          "subject": "ietf-interfaces-subject",
                          "schema": "module ietf-interfaces {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-interfaces\";\n  prefix if;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETMOD (Network Modeling) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\";\n  description\n    \"This module contains a collection of YANG definitions for\n     managing network interfaces.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8343; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-20 {\n    description\n      \"Updated to support NMDA.\";\n    reference\n      \"RFC 8343: A YANG Data Model for Interface Management\";\n  }\n  revision 2014-05-08 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7223: A YANG Data Model for Interface Management\";\n  }\n\n  feature arbitrary-names {\n    description\n      \"This feature indicates that the device allows user-controlled\n       interfaces to be named arbitrarily.\";\n  }\n\n  feature pre-provisioning {\n    description\n      \"This feature indicates that the device supports\n       pre-provisioning of interface configuration, i.e., it is\n       possible to configure an interface whose physical interface\n       hardware is not present on the device.\";\n  }\n\n  feature if-mib {\n    description\n      \"This feature indicates that the device implements\n       the IF-MIB.\";\n    reference\n      \"RFC 2863: The Interfaces Group MIB\";\n  }\n\n  identity interface-type {\n    description\n      \"Base identity from which specific interface types are\n       derived.\";\n  }\n\n  typedef interface-ref {\n    type leafref {\n      path \"/if:interfaces/if:interface/if:name\";\n    }\n    description\n      \"This type is used by data models that need to reference\n       interfaces.\";\n  }\n\n  typedef interface-state-ref {\n    type leafref {\n      path \"/if:interfaces-state/if:interface/if:name\";\n    }\n    status deprecated;\n    description\n      \"This type is used by data models that need to reference\n       the operationally present interfaces.\";\n  }\n\n  container interfaces {\n    description\n      \"Interface parameters.\";\n    list interface {\n      key \"name\";\n      description\n        \"The list of interfaces on the device.\n\n         The status of an interface is available in this list in the\n         operational state.  If the configuration of a\n         system-controlled interface cannot be used by the system\n         (e.g., the interface hardware present does not match the\n         interface type), then the configuration is not applied to\n         the system-controlled interface shown in the operational\n         state.  If the configuration of a user-controlled interface\n         cannot be used by the system, the configured interface is\n         not instantiated in the operational state.\n\n         System-controlled interfaces created by the system are\n         always present in this list in the operational state,\n         whether or not they are configured.\";\n      leaf name {\n        type string;\n        description\n          \"The name of the interface.\n\n           A device MAY restrict the allowed values for this leaf,\n           possibly depending on the type of the interface.\n           For system-controlled interfaces, this leaf is the\n           device-specific name of the interface.\n\n           If a client tries to create configuration for a\n           system-controlled interface that is not present in the\n           operational state, the server MAY reject the request if\n           the implementation does not support pre-provisioning of\n           interfaces or if the name refers to an interface that can\n           never exist in the system.  A Network Configuration\n           Protocol (NETCONF) server MUST reply with an rpc-error\n           with the error-tag 'invalid-value' in this case.\n\n           If the device supports pre-provisioning of interface\n           configuration, the 'pre-provisioning' feature is\n           advertised.\n\n           If the device allows arbitrarily named user-controlled\n           interfaces, the 'arbitrary-names' feature is advertised.\n\n           When a configured user-controlled interface is created by\n           the system, it is instantiated with the same name in the\n           operational state.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf description {\n        type string;\n        description\n          \"A textual description of the interface.\n\n           A server implementation MAY map this leaf to the ifAlias\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifAlias.  The definition of\n           such a mechanism is outside the scope of this document.\n\n           Since ifAlias is defined to be stored in non-volatile\n           storage, the MIB implementation MUST map ifAlias to the\n           value of 'description' in the persistently stored\n           configuration.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAlias\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        description\n          \"The type of the interface.\n\n           When an interface entry is created, a server MAY\n           initialize the type leaf with a valid value, e.g., if it\n           is possible to derive the type from the name of the\n           interface.\n\n           If a client tries to set the type of an interface to a\n           value that can never be used by the system, e.g., if the\n           type is not supported or if the type does not match the\n           name of the interface, the server MUST reject the request.\n           A NETCONF server MUST reply with an rpc-error with the\n           error-tag 'invalid-value' in this case.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf enabled {\n        type boolean;\n        default \"true\";\n        description\n          \"This leaf contains the configured, desired state of the\n           interface.\n\n           Systems that implement the IF-MIB use the value of this\n           leaf in the intended configuration to set\n           IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry\n           has been initialized, as described in RFC 2863.\n\n           Changes in this leaf in the intended configuration are\n           reflected in ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf link-up-down-trap-enable {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"enabled\" {\n            value 1;\n            description\n              \"The device will generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n          enum \"disabled\" {\n            value 2;\n            description\n              \"The device will not generate linkUp/linkDown SNMP\n               notifications for this interface.\";\n          }\n        }\n        description\n          \"Controls whether linkUp/linkDown SNMP notifications\n           should be generated for this interface.\n\n           If this node is not configured, the value 'enabled' is\n           operationally used by the server for interfaces that do\n           not operate on top of any other interface (i.e., there are\n           no 'lower-layer-if' entries), and 'disabled' otherwise.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifLinkUpDownTrapEnable\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        config false;\n        mandatory true;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        config false;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        config false;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-ref;\n        config false;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        config false;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        config false;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n  container interfaces-state {\n    config false;\n    status deprecated;\n    description\n      \"Data nodes for the operational state of interfaces.\";\n    list interface {\n      key \"name\";\n      status deprecated;\n      description\n        \"The list of interfaces on the device.\n\n         System-controlled interfaces created by the system are\n         always present in this list, whether or not they are\n         configured.\";\n      leaf name {\n        type string;\n        status deprecated;\n        description\n          \"The name of the interface.\n\n           A server implementation MAY map this leaf to the ifName\n           MIB object.  Such an implementation needs to use some\n           mechanism to handle the differences in size and characters\n           allowed between this leaf and ifName.  The definition of\n           such a mechanism is outside the scope of this document.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifName\";\n      }\n      leaf type {\n        type identityref {\n          base interface-type;\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The type of the interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifType\";\n      }\n      leaf admin-status {\n        if-feature \"if-mib\";\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"Not ready to pass packets and not in some test mode.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The desired state of the interface.\n\n           This leaf has the same read semantics as ifAdminStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifAdminStatus\";\n      }\n      leaf oper-status {\n        type enumeration {\n          enum \"up\" {\n            value 1;\n            description\n              \"Ready to pass packets.\";\n          }\n          enum \"down\" {\n            value 2;\n            description\n              \"The interface does not pass any packets.\";\n          }\n          enum \"testing\" {\n            value 3;\n            description\n              \"In some test mode.  No operational packets can\n               be passed.\";\n          }\n          enum \"unknown\" {\n            value 4;\n            description\n              \"Status cannot be determined for some reason.\";\n          }\n          enum \"dormant\" {\n            value 5;\n            description\n              \"Waiting for some external event.\";\n          }\n          enum \"not-present\" {\n            value 6;\n            description\n              \"Some component (typically hardware) is missing.\";\n          }\n          enum \"lower-layer-down\" {\n            value 7;\n            description\n              \"Down due to state of lower-layer interface(s).\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The current operational state of the interface.\n\n           This leaf has the same semantics as ifOperStatus.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifOperStatus\";\n      }\n      leaf last-change {\n        type yang:date-and-time;\n        status deprecated;\n        description\n          \"The time the interface entered its current operational\n           state.  If the current state was entered prior to the\n           last re-initialization of the local network management\n           subsystem, then this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifLastChange\";\n      }\n      leaf if-index {\n        if-feature \"if-mib\";\n        type int32 {\n          range \"1..2147483647\";\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"The ifIndex value for the ifEntry represented by this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifIndex\";\n      }\n      leaf phys-address {\n        type yang:phys-address;\n        status deprecated;\n        description\n          \"The interface's address at its protocol sub-layer.  For\n           example, for an 802.x interface, this object normally\n           contains a Media Access Control (MAC) address.  The\n           interface's media-specific modules must define the bit\n           and byte ordering and the format of the value of this\n           object.  For interfaces that do not have such an address\n           (e.g., a serial line), this node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifPhysAddress\";\n      }\n      leaf-list higher-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered on top of this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf-list lower-layer-if {\n        type interface-state-ref;\n        status deprecated;\n        description\n          \"A list of references to interfaces layered underneath this\n           interface.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB - ifStackTable\";\n      }\n      leaf speed {\n        type yang:gauge64;\n        units \"bits/second\";\n        status deprecated;\n        description\n          \"An estimate of the interface's current bandwidth in bits\n           per second.  For interfaces that do not vary in\n           bandwidth or for those where no accurate estimation can\n\n           be made, this node should contain the nominal bandwidth.\n           For interfaces that have no concept of bandwidth, this\n           node is not present.\";\n        reference\n          \"RFC 2863: The Interfaces Group MIB -\n                     ifSpeed, ifHighSpeed\";\n      }\n      container statistics {\n        status deprecated;\n        description\n          \"A collection of interface-related statistics objects.\";\n        leaf discontinuity-time {\n          type yang:date-and-time;\n          mandatory true;\n          status deprecated;\n          description\n            \"The time on the most recent occasion at which any one or\n             more of this interface's counters suffered a\n             discontinuity.  If no such discontinuities have occurred\n             since the last re-initialization of the local management\n             subsystem, then this node contains the time the local\n             management subsystem re-initialized itself.\";\n        }\n        leaf in-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets received on the interface,\n             including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInOctets\";\n        }\n        leaf in-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were not addressed to a\n             multicast or broadcast address at this sub-layer.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCInUcastPkts\";\n        }\n        leaf in-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a broadcast\n             address at this sub-layer.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInBroadcastPkts\";\n        }\n        leaf in-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The number of packets, delivered by this sub-layer to a\n             higher (sub-)layer, that were addressed to a multicast\n             address at this sub-layer.  For a MAC-layer protocol,\n             this includes both Group and Functional addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCInMulticastPkts\";\n        }\n        leaf in-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of inbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being deliverable to a higher-layer\n             protocol.  One possible reason for discarding such a\n             packet could be to free up buffer space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInDiscards\";\n        }\n        leaf in-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of inbound\n             packets that contained errors preventing them from being\n             deliverable to a higher-layer protocol.  For character-\n             oriented or fixed-length interfaces, the number of\n             inbound transmission units that contained errors\n             preventing them from being deliverable to a higher-layer\n             protocol.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInErrors\";\n        }\n        leaf in-unknown-protos {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of packets\n             received via the interface that were discarded because\n             of an unknown or unsupported protocol.  For\n             character-oriented or fixed-length interfaces that\n             support protocol multiplexing, the number of\n             transmission units received via the interface that were\n             discarded because of an unknown or unsupported protocol.\n             For any interface that does not support protocol\n             multiplexing, this counter is not present.\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifInUnknownProtos\";\n        }\n        leaf out-octets {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of octets transmitted out of the\n             interface, including framing characters.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutOctets\";\n        }\n        leaf out-unicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were not addressed\n             to a multicast or broadcast address at this sub-layer,\n             including those that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifHCOutUcastPkts\";\n        }\n        leaf out-broadcast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             broadcast address at this sub-layer, including those\n             that were discarded or not sent.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutBroadcastPkts\";\n        }\n        leaf out-multicast-pkts {\n          type yang:counter64;\n          status deprecated;\n          description\n            \"The total number of packets that higher-level protocols\n             requested be transmitted and that were addressed to a\n             multicast address at this sub-layer, including those\n             that were discarded or not sent.  For a MAC-layer\n             protocol, this includes both Group and Functional\n             addresses.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB -\n                       ifHCOutMulticastPkts\";\n        }\n        leaf out-discards {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"The number of outbound packets that were chosen to be\n             discarded even though no errors had been detected to\n             prevent their being transmitted.  One possible reason\n             for discarding such a packet could be to free up buffer\n             space.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutDiscards\";\n        }\n        leaf out-errors {\n          type yang:counter32;\n          status deprecated;\n          description\n            \"For packet-oriented interfaces, the number of outbound\n             packets that could not be transmitted because of errors.\n             For character-oriented or fixed-length interfaces, the\n             number of outbound transmission units that could not be\n             transmitted because of errors.\n\n             Discontinuities in the value of this counter can occur\n             at re-initialization of the management system and at\n             other times as indicated by the value of\n             'discontinuity-time'.\";\n          reference\n            \"RFC 2863: The Interfaces Group MIB - ifOutErrors\";\n        }\n      }\n    }\n  }\n}\n",
                          "references": [
                            {
                              "name": "ietf-yang-types",
                              "subject": "ietf-yang-types-subject",
                              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                              "references": [],
                              "properties": null,
                              "tags": null
                            }
                          ],
                          "properties": null,
                          "tags": {
                            "features": [
                              "arbitrary-names",
                              "pre-provisioning",
                              "if-mib"
                            ]
                          }
                        },
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": {
                        "features": [
                          "ipv4-non-contiguous-netmasks",
                          "ipv6-privacy-autoconf"
                        ]
                      }
                    },
                    {
                      "name": "ietf-yang-schema-mount",
                      "subject": "ietf-yang-schema-mount-subject",
                      "schema": "module ietf-yang-schema-mount {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-schema-mount\";\n  prefix yangmnt;\n\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     Editor:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Editor:   Ladislav Lhotka\n               <mailto:lhotka@nic.cz>\";\n  description\n    \"This module defines a YANG extension statement that can be used\n     to incorporate data models defined in other YANG modules in a\n     module.  It also defines operational state data that specify the\n     overall structure of the data model.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8528;\n     see the RFC itself for full legal notices.\";\n\n  revision 2019-01-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8528: YANG Schema Mount\";\n  }\n\n  extension mount-point {\n    argument label;\n    description\n      \"The argument 'label' is a YANG identifier, i.e., it is of the\n       type 'yang:yang-identifier'.\n\n       The 'mount-point' statement MUST NOT be used in a YANG\n       version 1 module, neither explicitly nor via a 'uses'\n       statement.\n       The 'mount-point' statement MAY be present as a substatement\n       of 'container' and 'list' and MUST NOT be present elsewhere.\n       There MUST NOT be more than one 'mount-point' statement in a\n       given 'container' or 'list' statement.\n\n       If a mount point is defined within a grouping, its label is\n       bound to the module where the grouping is used.\n\n       A mount point defines a place in the node hierarchy where\n       other data models may be attached.  A server that implements a\n       module with a mount point populates the\n       '/schema-mounts/mount-point' list with detailed information on\n       which data models are mounted at each mount point.\n\n       Note that the 'mount-point' statement does not define a new\n       data node.\";\n  }\n\n  container schema-mounts {\n    config false;\n    description\n      \"Contains information about the structure of the overall\n       mounted data model implemented in the server.\";\n    list namespace {\n      key \"prefix\";\n      description\n        \"This list provides a mapping of namespace prefixes that are\n         used in XPath expressions of 'parent-reference' leafs to the\n         corresponding namespace URI references.\";\n      leaf prefix {\n        type yang:yang-identifier;\n        description\n          \"Namespace prefix.\";\n      }\n      leaf uri {\n        type inet:uri;\n        description\n          \"Namespace URI reference.\";\n      }\n    }\n    list mount-point {\n      key \"module label\";\n      description\n        \"Each entry of this list specifies a schema for a particular\n         mount point.\n\n         Each mount point MUST be defined using the 'mount-point'\n         extension in one of the modules listed in the server's\n         YANG library instance with conformance type 'implement'.\";\n      leaf module {\n        type yang:yang-identifier;\n        description\n          \"Name of a module containing the mount point.\";\n      }\n      leaf label {\n        type yang:yang-identifier;\n        description\n          \"Label of the mount point defined using the 'mount-point'\n           extension.\";\n      }\n      leaf config {\n        type boolean;\n        default \"true\";\n        description\n          \"If this leaf is set to 'false', then all data nodes in the\n           mounted schema are read-only ('config false'), regardless\n           of their 'config' property.\";\n      }\n      choice schema-ref {\n        mandatory true;\n        description\n          \"Alternatives for specifying the schema.\";\n        container inline {\n          presence \"A complete self-contained schema is mounted at the\n           mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.\n\n             Different instances of the mount point may have\n             different schemas mounted.\";\n        }\n        container shared-schema {\n          presence \"The mounted schema together with the 'parent-reference'\n           make up the schema for this mount point.\";\n          description\n            \"This node indicates that the server has mounted at least\n             the module 'ietf-yang-library' at the mount point, and\n             its instantiation provides the information about the\n             mounted schema.  When XPath expressions in the mounted\n             schema are evaluated, the 'parent-reference' leaf-list\n             is taken into account.\n\n             Different instances of the mount point MUST have the\n             same schema mounted.\";\n          leaf-list parent-reference {\n            type yang:xpath1.0;\n            description\n              \"Entries of this leaf-list are XPath 1.0 expressions\n               that are evaluated in the following context:\n\n               - The context node is the node in the parent data tree\n                 where the mount-point is defined.\n\n               - The accessible tree is the parent data tree\n                 *without* any nodes defined in modules that are\n                 mounted inside the parent schema.\n\n               - The context position and context size are both equal\n                 to 1.\n\n               - The set of variable bindings is empty.\n\n               - The function library is the core function library\n                 defined in the W3C XPath 1.0 document\n                 (http://www.w3.org/TR/1999/REC-xpath-19991116) and\n                 the functions defined in Section 10 of RFC 7950.\n\n               - The set of namespace declarations is defined by the\n                 'namespace' list under 'schema-mounts'.\n\n               Each XPath expression MUST evaluate to a node-set\n               (possibly empty).  For the purposes of evaluating\n               XPath expressions whose context nodes are defined in\n               the mounted schema, the union of all these node-sets\n               together with ancestor nodes are added to the\n               accessible data tree.\n\n               Note that in the case 'ietf-yang-schema-mount' is\n               itself mounted, a 'parent-reference' in the mounted\n               module may refer to nodes that were brought into the\n               accessible tree through a 'parent-reference' in the\n               parent schema.\";\n          }\n        }\n      }\n    }\n  }\n}\n",
                      "references": [
                        {
                          "name": "ietf-inet-types",
                          "subject": "ietf-inet-types-subject",
                          "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        },
                        {
                          "name": "ietf-yang-types",
                          "subject": "ietf-yang-types-subject",
                          "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                          "references": [],
                          "properties": null,
                          "tags": null
                        }
                      ],
                      "properties": null,
                      "tags": null
                    }
                  ],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": {
                "features": [
                  "configured",
                  "dscp",
                  "encode-json",
                  "encode-xml",
                  "interface-designation",
                  "qos",
                  "replay",
                  "subtree",
                  "supports-vrf",
                  "xpath"
                ]
              }
            },
            {
              "name": "ietf-datastores",
              "subject": "ietf-datastores-subject",
              "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-restconf",
              "subject": "ietf-restconf-subject",
              "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-patch",
              "subject": "ietf-yang-patch-subject",
              "schema": "module ietf-yang-patch {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-patch\";\n  prefix ypatch;\n\n  import ietf-restconf {\n    prefix rc;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\";\n  description\n    \"This module contains conceptual YANG specifications\n     for the YANG Patch and YANG Patch Status data structures.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The YANG grouping statements provide a normative syntax\n     for XML and JSON message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8072; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-02-22 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8072: YANG Patch Media Type.\";\n  }\n\n  rc:yang-data \"yang-patch\" {\n    uses yang-patch;\n  }\n  rc:yang-data \"yang-patch-status\" {\n    uses yang-patch-status;\n  }\n\n  typedef target-resource-offset {\n    type string;\n    description\n      \"Contains a data resource identifier string representing\n       a sub-resource within the target resource.\n       The document root for this expression is the\n       target resource that is specified in the\n       protocol operation (e.g., the URI for the PATCH request).\n\n       This string is encoded according to the same rules as those\n       for a data resource identifier in a RESTCONF request URI.\";\n    reference\n      \"RFC 8040, Section 3.5.3.\";\n  }\n\n  grouping yang-patch {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch edit request message.\";\n    container yang-patch {\n      description\n        \"Represents a conceptual sequence of datastore edits,\n         called a patch.  Each patch is given a client-assigned\n         patch identifier.  Each edit MUST be applied\n         in ascending order, and all edits MUST be applied.\n         If any errors occur, then the target datastore MUST NOT\n         be changed by the YANG Patch operation.\n\n         It is possible for a datastore constraint violation to occur\n         due to any node in the datastore, including nodes not\n         included in the 'edit' list.  Any validation errors MUST\n         be reported in the reply message.\";\n      reference\n        \"RFC 7950, Section 8.3.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"An arbitrary string provided by the client to identify\n           the entire patch.  Error messages returned by the server\n           that pertain to this patch will be identified by this\n           'patch-id' value.  A client SHOULD attempt to generate\n           unique 'patch-id' values to distinguish between\n           transactions from multiple clients in any audit logs\n           maintained by the server.\";\n      }\n      leaf comment {\n        type string;\n        description\n          \"An arbitrary string provided by the client to describe\n           the entire patch.  This value SHOULD be present in any\n           audit logging records generated by the server for the\n           patch.\";\n      }\n      list edit {\n        key \"edit-id\";\n        ordered-by user;\n        description\n          \"Represents one edit within the YANG Patch request message.\n           The 'edit' list is applied in the following manner:\n\n             - The first edit is conceptually applied to a copy\n               of the existing target datastore, e.g., the\n               running configuration datastore.\n             - Each ascending edit is conceptually applied to\n               the result of the previous edit(s).\n             - After all edits have been successfully processed,\n               the result is validated according to YANG constraints.\n             - If successful, the server will attempt to apply\n               the result to the target datastore.\";\n        leaf edit-id {\n          type string;\n          description\n            \"Arbitrary string index for the edit.\n             Error messages returned by the server that pertain\n             to a specific edit will be identified by this value.\";\n        }\n        leaf operation {\n          type enumeration {\n            enum \"create\" {\n              description\n                \"The target data node is created using the supplied\n                 value, only if it does not already exist.  The\n                 'target' leaf identifies the data node to be\n                 created, not the parent data node.\";\n            }\n            enum \"delete\" {\n              description\n                \"Delete the target node, only if the data resource\n                 currently exists; otherwise, return an error.\";\n            }\n            enum \"insert\" {\n              description\n                \"Insert the supplied value into a user-ordered\n                 list or leaf-list entry.  The target node must\n                 represent a new data resource.  If the 'where'\n                 parameter is set to 'before' or 'after', then\n                 the 'point' parameter identifies the insertion\n                 point for the target node.\";\n            }\n            enum \"merge\" {\n              description\n                \"The supplied value is merged with the target data\n                 node.\";\n            }\n            enum \"move\" {\n              description\n                \"Move the target node.  Reorder a user-ordered\n                 list or leaf-list.  The target node must represent\n                 an existing data resource.  If the 'where' parameter\n                 is set to 'before' or 'after', then the 'point'\n                 parameter identifies the insertion point to move\n                 the target node.\";\n            }\n            enum \"replace\" {\n              description\n                \"The supplied value is used to replace the target\n                 data node.\";\n            }\n            enum \"remove\" {\n              description\n                \"Delete the target node if it currently exists.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The datastore operation requested for the associated\n             'edit' entry.\";\n        }\n        leaf target {\n          type target-resource-offset;\n          mandatory true;\n          description\n            \"Identifies the target data node for the edit\n             operation.  If the target has the value '/', then\n             the target data node is the target resource.\n             The target node MUST identify a data resource,\n             not the datastore resource.\";\n        }\n        leaf point {\n          when \"(../operation = 'insert' or ../operation = 'move')and (../where = 'before' or ../where = 'after')\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations, before or after an existing entry.\";\n          }\n          type target-resource-offset;\n          description\n            \"The absolute URL path for the data node that is being\n             used as the insertion point or move point for the\n             target of this 'edit' entry.\";\n        }\n        leaf where {\n          when \"../operation = 'insert' or ../operation = 'move'\" {\n            description\n              \"This leaf only applies for 'insert' or 'move'\n               operations.\";\n          }\n          type enumeration {\n            enum \"before\" {\n              description\n                \"Insert or move a data node before the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"after\" {\n              description\n                \"Insert or move a data node after the data resource\n                 identified by the 'point' parameter.\";\n            }\n            enum \"first\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the first entry.\";\n            }\n            enum \"last\" {\n              description\n                \"Insert or move a data node so it becomes ordered\n                 as the last entry.\";\n            }\n          }\n          default \"last\";\n          description\n            \"Identifies where a data resource will be inserted\n             or moved.  YANG only allows these operations for\n             list and leaf-list data nodes that are\n             'ordered-by user'.\";\n        }\n        anydata value {\n          when \"../operation = 'create' or ../operation = 'merge' or ../operation = 'replace' or ../operation = 'insert'\" {\n            description\n              \"The anydata 'value' is only used for 'create',\n               'merge', 'replace', and 'insert' operations.\";\n          }\n          description\n            \"Value used for this edit operation.  The anydata 'value'\n             contains the target resource associated with the\n             'target' leaf.\n\n             For example, suppose the target node is a YANG container\n             named foo:\n\n                 container foo {\n                   leaf a { type string; }\n                   leaf b { type int32; }\n                 }\n\n             The 'value' node contains one instance of foo:\n\n                 <value>\n                    <foo xmlns='example-foo-namespace'>\n                       <a>some value</a>\n                       <b>42</b>\n                    </foo>\n                 </value>\n              \";\n        }\n      }\n    }\n  }\n\n  grouping yang-patch-status {\n    description\n      \"A grouping that contains a YANG container representing the\n       syntax and semantics of a YANG Patch Status response\n       message.\";\n    container yang-patch-status {\n      description\n        \"A container representing the response message sent by the\n         server after a YANG Patch edit request message has been\n         processed.\";\n      leaf patch-id {\n        type string;\n        mandatory true;\n        description\n          \"The 'patch-id' value used in the request.\";\n      }\n      choice global-status {\n        description\n          \"Report global errors or complete success.\n           If there is no case selected, then errors\n           are reported in the 'edit-status' container.\";\n        case global-errors {\n          description\n            \"This container will be present if global errors that\n             are unrelated to a specific edit occurred.\";\n          uses rc:errors;\n        }\n        leaf ok {\n          type empty;\n          description\n            \"This leaf will be present if the request succeeded\n             and there are no errors reported in the 'edit-status'\n             container.\";\n        }\n      }\n      container edit-status {\n        description\n          \"This container will be present if there are\n           edit-specific status responses to report.\n           If all edits succeeded and the 'global-status'\n           returned is 'ok', then a server MAY omit this\n           container.\";\n        list edit {\n          key \"edit-id\";\n          description\n            \"Represents a list of status responses,\n             corresponding to edits in the YANG Patch\n             request message.  If an 'edit' entry was\n             skipped or not reached by the server,\n             then this list will not contain a corresponding\n             entry for that edit.\";\n          leaf edit-id {\n            type string;\n            description\n              \"Response status is for the 'edit' list entry\n               with this 'edit-id' value.\";\n          }\n          choice edit-status-choice {\n            description\n              \"A choice between different types of status\n               responses for each 'edit' entry.\";\n            leaf ok {\n              type empty;\n              description\n                \"This 'edit' entry was invoked without any\n                 errors detected by the server associated\n                 with this edit.\";\n            }\n            case errors {\n              description\n                \"The server detected errors associated with the\n                 edit identified by the same 'edit-id' value.\";\n              uses rc:errors;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-restconf",
                  "subject": "ietf-restconf-subject",
                  "schema": "module ietf-restconf {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-restconf\";\n  prefix rc;\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\n\n     Author:   Kent Watsen\n               &lt;mailto:kwatsen@juniper.net&gt;\";\n  description\n    \"This module contains conceptual YANG specifications\n     for basic RESTCONF media type definitions used in\n     RESTCONF protocol messages.\n\n     Note that the YANG definitions within this module do not\n     represent configuration data of any kind.\n     The 'restconf-media-type' YANG extension statement\n     provides a normative syntax for XML and JSON\n     message-encoding purposes.\n\n     Copyright (c) 2017 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8040; see\n     the RFC itself for full legal notices.\";\n\n  revision 2017-01-26 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8040: RESTCONF Protocol.\";\n  }\n\n  extension yang-data {\n    argument name {\n      yin-element true;\n    }\n    description\n      \"This extension is used to specify a YANG data template that\n       represents conceptual data defined in YANG.  It is\n       intended to describe hierarchical data independent of\n       protocol context or specific message-encoding format.\n       Data definition statements within a yang-data extension\n       specify the generic syntax for the specific YANG data\n       template, whose name is the argument of the 'yang-data'\n       extension statement.\n\n       Note that this extension does not define a media type.\n       A specification using this extension MUST specify the\n       message-encoding rules, including the content media type.\n\n       The mandatory 'name' parameter value identifies the YANG\n       data template that is being defined.  It contains the\n       template name.\n\n       This extension is ignored unless it appears as a top-level\n       statement.  It MUST contain data definition statements\n       that result in exactly one container data node definition.\n       An instance of a YANG data template can thus be translated\n       into an XML instance document, whose top-level element\n       corresponds to the top-level container.\n       The module name and namespace values for the YANG module using\n       the extension statement are assigned to instance document data\n       conforming to the data definition statements within\n       this extension.\n\n       The substatements of this extension MUST follow the\n       'data-def-stmt' rule in the YANG ABNF.\n\n       The XPath document root is the extension statement itself,\n       such that the child nodes of the document root are\n       represented by the data-def-stmt substatements within\n       this extension.  This conceptual document is the context\n       for the following YANG statements:\n\n         - must-stmt\n         - when-stmt\n         - path-stmt\n         - min-elements-stmt\n         - max-elements-stmt\n         - mandatory-stmt\n         - unique-stmt\n         - ordered-by\n         - instance-identifier data type\n\n       The following data-def-stmt substatements are constrained\n       when used within a 'yang-data' extension statement.\n\n         - The list-stmt is not required to have a key-stmt defined.\n         - The if-feature-stmt is ignored if present.\n         - The config-stmt is ignored if present.\n         - The available identity values for any 'identityref'\n           leaf or leaf-list nodes are limited to the module\n           containing this extension statement and the modules\n           imported into that module.\n       \";\n  }\n\n  rc:yang-data \"yang-errors\" {\n    uses errors;\n  }\n  rc:yang-data \"yang-api\" {\n    uses restconf;\n  }\n\n  grouping errors {\n    description\n      \"A grouping that contains a YANG container\n       representing the syntax and semantics of a\n       YANG Patch error report within a response message.\";\n    container errors {\n      description\n        \"Represents an error report returned by the server if\n         a request results in an error.\";\n      list error {\n        description\n          \"An entry containing information about one\n           specific error that occurred while processing\n           a RESTCONF request.\";\n        reference\n          \"RFC 6241, Section 4.3.\";\n        leaf error-type {\n          type enumeration {\n            enum \"transport\" {\n              description\n                \"The transport layer.\";\n            }\n            enum \"rpc\" {\n              description\n                \"The rpc or notification layer.\";\n            }\n            enum \"protocol\" {\n              description\n                \"The protocol operation layer.\";\n            }\n            enum \"application\" {\n              description\n                \"The server application layer.\";\n            }\n          }\n          mandatory true;\n          description\n            \"The protocol layer where the error occurred.\";\n        }\n        leaf error-tag {\n          type string;\n          mandatory true;\n          description\n            \"The enumerated error-tag.\";\n        }\n        leaf error-app-tag {\n          type string;\n          description\n            \"The application-specific error-tag.\";\n        }\n        leaf error-path {\n          type instance-identifier;\n          description\n            \"The YANG instance identifier associated\n             with the error node.\";\n        }\n        leaf error-message {\n          type string;\n          description\n            \"A message describing the error.\";\n        }\n        anydata error-info {\n          description\n            \"This anydata value MUST represent a container with\n             zero or more data nodes representing additional\n             error information.\";\n        }\n      }\n    }\n  }\n\n  grouping restconf {\n    description\n      \"Conceptual grouping representing the RESTCONF\n       root resource.\";\n    container restconf {\n      description\n        \"Conceptual container representing the RESTCONF\n         root resource.\";\n      container data {\n        description\n          \"Container representing the datastore resource.\n           Represents the conceptual root of all state data\n           and configuration data supported by the server.\n           The child nodes of this container can be any data\n           resources that are defined as top-level data nodes\n           from the YANG modules advertised by the server in\n           the 'ietf-yang-library' module.\";\n      }\n      container operations {\n        description\n          \"Container for all operation resources.\n\n           Each resource is represented as an empty leaf with the\n           name of the RPC operation from the YANG 'rpc' statement.\n\n           For example, the 'system-restart' RPC operation defined\n           in the 'ietf-system' module would be represented as\n           an empty leaf in the 'ietf-system' namespace.  This is\n           a conceptual leaf and will not actually be found in\n           the module:\n\n              module ietf-system {\n                leaf system-reset {\n                  type empty;\n                }\n              }\n\n           To invoke the 'system-restart' RPC operation:\n\n              POST /restconf/operations/ietf-system:system-restart\n\n           To discover the RPC operations supported by the server:\n\n              GET /restconf/operations\n\n           In XML, the YANG module namespace identifies the module:\n\n             &lt;system-restart\n                xmlns='urn:ietf:params:xml:ns:yang:ietf-system'/&gt;\n\n           In JSON, the YANG module name identifies the module:\n\n             { 'ietf-system:system-restart' : [null] }\n           \";\n      }\n      leaf yang-library-version {\n        type string {\n          pattern \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";\n        }\n        config false;\n        mandatory true;\n        description\n          \"Identifies the revision date of the 'ietf-yang-library'\n           module that is implemented by this RESTCONF server.\n           Indicates the year, month, and day in YYYY-MM-DD\n           numeric format.\";\n      }\n    }\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": {
            "features": [
              "on-change"
            ]
          }
        },
        {
          "name": "ietf-system-capabilities",
          "subject": "ietf-system-capabilities-subject",
          "schema": "module ietf-system-capabilities {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-system-capabilities\";\n  prefix sysc;\n\n  import ietf-netconf-acm {\n    prefix nacm;\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  import ietf-yang-library {\n    prefix yanglib;\n    description\n      \"This module requires ietf-yang-library to be implemented.\n       Revision 2019-01-04 or a revision derived from it\n       is REQUIRED.\";\n    reference\n      \"RFC8525: YANG Library\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Editor:   Balazs Lengyel\n               <mailto:balazs.lengyel@ericsson.com>\";\n  description\n    \"This module specifies a structure to specify system\n     capabilities for a server or a publisher.  System capabilities\n     may include capabilities of a NETCONF or RESTCONF server or a\n     notification publisher.\n\n     This module does not contain any specific capabilities; it only\n     provides a structure where containers containing the actual\n     capabilities are augmented in.\n\n     Capability values can be specified at the system level, at the\n     datastore level (by selecting all nodes in the datastore), or\n     for specific data nodes of a specific datastore (and their\n     contained subtrees).\n     Capability values specified for a specific datastore or\n     node-set override values specified on the system/publisher\n     level.\n\n     The same grouping MUST be used to define hierarchical\n     capabilities supported both at the system level and at the\n     datastore/data-node level.\n\n     To find a capability value for a specific data node in a\n     specific datastore, the user SHALL:\n\n     1) search for a datastore-capabilities list entry for\n     the specific datastore.  When stating a specific capability, the\n     relative path for any specific capability must be the same\n     under the system-capabilities container and under the\n     per-node-capabilities list.\n\n     2) If the datastore entry is found within that entry, process\n     all per-node-capabilities entries in the order they appear in\n     the list.  The first entry that specifies the specific\n     capability and has a node-selector selecting the specific data\n     node defines the capability value.\n\n     3) If the capability value is not found above and the specific\n     capability is specified under the system-capabilities container\n     (outside the datastore-capabilities list), this value shall be\n     used.\n\n     4) If no values are found in the previous steps, the\n     system/publisher is not capable of providing a value.  Possible\n     reasons are that it is unknown, the capability is changing for\n     some reason, there is no specified limit, etc.  In this case,\n     the system's behavior is unspecified.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',\n     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',\n     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document\n     are to be interpreted as described in BCP 14 (RFC 2119)\n     (RFC 8174) when, and only when, they appear in all\n     capitals, as shown here.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Revised BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 9196\n     (https://www.rfc-editor.org/info/rfc9196); see the RFC itself\n     for full legal notices.\";\n\n  revision 2022-02-17 {\n    description\n      \"Initial version\";\n    reference\n      \"RFC 9196: YANG Modules Describing Capabilities for Systems\n       and Datastore Update Notifications\";\n  }\n\n  container system-capabilities {\n    config false;\n    description\n      \"System capabilities.\n       Capability values specified here at the system level\n       are valid for all datastores and are used when the\n       capability is not specified at the datastore level\n       or for specific data nodes.\";\n    list datastore-capabilities {\n      key \"datastore\";\n      description\n        \"Capabilities values per datastore.\n\n         For non-NMDA servers/publishers, 'config false' data is\n         considered as if it were part of the running datastore.\";\n      leaf datastore {\n        type leafref {\n          path \"/yanglib:yang-library/yanglib:datastore/yanglib:name\";\n        }\n        description\n          \"The datastore for which capabilities are defined.\n           Only one specific datastore can be specified,\n           e.g., ds:conventional must not be used, as it\n           represents a set of configuration datastores.\";\n      }\n      list per-node-capabilities {\n        description\n          \"Each list entry specifies capabilities for the selected\n           data nodes.  The same capabilities apply to the data nodes\n           in the subtree below the selected nodes.\n\n           The system SHALL order the entries according to their\n           precedence. The order of the entries MUST NOT change\n           unless the underlying capabilities also change.\n\n           Note that the longest patch matching can be achieved\n           by ordering more specific matches before less\n           specific ones.\";\n        choice node-selection {\n          description\n            \"A method to select some or all nodes within a\n             datastore.\";\n          leaf node-selector {\n            type nacm:node-instance-identifier;\n            description\n              \"Selects the data nodes for which capabilities are\n               specified. The special value '/' denotes all data\n               nodes in the datastore, consistent with the path\n               leaf node on page 41 of [RFC8341].\";\n            reference\n              \"RFC 8341: Network Configuration Access Control Model\";\n          }\n        }\n      }\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-netconf-acm",
              "subject": "ietf-netconf-acm-subject",
              "schema": "module ietf-netconf-acm {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-netconf-acm\";\n  prefix nacm;\n\n  import ietf-yang-types {\n    prefix yang;\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   &lt;https://datatracker.ietf.org/wg/netconf/&gt;\n     WG List:  &lt;mailto:netconf@ietf.org&gt;\n\n     Author:   Andy Bierman\n               &lt;mailto:andy@yumaworks.com&gt;\n\n     Author:   Martin Bjorklund\n               &lt;mailto:mbj@tail-f.com&gt;\";\n  description\n    \"Network Configuration Access Control Model.\n\n     Copyright (c) 2012 - 2018 IETF Trust and the persons\n     identified as authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD\n     License set forth in Section 4.c of the IETF Trust's\n     Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8341; see\n     the RFC itself for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Added support for YANG 1.1 actions and notifications tied to\n       data nodes.  Clarified how NACM extensions can be used by\n       other data models.\";\n    reference\n      \"RFC 8341: Network Configuration Access Control Model\";\n  }\n  revision 2012-02-22 {\n    description\n      \"Initial version.\";\n    reference\n      \"RFC 6536: Network Configuration Protocol (NETCONF)\n                 Access Control Model\";\n  }\n\n  extension default-deny-write {\n    description\n      \"Used to indicate that the data model node\n       represents a sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have write access to the node.  An\n       explicit access control rule is required for all other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-write' extension MAY appear within a data\n       definition statement.  It is ignored otherwise.\";\n  }\n  extension default-deny-all {\n    description\n      \"Used to indicate that the data model node\n       controls a very sensitive security system parameter.\n\n       If present, the NETCONF server will only allow the designated\n       'recovery session' to have read, write, or execute access to\n       the node.  An explicit access control rule is required for all\n       other users.\n\n       If the NACM module is used, then it must be enabled (i.e.,\n       /nacm/enable-nacm object equals 'true'), or this extension\n       is ignored.\n\n       The 'default-deny-all' extension MAY appear within a data\n       definition statement, 'rpc' statement, or 'notification'\n       statement.  It is ignored otherwise.\";\n  }\n\n  typedef user-name-type {\n    type string {\n      length \"1..max\";\n    }\n    description\n      \"General-purpose username string.\";\n  }\n\n  typedef matchall-string-type {\n    type string {\n      pattern \"\\\\*\";\n    }\n    description\n      \"The string containing a single asterisk '*' is used\n       to conceptually represent all possible values\n       for the particular leaf using this data type.\";\n  }\n\n  typedef access-operations-type {\n    type bits {\n      bit create {\n        description\n          \"Any protocol operation that creates a\n           new data node.\";\n      }\n      bit read {\n        description\n          \"Any protocol operation or notification that\n           returns the value of a data node.\";\n      }\n      bit update {\n        description\n          \"Any protocol operation that alters an existing\n           data node.\";\n      }\n      bit delete {\n        description\n          \"Any protocol operation that removes a data node.\";\n      }\n      bit exec {\n        description\n          \"Execution access to the specified protocol operation.\";\n      }\n    }\n    description\n      \"Access operation.\";\n  }\n\n  typedef group-name-type {\n    type string {\n      length \"1..max\";\n      pattern \"[^\\\\*].*\";\n    }\n    description\n      \"Name of administrative group to which\n       users can be assigned.\";\n  }\n\n  typedef action-type {\n    type enumeration {\n      enum \"permit\" {\n        description\n          \"Requested action is permitted.\";\n      }\n      enum \"deny\" {\n        description\n          \"Requested action is denied.\";\n      }\n    }\n    description\n      \"Action taken by the server when a particular\n       rule matches.\";\n  }\n\n  typedef node-instance-identifier {\n    type yang:xpath1.0;\n    description\n      \"Path expression used to represent a special\n       data node, action, or notification instance-identifier\n       string.\n\n       A node-instance-identifier value is an\n       unrestricted YANG instance-identifier expression.\n       All the same rules as an instance-identifier apply,\n       except that predicates for keys are optional.  If a key\n       predicate is missing, then the node-instance-identifier\n       represents all possible server instances for that key.\n\n       This XML Path Language (XPath) expression is evaluated in the\n       following context:\n\n          o  The set of namespace declarations are those in scope on\n             the leaf element where this type is used.\n\n          o  The set of variable bindings contains one variable,\n             'USER', which contains the name of the user of the\n             current session.\n\n          o  The function library is the core function library, but\n             note that due to the syntax restrictions of an\n             instance-identifier, no functions are allowed.\n\n          o  The context node is the root node in the data tree.\n\n       The accessible tree includes actions and notifications tied\n       to data nodes.\";\n  }\n\n  container nacm {\n    nacm:default-deny-all;\n    description\n      \"Parameters for NETCONF access control model.\";\n    leaf enable-nacm {\n      type boolean;\n      default \"true\";\n      description\n        \"Enables or disables all NETCONF access control\n         enforcement.  If 'true', then enforcement\n         is enabled.  If 'false', then enforcement\n         is disabled.\";\n    }\n    leaf read-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether read access is granted if\n         no appropriate rule is found for a\n         particular read request.\";\n    }\n    leaf write-default {\n      type action-type;\n      default \"deny\";\n      description\n        \"Controls whether create, update, or delete access\n         is granted if no appropriate rule is found for a\n         particular write request.\";\n    }\n    leaf exec-default {\n      type action-type;\n      default \"permit\";\n      description\n        \"Controls whether exec access is granted if no appropriate\n         rule is found for a particular protocol operation request.\";\n    }\n    leaf enable-external-groups {\n      type boolean;\n      default \"true\";\n      description\n        \"Controls whether the server uses the groups reported by the\n         NETCONF transport layer when it assigns the user to a set of\n         NACM groups.  If this leaf has the value 'false', any group\n         names reported by the transport layer are ignored by the\n         server.\";\n    }\n    leaf denied-operations {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request was denied.\";\n    }\n    leaf denied-data-writes {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that a\n         protocol operation request to alter\n         a configuration datastore was denied.\";\n    }\n    leaf denied-notifications {\n      type yang:zero-based-counter32;\n      config false;\n      mandatory true;\n      description\n        \"Number of times since the server last restarted that\n         a notification was dropped for a subscription because\n         access to the event type was denied.\";\n    }\n    container groups {\n      description\n        \"NETCONF access control groups.\";\n      list group {\n        key \"name\";\n        description\n          \"One NACM group entry.  This list will only contain\n           configured entries, not any entries learned from\n           any transport protocols.\";\n        leaf name {\n          type group-name-type;\n          description\n            \"Group name associated with this entry.\";\n        }\n        leaf-list user-name {\n          type user-name-type;\n          description\n            \"Each entry identifies the username of\n             a member of the group associated with\n             this entry.\";\n        }\n      }\n    }\n    list rule-list {\n      key \"name\";\n      ordered-by user;\n      description\n        \"An ordered collection of access control rules.\";\n      leaf name {\n        type string {\n          length \"1..max\";\n        }\n        description\n          \"Arbitrary name assigned to the rule-list.\";\n      }\n      leaf-list group {\n        type union {\n          type matchall-string-type;\n          type group-name-type;\n        }\n        description\n          \"List of administrative groups that will be\n           assigned the associated access rights\n           defined by the 'rule' list.\n\n           The string '*' indicates that all groups apply to the\n           entry.\";\n      }\n      list rule {\n        key \"name\";\n        ordered-by user;\n        description\n          \"One access control rule.\n\n           Rules are processed in user-defined order until a match is\n           found.  A rule matches if 'module-name', 'rule-type', and\n           'access-operations' match the request.  If a rule\n           matches, the 'action' leaf determines whether or not\n           access is granted.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Arbitrary name assigned to the rule.\";\n        }\n        leaf module-name {\n          type union {\n            type matchall-string-type;\n            type string;\n          }\n          default \"*\";\n          description\n            \"Name of the module associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             object being accessed is defined in the module with the\n             specified module name.\";\n        }\n        choice rule-type {\n          description\n            \"This choice matches if all leafs present in the rule\n             match the request.  If no leafs are present, the\n             choice matches all requests.\";\n          case protocol-operation {\n            leaf rpc-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if\n                 its value equals the requested protocol operation\n                 name.\";\n            }\n          }\n          case notification {\n            leaf notification-name {\n              type union {\n                type matchall-string-type;\n                type string;\n              }\n              description\n                \"This leaf matches if it has the value '*' or if its\n                 value equals the requested notification name.\";\n            }\n          }\n          case data-node {\n            leaf path {\n              type node-instance-identifier;\n              mandatory true;\n              description\n                \"Data node instance-identifier associated with the\n                 data node, action, or notification controlled by\n                 this rule.\n\n                 Configuration data or state data\n                 instance-identifiers start with a top-level\n                 data node.  A complete instance-identifier is\n                 required for this type of path value.\n\n                 The special value '/' refers to all possible\n                 datastore contents.\";\n            }\n          }\n        }\n        leaf access-operations {\n          type union {\n            type matchall-string-type;\n            type access-operations-type;\n          }\n          default \"*\";\n          description\n            \"Access operations associated with this rule.\n\n             This leaf matches if it has the value '*' or if the\n             bit corresponding to the requested operation is set.\";\n        }\n        leaf action {\n          type action-type;\n          mandatory true;\n          description\n            \"The access control action associated with the\n             rule.  If a rule has been determined to match a\n             particular request, then this object is used\n             to determine whether to permit or deny the\n             request.\";\n        }\n        leaf comment {\n          type string;\n          description\n            \"A textual description of the access rule.\";\n        }\n      }\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-yang-library",
              "subject": "ietf-yang-library-subject",
              "schema": "module ietf-yang-library {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-library\";\n  prefix yanglib;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture\n                 (NMDA)\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Kent Watsen\n               <mailto:kent+ietf@watsen.net>\n\n     Author:   Robert Wilton\n               <mailto:rwilton@cisco.com>\";\n  description\n    \"This module provides information about the YANG modules,\n     datastores, and datastore schemas used by a network\n     management server.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8525; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-04 {\n    description\n      \"Added support for multiple datastores according to the\n       Network Management Datastore Architecture (NMDA).\";\n    reference\n      \"RFC 8525: YANG Library\";\n  }\n  revision 2016-04-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7895: YANG Module Library\";\n  }\n\n  typedef revision-identifier {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}';\n    }\n    description\n      \"Represents a specific date in YYYY-MM-DD format.\";\n  }\n\n  grouping module-identification-leafs {\n    description\n      \"Parameters for identifying YANG modules and submodules.\";\n    leaf name {\n      type yang:yang-identifier;\n      mandatory true;\n      description\n        \"The YANG module or submodule name.\";\n    }\n    leaf revision {\n      type revision-identifier;\n      description\n        \"The YANG module or submodule revision date.  If no revision\n         statement is present in the YANG module or submodule, this\n         leaf is not instantiated.\";\n    }\n  }\n\n  grouping location-leaf-list {\n    description\n      \"Common leaf-list parameter for the locations of modules and\n       submodules.\";\n    leaf-list location {\n      type inet:uri;\n      description\n        \"Contains a URL that represents the YANG schema\n         resource for this module or submodule.\n\n         This leaf will only be present if there is a URL\n         available for retrieval of the schema for this entry.\";\n    }\n  }\n\n  grouping module-implementation-parameters {\n    description\n      \"Parameters for describing the implementation of a module.\";\n    leaf-list feature {\n      type yang:yang-identifier;\n      description\n        \"List of all YANG feature names from this module that are\n         supported by the server, regardless whether they are defined\n         in the module or any included submodule.\";\n    }\n    leaf-list deviation {\n      type leafref {\n        path \"../../module/name\";\n      }\n      description\n        \"List of all YANG deviation modules used by this server to\n         modify the conformance of the module associated with this\n         entry.  Note that the same module can be used for deviations\n         for multiple modules, so the same entry MAY appear within\n         multiple 'module' entries.\n\n         This reference MUST NOT (directly or indirectly)\n         refer to the module being deviated.\n\n         Robust clients may want to make sure that they handle a\n         situation where a module deviates itself (directly or\n         indirectly) gracefully.\";\n    }\n  }\n\n  grouping module-set-parameters {\n    description\n      \"A set of parameters that describe a module set.\";\n    leaf name {\n      type string;\n      description\n        \"An arbitrary name of the module set.\";\n    }\n    list module {\n      key \"name\";\n      description\n        \"An entry in this list represents a module implemented by the\n         server, as per Section 5.6.5 of RFC 7950, with a particular\n         set of supported features and deviations.\";\n      reference\n        \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n      uses module-identification-leafs;\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n      uses module-implementation-parameters;\n    }\n    list import-only-module {\n      key \"name revision\";\n      description\n        \"An entry in this list indicates that the server imports\n         reusable definitions from the specified revision of the\n         module but does not implement any protocol-accessible\n         objects from this revision.\n\n         Multiple entries for the same module name MAY exist.  This\n         can occur if multiple modules import the same module but\n         specify different revision dates in the import statements.\";\n      leaf name {\n        type yang:yang-identifier;\n        description\n          \"The YANG module name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        description\n          \"The YANG module revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module.\";\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n    }\n  }\n\n  grouping yang-library-parameters {\n    description\n      \"The YANG library data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    list module-set {\n      key \"name\";\n      description\n        \"A set of modules that may be used by one or more schemas.\n\n         A module set does not have to be referentially complete,\n         i.e., it may define modules that contain import statements\n         for other modules not included in the module set.\";\n      uses module-set-parameters;\n    }\n    list schema {\n      key \"name\";\n      description\n        \"A datastore schema that may be used by one or more\n         datastores.\n\n         The schema must be valid and referentially complete, i.e.,\n         it must contain modules to satisfy all used import\n         statements for all modules specified in the schema.\";\n      leaf name {\n        type string;\n        description\n          \"An arbitrary name of the schema.\";\n      }\n      leaf-list module-set {\n        type leafref {\n          path \"../../module-set/name\";\n        }\n        description\n          \"A set of module-sets that are included in this schema.\n           If a non-import-only module appears in multiple module\n           sets, then the module revision and the associated features\n           and deviations must be identical.\";\n      }\n    }\n    list datastore {\n      key \"name\";\n      description\n        \"A datastore supported by this server.\n\n         Each datastore indicates which schema it supports.\n\n         The server MUST instantiate one entry in this list per\n         specific datastore it supports.\n         Each datastore entry with the same datastore schema SHOULD\n         reference the same schema.\";\n      leaf name {\n        type ds:datastore-ref;\n        description\n          \"The identity of the datastore.\";\n      }\n      leaf schema {\n        type leafref {\n          path \"../../schema/name\";\n        }\n        mandatory true;\n        description\n          \"A reference to the schema supported by this datastore.\n           All non-import-only modules of the schema are implemented\n           with their associated features and deviations.\";\n      }\n    }\n  }\n\n  grouping module-list {\n    status deprecated;\n    description\n      \"The module data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    grouping common-leafs {\n      status deprecated;\n      description\n        \"Common parameters for YANG modules and submodules.\";\n      leaf name {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"The YANG module or submodule name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        status deprecated;\n        description\n          \"The YANG module or submodule revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module or submodule.\";\n      }\n    }\n    grouping schema-leaf {\n      status deprecated;\n      description\n        \"Common schema leaf parameter for modules and submodules.\";\n      leaf schema {\n        type inet:uri;\n        description\n          \"Contains a URL that represents the YANG schema\n           resource for this module or submodule.\n\n           This leaf will only be present if there is a URL\n           available for retrieval of the schema for this entry.\";\n      }\n    }\n    list module {\n      key \"name revision\";\n      status deprecated;\n      description\n        \"Each entry represents one revision of one module\n         currently supported by the server.\";\n      uses common-leafs {\n        status deprecated;\n      }\n      uses schema-leaf {\n        status deprecated;\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        status deprecated;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      leaf-list feature {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"List of YANG feature names from this module that are\n           supported by the server, regardless of whether they are\n           defined in the module or any included submodule.\";\n      }\n      list deviation {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"List of YANG deviation module names and revisions\n           used by this server to modify the conformance of\n           the module associated with this entry.  Note that\n           the same module can be used for deviations for\n           multiple modules, so the same entry MAY appear\n           within multiple 'module' entries.\n\n           The deviation module MUST be present in the 'module'\n           list, with the same name and revision values.\n           The 'conformance-type' value will be 'implement' for\n           the deviation module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n      }\n      leaf conformance-type {\n        type enumeration {\n          enum \"implement\" {\n            description\n              \"Indicates that the server implements one or more\n               protocol-accessible objects defined in the YANG module\n               identified in this entry.  This includes deviation\n               statements defined in the module.\n\n               For YANG version 1.1 modules, there is at most one\n               'module' entry with conformance type 'implement' for a\n               particular module name, since YANG 1.1 requires that\n               at most one revision of a module is implemented.\n\n               For YANG version 1 modules, there SHOULD NOT be more\n               than one 'module' entry for a particular module\n               name.\";\n          }\n          enum \"import\" {\n            description\n              \"Indicates that the server imports reusable definitions\n               from the specified revision of the module but does\n               not implement any protocol-accessible objects from\n               this revision.\n\n               Multiple 'module' entries for the same module name MAY\n               exist.  This can occur if multiple modules import the\n               same module but specify different revision dates in\n               the import statements.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"Indicates the type of conformance the server is claiming\n           for the YANG module identified by this entry.\";\n      }\n      list submodule {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n        uses schema-leaf {\n          status deprecated;\n        }\n      }\n    }\n  }\n\n  container yang-library {\n    config false;\n    description\n      \"Container holding the entire YANG library of this server.\";\n    uses yang-library-parameters;\n    leaf content-id {\n      type string;\n      mandatory true;\n      description\n        \"A server-generated identifier of the contents of the\n         '/yang-library' tree.  The server MUST change the value of\n         this leaf if the information represented by the\n         '/yang-library' tree, except '/yang-library/content-id', has\n         changed.\";\n    }\n  }\n  container modules-state {\n    config false;\n    status deprecated;\n    description\n      \"Contains YANG module monitoring information.\";\n    leaf module-set-id {\n      type string;\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains a server-specific identifier representing\n         the current set of modules and submodules.  The\n         server MUST change the value of this leaf if the\n         information represented by the 'module' list instances\n         has changed.\";\n    }\n    uses module-list {\n      status deprecated;\n    }\n  }\n\n  notification yang-library-update {\n    description\n      \"Generated when any YANG library information on the\n       server has changed.\";\n    leaf content-id {\n      type leafref {\n        path \"/yanglib:yang-library/yanglib:content-id\";\n      }\n      mandatory true;\n      description\n        \"Contains the YANG library content identifier for the updated\n         YANG library at the time the notification is generated.\";\n    }\n  }\n  notification yang-library-change {\n    status deprecated;\n    description\n      \"Generated when the set of modules and submodules supported\n       by the server has changed.\";\n    leaf module-set-id {\n      type leafref {\n        path \"/yanglib:modules-state/yanglib:module-set-id\";\n      }\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains the module-set-id value representing the\n         set of modules and submodules supported at the server\n         at the time the notification is generated.\";\n    }\n  }\n}\n",
              "references": [
                {
                  "name": "ietf-yang-types",
                  "subject": "ietf-yang-types-subject",
                  "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-inet-types",
                  "subject": "ietf-inet-types-subject",
                  "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                },
                {
                  "name": "ietf-datastores",
                  "subject": "ietf-datastores-subject",
                  "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
                  "references": [],
                  "properties": null,
                  "tags": null
                }
              ],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        }
      ],
      "properties": null,
      "tags": null
    }
  ],
  "properties": null,
  "tags": {
    "features": [
      "yang-push-observation-timestamp",
      "yang-push-subscription-filter-metadata"
    ]
  }
}