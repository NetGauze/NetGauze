{
  "name": "ietf-telemetry-message",
  "schema_type": {
    "Other": "YANG"
  },
  "schema": "module ietf-telemetry-message {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-telemetry-message\";\n  prefix tm;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-platform-manifest {\n    prefix p-mf;\n    reference\n      \"draft-ietf-opsawg-collected-data-manifest: A Data Manifest for\n       Contextualized Telemetry Data\";\n  }\n\n  organization\n    \"IETF Draft\";\n  contact\n    \"Author:    Ahmed Elhassany\n                <mailto:ahmed.elhassany@swisscom.com>\n\n                Thomas Graf\n                <mailto:thomas.graf@swisscom.com>\";\n  description\n    \"This YANG module defines an extensible message schema to be used at\n     data collection to transform Network Telemetry messages towards\n     external systems such as Message Brokers.\n\n     Copyright (c) 2025 IETF Trust and the persons identified as\n       authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or without\n     modification, is permitted pursuant to, and subject to the license\n     terms contained in, the Revised BSD License set forth in Section\n     4.c of the IETF Trust's Legal Provisions Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC XXXX; see the RFC\n     itself for full legal notices.\";\n\n  revision 2025-06-10 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC XXXX\";\n  }\n\n  feature network-node-manifest {\n    description\n      \"This feature indicates the network node manifest support.\";\n  }\n\n  feature data-collection-manifest {\n    description\n      \"This feature indicates the data collection manifest support.\";\n  }\n\n  identity session-protocol {\n    description\n      \"Base identity to represent session protocols.\";\n  }\n\n  identity yp-push {\n    base session-protocol;\n    description\n      \"YANG-Push in RFC 8640 or RFC 8641 or RFC 8650.\";\n    reference\n      \"RFC 8640, RFC 8641, RFC 8650: YANG-Push Events and Notifications\n       for Datastores.\";\n  }\n\n  identity netconf {\n    base session-protocol;\n    description\n      \"NETCONF GET RPC as described in RFC 6241.\";\n    reference\n      \"RFC 6241: NETCONF GET RPC.\";\n  }\n\n  identity restconf {\n    base session-protocol;\n    description\n      \"RESTCONF HTTP GET as described in RFC 8040.\";\n    reference\n      \"RFC 8040: HTTP GET.\";\n  }\n\n  typedef telemetry-notification-event-type {\n    type enumeration {\n      enum \"log\" {\n        description\n          \"Collector is reporting the event as it arrived from the\n           network element.\";\n      }\n      enum \"update\" {\n        description\n          \"Collector has updated an entry inside its local cache.\n           This could be triggered by an event from the network for\n           instance interface operational status changed or an internal\n           event in the collector, such as a timer triggered to referesh\n           old enteries.\";\n      }\n      enum \"delete\" {\n        description\n          \"Collector has deleted an entry from its local cache.\";\n      }\n    }\n    description\n      \"Type of event reported by the collector.\";\n  }\n\n  typedef telemetry-session-protocol-type {\n    type identityref {\n      base session-protocol;\n    }\n    description\n      \"Network Telemetry protocol used to deliver the notification\n       between the network node and the data collector.\";\n  }\n\n  container message {\n    config false;\n    description\n      \"Telemetry message used within the Data Mesh\";\n    container network-node-manifest {\n      if-feature \"network-node-manifest\";\n      description\n        \"Contains the Data Manifest about the network node that\n         exported Network Telemetry data.\";\n      uses p-mf:platform-details;\n    }\n    container telemetry-message-metadata {\n      description\n        \"contains the session information about the session between the\n         collector and the network node.\";\n      leaf node-export-timestamp {\n        type yang:date-and-time;\n        description\n          \"Timestamp when the Network Telemetry data has been exported\n           from network element. This can be obtained in YANG-Push from\n           event-time defined in draft-ietf-netconf-notif-envelope or\n           in IPFIX from the export time in the message header as\n           defined in RFC 7011 or in BMP from the timestamp in The\n           per-peer header as defined in RFC 7854.\";\n      }\n      leaf collection-timestamp {\n        type yang:date-and-time;\n        mandatory true;\n        description\n          \"Timestamp when the data collector collected the Network\n           Telemetry data from the network element.\";\n      }\n      leaf session-protocol {\n        type telemetry-session-protocol-type;\n        mandatory true;\n        description\n          \"Session protocol used to collect the Network Telemetry data\n           from the network node.\";\n      }\n      leaf export-address {\n        type inet:host;\n        mandatory true;\n        description\n          \"Network node IP address from where the Network Telemetry data\n           was exported from.\";\n      }\n      leaf export-port {\n        type inet:port-number;\n        description\n          \"Network node transport port number from where the Network\n           Telemetry data was exported.\";\n      }\n      leaf collection-address {\n        type inet:host;\n        description\n          \"Data collector IP address at which the Network Telemetry\n           data was collected.\";\n      }\n      leaf collection-port {\n        type inet:port-number;\n        description\n          \"Data collector transport port number at which the Network\n           Telemetry data was collected.\";\n      }\n    }\n    container data-collection-manifest {\n      if-feature \"data-collection-manifest\";\n      description\n        \"Contains the Data Manifest of the data collector which\n         collected the Network Telemetry data.\";\n      uses p-mf:platform-details;\n    }\n    container network-operator-metadata {\n      description\n        \"Network operator specific metadata added by the Network\n         Telemetry data collection.\";\n      list labels {\n        key \"name\";\n        description\n          \"Abritrary labels assigned by the data collector.\";\n        leaf name {\n          type string {\n            length \"1..max\";\n          }\n          description\n            \"Label name.\";\n        }\n        choice value {\n          mandatory true;\n          description\n            \"label value\";\n          choice string-choice {\n            description\n              \"String value\";\n            leaf string-value {\n              type string;\n              description\n                \"String value\";\n            }\n          }\n          choice anydata-choice {\n            description\n              \"YANG anydata value\";\n            anydata anydata-values {\n              description\n                \"anydata yang\";\n            }\n          }\n        }\n      }\n    }\n    anydata payload {\n      description\n        \"Message or notification received from network element.\";\n    }\n  }\n}\n",
  "references": [
    {
      "name": "ietf-platform-manifest",
      "subject": "ietf-platform-manifest",
      "schema": "module ietf-platform-manifest {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-platform-manifest\";\n  prefix p-mf;\n\n  import ietf-yang-library {\n    prefix yanglib;\n    reference\n      \"RFC8525: YANG Library\";\n  }\n\n  organization\n    \"IETF OPSAWG (Operations and Management Area) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/opsawg/>\n     WG List:  <mailto:opsawg@ietf.org>\n     Author:   Benoit Claise   <mailto:benoit.claise@huawei.com>\n     Author:   Jean Quilbeuf   <mailto:jean.quilbeuf@huawei.com>\n     Author:   Diego R. Lopez  <diego.r.lopez@telefonica.com>\n     Author:   Ignacio Dominguez\n                          <ignacio.dominguezmartinez@telefonica.com>\n     Author:   Thomas Graf     <thomas.graf@swisscom.com>\";\n  description\n    \"This module describes the platform information to be used as\n     context of data collection from a given network element. The\n     contents of this model must be streamed along with the data\n     streamed from the network element so that the platform context\n     of the data collection can be retrieved later.\n\n     The data content of this model should not change except on\n     upgrade or patching of the device.\n\n     Copyright (c) 2022 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Revised BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n     This version of this YANG module is part of RFC XXXX; see the\n     RFC itself for full legal notices.  \";\n\n  revision 2025-02-21 {\n    description\n      \"Initial revision\";\n    reference\n      \"RFC xxxx: A Data Manifest for Contextualized Telemetry Data\";\n  }\n\n  grouping platform-details {\n    description\n      \"This grouping contains the information about a particular\n       platform, as stored in the YANG catalog.\";\n    leaf name {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"Model of the platform from which data is collected.\";\n    }\n    leaf vendor {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"Organization that implements that platform.\";\n    }\n    leaf vendor-pen {\n      type uint32;\n      description\n        \"Vendor's registered Private Enterprise Number\";\n      reference\n        \"RFC9371: Registration Procedures for Private Enterprise\n         Numbers (PENs)\";\n    }\n    leaf software-version {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"Name of the version of software. With respect to most\n         network device appliances, this will be the operating system\n         version. But for other YANG module implementation, this\n         would be a version of appliance software. Ultimately, this\n         should correspond to a version string that will be\n         recognizable by the consumers of the platform.\";\n    }\n    leaf software-flavor {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"A variation of a specific version where YANG model support\n         may be different.  Depending on the vendor, this could be a\n         license, additional software component, or a feature set.\";\n    }\n    leaf os-version {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"Version of the operating system using this module. This is\n         primarily useful if the software implementing the module is\n         an application that requires a specific operating system\n         version.\";\n    }\n    leaf os-type {\n      type string {\n        length \"1..1023\";\n      }\n      description\n        \"Type of the operating system using this module. This is\n         primarily useful if the software implementing the module is\n         an application that requires a specific operating system\n         type.\";\n    }\n  }\n\n  container platforms {\n    config false;\n    description\n      \"Top container including all platforms in scope. If this model\n       is hosted on a single device, it should contain a single entry\n       in the list. At the network level, it should contain an entry\n       for every monitored platform.\";\n    list platform {\n      key \"id\";\n      description\n        \"Contains information about the platform that allows\n         identifying and understanding the individual data collection\n         information.\";\n      leaf id {\n        type string {\n          length \"1..1023\";\n        }\n        description\n          \"Identifies a given platform on the network, for instance\n           the 'sysName' of the platform. The 'id' has to be unique\n           within the network scope at every point in time. The same\n           id can point to different platform if they are not\n           simultaneously part of the network, e.g., when a device\n           associated to a particular id is replaced.\";\n      }\n      uses platform-details;\n      uses yanglib:yang-library-parameters;\n    }\n  }\n}\n",
      "references": [
        {
          "name": "ietf-yang-library",
          "subject": "ietf-yang-library",
          "schema": "module ietf-yang-library {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-library\";\n  prefix yanglib;\n\n  import ietf-yang-types {\n    prefix yang;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-inet-types {\n    prefix inet;\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  import ietf-datastores {\n    prefix ds;\n    reference\n      \"RFC 8342: Network Management Datastore Architecture\n                 (NMDA)\";\n  }\n\n  organization\n    \"IETF NETCONF (Network Configuration) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netconf/>\n     WG List:  <mailto:netconf@ietf.org>\n\n     Author:   Andy Bierman\n               <mailto:andy@yumaworks.com>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Kent Watsen\n               <mailto:kent+ietf@watsen.net>\n\n     Author:   Robert Wilton\n               <mailto:rwilton@cisco.com>\";\n  description\n    \"This module provides information about the YANG modules,\n     datastores, and datastore schemas used by a network\n     management server.\n\n     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL\n     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',\n     'MAY', and 'OPTIONAL' in this document are to be interpreted as\n     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,\n     they appear in all capitals, as shown here.\n\n     Copyright (c) 2019 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8525; see\n     the RFC itself for full legal notices.\";\n\n  revision 2019-01-04 {\n    description\n      \"Added support for multiple datastores according to the\n       Network Management Datastore Architecture (NMDA).\";\n    reference\n      \"RFC 8525: YANG Library\";\n  }\n  revision 2016-04-09 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 7895: YANG Module Library\";\n  }\n\n  typedef revision-identifier {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}';\n    }\n    description\n      \"Represents a specific date in YYYY-MM-DD format.\";\n  }\n\n  grouping module-identification-leafs {\n    description\n      \"Parameters for identifying YANG modules and submodules.\";\n    leaf name {\n      type yang:yang-identifier;\n      mandatory true;\n      description\n        \"The YANG module or submodule name.\";\n    }\n    leaf revision {\n      type revision-identifier;\n      description\n        \"The YANG module or submodule revision date.  If no revision\n         statement is present in the YANG module or submodule, this\n         leaf is not instantiated.\";\n    }\n  }\n\n  grouping location-leaf-list {\n    description\n      \"Common leaf-list parameter for the locations of modules and\n       submodules.\";\n    leaf-list location {\n      type inet:uri;\n      description\n        \"Contains a URL that represents the YANG schema\n         resource for this module or submodule.\n\n         This leaf will only be present if there is a URL\n         available for retrieval of the schema for this entry.\";\n    }\n  }\n\n  grouping module-implementation-parameters {\n    description\n      \"Parameters for describing the implementation of a module.\";\n    leaf-list feature {\n      type yang:yang-identifier;\n      description\n        \"List of all YANG feature names from this module that are\n         supported by the server, regardless whether they are defined\n         in the module or any included submodule.\";\n    }\n    leaf-list deviation {\n      type leafref {\n        path \"../../module/name\";\n      }\n      description\n        \"List of all YANG deviation modules used by this server to\n         modify the conformance of the module associated with this\n         entry.  Note that the same module can be used for deviations\n         for multiple modules, so the same entry MAY appear within\n         multiple 'module' entries.\n\n         This reference MUST NOT (directly or indirectly)\n         refer to the module being deviated.\n\n         Robust clients may want to make sure that they handle a\n         situation where a module deviates itself (directly or\n         indirectly) gracefully.\";\n    }\n  }\n\n  grouping module-set-parameters {\n    description\n      \"A set of parameters that describe a module set.\";\n    leaf name {\n      type string;\n      description\n        \"An arbitrary name of the module set.\";\n    }\n    list module {\n      key \"name\";\n      description\n        \"An entry in this list represents a module implemented by the\n         server, as per Section 5.6.5 of RFC 7950, with a particular\n         set of supported features and deviations.\";\n      reference\n        \"RFC 7950: The YANG 1.1 Data Modeling Language\";\n      uses module-identification-leafs;\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n      uses module-implementation-parameters;\n    }\n    list import-only-module {\n      key \"name revision\";\n      description\n        \"An entry in this list indicates that the server imports\n         reusable definitions from the specified revision of the\n         module but does not implement any protocol-accessible\n         objects from this revision.\n\n         Multiple entries for the same module name MAY exist.  This\n         can occur if multiple modules import the same module but\n         specify different revision dates in the import statements.\";\n      leaf name {\n        type yang:yang-identifier;\n        description\n          \"The YANG module name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        description\n          \"The YANG module revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module.\";\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      uses location-leaf-list;\n      list submodule {\n        key \"name\";\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses module-identification-leafs;\n        uses location-leaf-list;\n      }\n    }\n  }\n\n  grouping yang-library-parameters {\n    description\n      \"The YANG library data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    list module-set {\n      key \"name\";\n      description\n        \"A set of modules that may be used by one or more schemas.\n\n         A module set does not have to be referentially complete,\n         i.e., it may define modules that contain import statements\n         for other modules not included in the module set.\";\n      uses module-set-parameters;\n    }\n    list schema {\n      key \"name\";\n      description\n        \"A datastore schema that may be used by one or more\n         datastores.\n\n         The schema must be valid and referentially complete, i.e.,\n         it must contain modules to satisfy all used import\n         statements for all modules specified in the schema.\";\n      leaf name {\n        type string;\n        description\n          \"An arbitrary name of the schema.\";\n      }\n      leaf-list module-set {\n        type leafref {\n          path \"../../module-set/name\";\n        }\n        description\n          \"A set of module-sets that are included in this schema.\n           If a non-import-only module appears in multiple module\n           sets, then the module revision and the associated features\n           and deviations must be identical.\";\n      }\n    }\n    list datastore {\n      key \"name\";\n      description\n        \"A datastore supported by this server.\n\n         Each datastore indicates which schema it supports.\n\n         The server MUST instantiate one entry in this list per\n         specific datastore it supports.\n         Each datastore entry with the same datastore schema SHOULD\n         reference the same schema.\";\n      leaf name {\n        type ds:datastore-ref;\n        description\n          \"The identity of the datastore.\";\n      }\n      leaf schema {\n        type leafref {\n          path \"../../schema/name\";\n        }\n        mandatory true;\n        description\n          \"A reference to the schema supported by this datastore.\n           All non-import-only modules of the schema are implemented\n           with their associated features and deviations.\";\n      }\n    }\n  }\n\n  grouping module-list {\n    status deprecated;\n    description\n      \"The module data structure is represented as a grouping\n       so it can be reused in configuration or another monitoring\n       data structure.\";\n    grouping common-leafs {\n      status deprecated;\n      description\n        \"Common parameters for YANG modules and submodules.\";\n      leaf name {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"The YANG module or submodule name.\";\n      }\n      leaf revision {\n        type union {\n          type revision-identifier;\n          type string {\n            length \"0\";\n          }\n        }\n        status deprecated;\n        description\n          \"The YANG module or submodule revision date.\n           A zero-length string is used if no revision statement\n           is present in the YANG module or submodule.\";\n      }\n    }\n    grouping schema-leaf {\n      status deprecated;\n      description\n        \"Common schema leaf parameter for modules and submodules.\";\n      leaf schema {\n        type inet:uri;\n        description\n          \"Contains a URL that represents the YANG schema\n           resource for this module or submodule.\n\n           This leaf will only be present if there is a URL\n           available for retrieval of the schema for this entry.\";\n      }\n    }\n    list module {\n      key \"name revision\";\n      status deprecated;\n      description\n        \"Each entry represents one revision of one module\n         currently supported by the server.\";\n      uses common-leafs {\n        status deprecated;\n      }\n      uses schema-leaf {\n        status deprecated;\n      }\n      leaf namespace {\n        type inet:uri;\n        mandatory true;\n        status deprecated;\n        description\n          \"The XML namespace identifier for this module.\";\n      }\n      leaf-list feature {\n        type yang:yang-identifier;\n        status deprecated;\n        description\n          \"List of YANG feature names from this module that are\n           supported by the server, regardless of whether they are\n           defined in the module or any included submodule.\";\n      }\n      list deviation {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"List of YANG deviation module names and revisions\n           used by this server to modify the conformance of\n           the module associated with this entry.  Note that\n           the same module can be used for deviations for\n           multiple modules, so the same entry MAY appear\n           within multiple 'module' entries.\n\n           The deviation module MUST be present in the 'module'\n           list, with the same name and revision values.\n           The 'conformance-type' value will be 'implement' for\n           the deviation module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n      }\n      leaf conformance-type {\n        type enumeration {\n          enum \"implement\" {\n            description\n              \"Indicates that the server implements one or more\n               protocol-accessible objects defined in the YANG module\n               identified in this entry.  This includes deviation\n               statements defined in the module.\n\n               For YANG version 1.1 modules, there is at most one\n               'module' entry with conformance type 'implement' for a\n               particular module name, since YANG 1.1 requires that\n               at most one revision of a module is implemented.\n\n               For YANG version 1 modules, there SHOULD NOT be more\n               than one 'module' entry for a particular module\n               name.\";\n          }\n          enum \"import\" {\n            description\n              \"Indicates that the server imports reusable definitions\n               from the specified revision of the module but does\n               not implement any protocol-accessible objects from\n               this revision.\n\n               Multiple 'module' entries for the same module name MAY\n               exist.  This can occur if multiple modules import the\n               same module but specify different revision dates in\n               the import statements.\";\n          }\n        }\n        mandatory true;\n        status deprecated;\n        description\n          \"Indicates the type of conformance the server is claiming\n           for the YANG module identified by this entry.\";\n      }\n      list submodule {\n        key \"name revision\";\n        status deprecated;\n        description\n          \"Each entry represents one submodule within the\n           parent module.\";\n        uses common-leafs {\n          status deprecated;\n        }\n        uses schema-leaf {\n          status deprecated;\n        }\n      }\n    }\n  }\n\n  container yang-library {\n    config false;\n    description\n      \"Container holding the entire YANG library of this server.\";\n    uses yang-library-parameters;\n    leaf content-id {\n      type string;\n      mandatory true;\n      description\n        \"A server-generated identifier of the contents of the\n         '/yang-library' tree.  The server MUST change the value of\n         this leaf if the information represented by the\n         '/yang-library' tree, except '/yang-library/content-id', has\n         changed.\";\n    }\n  }\n  container modules-state {\n    config false;\n    status deprecated;\n    description\n      \"Contains YANG module monitoring information.\";\n    leaf module-set-id {\n      type string;\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains a server-specific identifier representing\n         the current set of modules and submodules.  The\n         server MUST change the value of this leaf if the\n         information represented by the 'module' list instances\n         has changed.\";\n    }\n    uses module-list {\n      status deprecated;\n    }\n  }\n\n  notification yang-library-update {\n    description\n      \"Generated when any YANG library information on the\n       server has changed.\";\n    leaf content-id {\n      type leafref {\n        path \"/yanglib:yang-library/yanglib:content-id\";\n      }\n      mandatory true;\n      description\n        \"Contains the YANG library content identifier for the updated\n         YANG library at the time the notification is generated.\";\n    }\n  }\n  notification yang-library-change {\n    status deprecated;\n    description\n      \"Generated when the set of modules and submodules supported\n       by the server has changed.\";\n    leaf module-set-id {\n      type leafref {\n        path \"/yanglib:modules-state/yanglib:module-set-id\";\n      }\n      mandatory true;\n      status deprecated;\n      description\n        \"Contains the module-set-id value representing the\n         set of modules and submodules supported at the server\n         at the time the notification is generated.\";\n    }\n  }\n}\n",
          "references": [
            {
              "name": "ietf-yang-types",
              "subject": "ietf-yang-types",
              "schema": "module ietf-yang-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-yang-types\";\n  prefix yang;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - yang-identifier\n       - hex-string\n       - uuid\n       - dotted-quad\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef counter32 {\n    type uint32;\n    description\n      \"The counter32 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter32 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter32 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter32.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter32 {\n    type yang:counter32;\n    default \"0\";\n    description\n      \"The zero-based-counter32 type represents a counter32\n       that has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^32-1 (4294967295 decimal), when it\n       wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter32 textual convention of the SMIv2.\";\n    reference\n      \"RFC 4502: Remote Network Monitoring Management Information\n                 Base Version 2\";\n  }\n\n  typedef counter64 {\n    type uint64;\n    description\n      \"The counter64 type represents a non-negative integer\n       that monotonically increases until it reaches a\n       maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Counters have no defined 'initial' value, and thus, a\n       single value of a counter has (in general) no information\n       content.  Discontinuities in the monotonically increasing\n       value normally occur at re-initialization of the\n       management system, and at other times as specified in the\n       description of a schema node using this type.  If such\n       other times can occur, for example, the creation of\n       a schema node of type counter64 at times other than\n       re-initialization, then a corresponding schema node\n       should be defined, with an appropriate type, to indicate\n       the last discontinuity.\n\n       The counter64 type should not be used for configuration\n       schema nodes.  A default statement SHOULD NOT be used in\n       combination with the type counter64.\n\n       In the value set and its semantics, this type is equivalent\n       to the Counter64 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef zero-based-counter64 {\n    type yang:counter64;\n    default \"0\";\n    description\n      \"The zero-based-counter64 type represents a counter64 that\n       has the defined 'initial' value zero.\n\n       A schema node of this type will be set to zero (0) on creation\n       and will thereafter increase monotonically until it reaches\n       a maximum value of 2^64-1 (18446744073709551615 decimal),\n       when it wraps around and starts increasing again from zero.\n\n       Provided that an application discovers a new schema node\n       of this type within the minimum time to wrap, it can use the\n       'initial' value as a delta.  It is important for a management\n       station to be aware of this minimum time and the actual time\n       between polls, and to discard data if the actual time is too\n       long or there is no defined minimum time.\n\n       In the value set and its semantics, this type is equivalent\n       to the ZeroBasedCounter64 textual convention of the SMIv2.\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef gauge32 {\n    type uint32;\n    description\n      \"The gauge32 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^32-1 (4294967295 decimal), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge32 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge32 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the Gauge32 type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef gauge64 {\n    type uint64;\n    description\n      \"The gauge64 type represents a non-negative integer, which\n       may increase or decrease, but shall never exceed a maximum\n       value, nor fall below a minimum value.  The maximum value\n       cannot be greater than 2^64-1 (18446744073709551615), and\n       the minimum value cannot be smaller than 0.  The value of\n       a gauge64 has its maximum value whenever the information\n       being modeled is greater than or equal to its maximum\n       value, and has its minimum value whenever the information\n       being modeled is smaller than or equal to its minimum value.\n       If the information being modeled subsequently decreases\n       below (increases above) the maximum (minimum) value, the\n       gauge64 also decreases (increases).\n\n       In the value set and its semantics, this type is equivalent\n       to the CounterBasedGauge64 SMIv2 textual convention defined\n       in RFC 2856\";\n    reference\n      \"RFC 2856: Textual Conventions for Additional High Capacity\n                 Data Types\";\n  }\n\n  typedef object-identifier {\n    type string {\n      pattern '(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*';\n    }\n    description\n      \"The object-identifier type represents administratively\n       assigned names in a registration-hierarchical-name tree.\n\n       Values of this type are denoted as a sequence of numerical\n       non-negative sub-identifier values.  Each sub-identifier\n       value MUST NOT exceed 2^32-1 (4294967295).  Sub-identifiers\n       are separated by single dots and without any intermediate\n       whitespace.\n\n       The ASN.1 standard restricts the value space of the first\n       sub-identifier to 0, 1, or 2.  Furthermore, the value space\n       of the second sub-identifier is restricted to the range\n       0 to 39 if the first sub-identifier is 0 or 1.  Finally,\n       the ASN.1 standard requires that an object identifier\n       has always at least two sub-identifiers.  The pattern\n       captures these restrictions.\n\n       Although the number of sub-identifiers is not limited,\n       module designers should realize that there may be\n       implementations that stick with the SMIv2 limit of 128\n       sub-identifiers.\n\n       This type is a superset of the SMIv2 OBJECT IDENTIFIER type\n       since it is not restricted to 128 sub-identifiers.  Hence,\n       this type SHOULD NOT be used to represent the SMIv2 OBJECT\n       IDENTIFIER type; the object-identifier-128 type SHOULD be\n       used instead.\";\n    reference\n      \"ISO9834-1: Information technology -- Open Systems\n       Interconnection -- Procedures for the operation of OSI\n       Registration Authorities: General procedures and top\n       arcs of the ASN.1 Object Identifier tree\";\n  }\n\n  typedef object-identifier-128 {\n    type object-identifier {\n      pattern '\\d*(\\.\\d*){1,127}';\n    }\n    description\n      \"This type represents object-identifiers restricted to 128\n       sub-identifiers.\n\n       In the value set and its semantics, this type is equivalent\n       to the OBJECT IDENTIFIER type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef yang-identifier {\n    type string {\n      length \"1..max\";\n      pattern '[a-zA-Z_][a-zA-Z0-9\\-_.]*';\n      pattern '.|..|[^xX].*|.[^mM].*|..[^lL].*';\n    }\n    description\n      \"A YANG identifier string as defined by the 'identifier'\n       rule in Section 12 of RFC 6020.  An identifier must\n       start with an alphabetic character or an underscore\n       followed by an arbitrary sequence of alphabetic or\n       numeric characters, underscores, hyphens, or dots.\n\n       A YANG identifier MUST NOT start with any possible\n       combination of the lowercase or uppercase character\n       sequence 'xml'.\";\n    reference\n      \"RFC 6020: YANG - A Data Modeling Language for the Network\n                 Configuration Protocol (NETCONF)\";\n  }\n\n  typedef date-and-time {\n    type string {\n      pattern '\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[\\+\\-]\\d{2}:\\d{2})';\n    }\n    description\n      \"The date-and-time type is a profile of the ISO 8601\n       standard for representation of dates and times using the\n       Gregorian calendar.  The profile is defined by the\n       date-time production in Section 5.6 of RFC 3339.\n\n       The date-and-time type is compatible with the dateTime XML\n       schema type with the following notable exceptions:\n\n       (a) The date-and-time type does not allow negative years.\n\n       (b) The date-and-time time-offset -00:00 indicates an unknown\n           time zone (see RFC 3339) while -00:00 and +00:00 and Z\n           all represent the same time zone in dateTime.\n\n       (c) The canonical format (see below) of data-and-time values\n           differs from the canonical format used by the dateTime XML\n           schema type, which requires all times to be in UTC using\n           the time-offset 'Z'.\n\n       This type is not equivalent to the DateAndTime textual\n       convention of the SMIv2 since RFC 3339 uses a different\n       separator between full-date and full-time and provides\n       higher resolution of time-secfrac.\n\n       The canonical format for date-and-time values with a known time\n       zone uses a numeric time zone offset that is calculated using\n       the device's configured known offset to UTC time.  A change of\n       the device's offset to UTC time will cause date-and-time values\n       to change accordingly.  Such changes might happen periodically\n       in case a server follows automatically daylight saving time\n       (DST) time zone offset changes.  The canonical format for\n       date-and-time values with an unknown time zone (usually\n       referring to the notion of local time) uses the time-offset\n       -00:00.\";\n    reference\n      \"RFC 3339: Date and Time on the Internet: Timestamps\n       RFC 2579: Textual Conventions for SMIv2\n       XSD-TYPES: XML Schema Part 2: Datatypes Second Edition\";\n  }\n\n  typedef timeticks {\n    type uint32;\n    description\n      \"The timeticks type represents a non-negative integer that\n       represents the time, modulo 2^32 (4294967296 decimal), in\n       hundredths of a second between two epochs.  When a schema\n       node is defined that uses this type, the description of\n       the schema node identifies both of the reference epochs.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeTicks type of the SMIv2.\";\n    reference\n      \"RFC 2578: Structure of Management Information Version 2\n                 (SMIv2)\";\n  }\n\n  typedef timestamp {\n    type yang:timeticks;\n    description\n      \"The timestamp type represents the value of an associated\n       timeticks schema node at which a specific occurrence\n       happened.  The specific occurrence must be defined in the\n       description of any schema node defined using this type.  When\n       the specific occurrence occurred prior to the last time the\n       associated timeticks attribute was zero, then the timestamp\n       value is zero.  Note that this requires all timestamp values\n       to be reset to zero when the value of the associated timeticks\n       attribute reaches 497+ days and wraps around to zero.\n\n       The associated timeticks schema node must be specified\n       in the description of any schema node using this type.\n\n       In the value set and its semantics, this type is equivalent\n       to the TimeStamp textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef phys-address {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"Represents media- or physical-level addresses represented\n       as a sequence octets, each octet represented by two hexadecimal\n       numbers.  Octets are separated by colons.  The canonical\n       representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the PhysAddress textual convention of the SMIv2.\";\n    reference\n      \"RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef mac-address {\n    type string {\n      pattern '[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}';\n    }\n    description\n      \"The mac-address type represents an IEEE 802 MAC address.\n       The canonical representation uses lowercase characters.\n\n       In the value set and its semantics, this type is equivalent\n       to the MacAddress textual convention of the SMIv2.\";\n    reference\n      \"IEEE 802: IEEE Standard for Local and Metropolitan Area\n                 Networks: Overview and Architecture\n       RFC 2579: Textual Conventions for SMIv2\";\n  }\n\n  typedef xpath1.0 {\n    type string;\n    description\n      \"This type represents an XPATH 1.0 expression.\n\n       When a schema node is defined that uses this type, the\n       description of the schema node MUST specify the XPath\n       context in which the XPath expression is evaluated.\";\n    reference\n      \"XPATH: XML Path Language (XPath) Version 1.0\";\n  }\n\n  typedef hex-string {\n    type string {\n      pattern '([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?';\n    }\n    description\n      \"A hexadecimal string with octets represented as hex digits\n       separated by colons.  The canonical representation uses\n       lowercase characters.\";\n  }\n\n  typedef uuid {\n    type string {\n      pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n    }\n    description\n      \"A Universally Unique IDentifier in the string representation\n       defined in RFC 4122.  The canonical representation uses\n       lowercase characters.\n\n       The following is an example of a UUID in string representation:\n       f81d4fae-7dec-11d0-a765-00a0c91e6bf6\n       \";\n    reference\n      \"RFC 4122: A Universally Unique IDentifier (UUID) URN\n                 Namespace\";\n  }\n\n  typedef dotted-quad {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\n    }\n    description\n      \"An unsigned 32-bit number expressed in the dotted-quad\n       notation, i.e., four octets written as decimal numbers\n       and separated with the '.' (full stop) character.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-inet-types",
              "subject": "ietf-inet-types",
              "schema": "module ietf-inet-types {\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-inet-types\";\n  prefix inet;\n\n  organization\n    \"IETF NETMOD (NETCONF Data Modeling Language) Working Group\";\n  contact\n    \"WG Web:   <http://tools.ietf.org/wg/netmod/>\n     WG List:  <mailto:netmod@ietf.org>\n\n     WG Chair: David Kessens\n               <mailto:david.kessens@nsn.com>\n\n     WG Chair: Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Editor:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\";\n  description\n    \"This module contains a collection of generally useful derived\n     YANG data types for Internet addresses and related things.\n\n     Copyright (c) 2013 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject\n     to the license terms contained in, the Simplified BSD License\n     set forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (http://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 6991; see\n     the RFC itself for full legal notices.\";\n\n  revision 2013-07-15 {\n    description\n      \"This revision adds the following new data types:\n       - ip-address-no-zone\n       - ipv4-address-no-zone\n       - ipv6-address-no-zone\";\n    reference\n      \"RFC 6991: Common YANG Data Types\";\n  }\n  revision 2010-09-24 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 6021: Common YANG Data Types\";\n  }\n\n  typedef ip-version {\n    type enumeration {\n      enum \"unknown\" {\n        value 0;\n        description\n          \"An unknown or unspecified version of the Internet\n           protocol.\";\n      }\n      enum \"ipv4\" {\n        value 1;\n        description\n          \"The IPv4 protocol as defined in RFC 791.\";\n      }\n      enum \"ipv6\" {\n        value 2;\n        description\n          \"The IPv6 protocol as defined in RFC 2460.\";\n      }\n    }\n    description\n      \"This value represents the version of the IP protocol.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetVersion textual convention of the SMIv2.\";\n    reference\n      \"RFC  791: Internet Protocol\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef dscp {\n    type uint8 {\n      range \"0..63\";\n    }\n    description\n      \"The dscp type represents a Differentiated Services Code Point\n       that may be used for marking packets in a traffic stream.\n       In the value set and its semantics, this type is equivalent\n       to the Dscp textual convention of the SMIv2.\";\n    reference\n      \"RFC 3289: Management Information Base for the Differentiated\n                 Services Architecture\n       RFC 2474: Definition of the Differentiated Services Field\n                 (DS Field) in the IPv4 and IPv6 Headers\n       RFC 2780: IANA Allocation Guidelines For Values In\n                 the Internet Protocol and Related Headers\";\n  }\n\n  typedef ipv6-flow-label {\n    type uint32 {\n      range \"0..1048575\";\n    }\n    description\n      \"The ipv6-flow-label type represents the flow identifier or Flow\n       Label in an IPv6 packet header that may be used to\n       discriminate traffic flows.\n\n       In the value set and its semantics, this type is equivalent\n       to the IPv6FlowLabel textual convention of the SMIv2.\";\n    reference\n      \"RFC 3595: Textual Conventions for IPv6 Flow Label\n       RFC 2460: Internet Protocol, Version 6 (IPv6) Specification\";\n  }\n\n  typedef port-number {\n    type uint16 {\n      range \"0..65535\";\n    }\n    description\n      \"The port-number type represents a 16-bit port number of an\n       Internet transport-layer protocol such as UDP, TCP, DCCP, or\n       SCTP.  Port numbers are assigned by IANA.  A current list of\n       all assignments is available from <http://www.iana.org/>.\n\n       Note that the port number value zero is reserved by IANA.  In\n       situations where the value zero does not make sense, it can\n       be excluded by subtyping the port-number type.\n       In the value set and its semantics, this type is equivalent\n       to the InetPortNumber textual convention of the SMIv2.\";\n    reference\n      \"RFC  768: User Datagram Protocol\n       RFC  793: Transmission Control Protocol\n       RFC 4960: Stream Control Transmission Protocol\n       RFC 4340: Datagram Congestion Control Protocol (DCCP)\n       RFC 4001: Textual Conventions for Internet Network Addresses\";\n  }\n\n  typedef as-number {\n    type uint32;\n    description\n      \"The as-number type represents autonomous system numbers\n       which identify an Autonomous System (AS).  An AS is a set\n       of routers under a single technical administration, using\n       an interior gateway protocol and common metrics to route\n       packets within the AS, and using an exterior gateway\n       protocol to route packets to other ASes.  IANA maintains\n       the AS number space and has delegated large parts to the\n       regional registries.\n\n       Autonomous system numbers were originally limited to 16\n       bits.  BGP extensions have enlarged the autonomous system\n       number space to 32 bits.  This type therefore uses an uint32\n       base type without a range restriction in order to support\n       a larger autonomous system number space.\n\n       In the value set and its semantics, this type is equivalent\n       to the InetAutonomousSystemNumber textual convention of\n       the SMIv2.\";\n    reference\n      \"RFC 1930: Guidelines for creation, selection, and registration\n                 of an Autonomous System (AS)\n       RFC 4271: A Border Gateway Protocol 4 (BGP-4)\n       RFC 4001: Textual Conventions for Internet Network Addresses\n       RFC 6793: BGP Support for Four-Octet Autonomous System (AS)\n                 Number Space\";\n  }\n\n  typedef ip-address {\n    type union {\n      type inet:ipv4-address;\n      type inet:ipv6-address;\n    }\n    description\n      \"The ip-address type represents an IP address and is IP\n       version neutral.  The format of the textual representation\n       implies the IP version.  This type supports scoped addresses\n       by allowing zone identifiers in the address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?';\n    }\n    description\n      \"The ipv4-address type represents an IPv4 address in\n       dotted-quad notation.  The IPv4 address may include a zone\n       index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format for the zone index is the numerical\n       format\";\n  }\n\n  typedef ipv6-address {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?';\n    }\n    description\n      \"The ipv6-address type represents an IPv6 address in full,\n       mixed, shortened, and shortened-mixed notation.  The IPv6\n       address may include a zone index, separated by a % sign.\n\n       The zone index is used to disambiguate identical address\n       values.  For link-local addresses, the zone index will\n       typically be the interface index number or the name of an\n       interface.  If the zone index is not present, the default\n       zone of the device will be used.\n\n       The canonical format of IPv6 addresses uses the textual\n       representation defined in Section 4 of RFC 5952.  The\n       canonical format for the zone index is the numerical\n       format as described in Section 11.2 of RFC 4007.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-address-no-zone {\n    type union {\n      type inet:ipv4-address-no-zone;\n      type inet:ipv6-address-no-zone;\n    }\n    description\n      \"The ip-address-no-zone type represents an IP address and is\n       IP version neutral.  The format of the textual representation\n       implies the IP version.  This type does not support scoped\n       addresses since it does not allow zone identifiers in the\n       address format.\";\n    reference\n      \"RFC 4007: IPv6 Scoped Address Architecture\";\n  }\n\n  typedef ipv4-address-no-zone {\n    type inet:ipv4-address {\n      pattern '[0-9\\.]*';\n    }\n    description\n      \"An IPv4 address without a zone index.  This type, derived from\n       ipv4-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n  }\n\n  typedef ipv6-address-no-zone {\n    type inet:ipv6-address {\n      pattern '[0-9a-fA-F:\\.]*';\n    }\n    description\n      \"An IPv6 address without a zone index.  This type, derived from\n       ipv6-address, may be used in situations where the zone is\n       known from the context and hence no zone index is needed.\";\n    reference\n      \"RFC 4291: IP Version 6 Addressing Architecture\n       RFC 4007: IPv6 Scoped Address Architecture\n       RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef ip-prefix {\n    type union {\n      type inet:ipv4-prefix;\n      type inet:ipv6-prefix;\n    }\n    description\n      \"The ip-prefix type represents an IP prefix and is IP\n       version neutral.  The format of the textual representations\n       implies the IP version.\";\n  }\n\n  typedef ipv4-prefix {\n    type string {\n      pattern '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))';\n    }\n    description\n      \"The ipv4-prefix type represents an IPv4 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 32.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The canonical format of an IPv4 prefix has all bits of\n       the IPv4 address set to zero that are not part of the\n       IPv4 prefix.\";\n  }\n\n  typedef ipv6-prefix {\n    type string {\n      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';\n      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(/.+)';\n    }\n    description\n      \"The ipv6-prefix type represents an IPv6 address prefix.\n       The prefix length is given by the number following the\n       slash character and must be less than or equal to 128.\n\n       A prefix length value of n corresponds to an IP address\n       mask that has n contiguous 1-bits from the most\n       significant bit (MSB) and all other bits set to 0.\n\n       The IPv6 address should have all bits that do not belong\n       to the prefix set to zero.\n\n       The canonical format of an IPv6 prefix has all bits of\n       the IPv6 address set to zero that are not part of the\n       IPv6 prefix.  Furthermore, the IPv6 address is represented\n       as defined in Section 4 of RFC 5952.\";\n    reference\n      \"RFC 5952: A Recommendation for IPv6 Address Text\n                 Representation\";\n  }\n\n  typedef domain-name {\n    type string {\n      length \"1..253\";\n      pattern '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)|\\.';\n    }\n    description\n      \"The domain-name type represents a DNS domain name.  The\n       name SHOULD be fully qualified whenever possible.\n\n       Internet domain names are only loosely specified.  Section\n       3.5 of RFC 1034 recommends a syntax (modified in Section\n       2.1 of RFC 1123).  The pattern above is intended to allow\n       for current practice in domain name use, and some possible\n       future expansion.  It is designed to hold various types of\n       domain names, including names used for A or AAAA records\n       (host names) and other records, such as SRV records.  Note\n       that Internet host names have a stricter syntax (described\n       in RFC 952) than the DNS recommendations in RFCs 1034 and\n       1123, and that systems that want to store host names in\n       schema nodes using the domain-name type are recommended to\n       adhere to this stricter standard to ensure interoperability.\n\n       The encoding of DNS names in the DNS protocol is limited\n       to 255 characters.  Since the encoding consists of labels\n       prefixed by a length bytes and there is a trailing NULL\n       byte, only 253 characters can appear in the textual dotted\n       notation.\n\n       The description clause of schema nodes using the domain-name\n       type MUST describe when and how these names are resolved to\n       IP addresses.  Note that the resolution of a domain-name value\n       may require to query multiple DNS records (e.g., A for IPv4\n       and AAAA for IPv6).  The order of the resolution process and\n       which DNS record takes precedence can either be defined\n       explicitly or may depend on the configuration of the\n       resolver.\n\n       Domain-name values use the US-ASCII encoding.  Their canonical\n       format uses lowercase US-ASCII characters.  Internationalized\n       domain names MUST be A-labels as per RFC 5890.\";\n    reference\n      \"RFC  952: DoD Internet Host Table Specification\n       RFC 1034: Domain Names - Concepts and Facilities\n       RFC 1123: Requirements for Internet Hosts -- Application\n                 and Support\n       RFC 2782: A DNS RR for specifying the location of services\n                 (DNS SRV)\n       RFC 5890: Internationalized Domain Names in Applications\n                 (IDNA): Definitions and Document Framework\";\n  }\n\n  typedef host {\n    type union {\n      type inet:ip-address;\n      type inet:domain-name;\n    }\n    description\n      \"The host type represents either an IP address or a DNS\n       domain name.\";\n  }\n\n  typedef uri {\n    type string;\n    description\n      \"The uri type represents a Uniform Resource Identifier\n       (URI) as defined by STD 66.\n\n       Objects using the uri type MUST be in US-ASCII encoding,\n       and MUST be normalized as described by RFC 3986 Sections\n       6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary\n       percent-encoding is removed, and all case-insensitive\n       characters are set to lowercase except for hexadecimal\n       digits, which are normalized to uppercase as described in\n       Section 6.2.2.1.\n\n       The purpose of this normalization is to help provide\n       unique URIs.  Note that this normalization is not\n       sufficient to provide uniqueness.  Two URIs that are\n       textually distinct after this normalization may still be\n       equivalent.\n\n       Objects using the uri type may restrict the schemes that\n       they permit.  For example, 'data:' and 'urn:' schemes\n       might not be appropriate.\n\n       A zero-length URI is not a valid URI.  This can be used to\n       express 'URI absent' where required.\n\n       In the value set and its semantics, this type is equivalent\n       to the Uri SMIv2 textual convention defined in RFC 5017.\";\n    reference\n      \"RFC 3986: Uniform Resource Identifier (URI): Generic Syntax\n       RFC 3305: Report from the Joint W3C/IETF URI Planning Interest\n                 Group: Uniform Resource Identifiers (URIs), URLs,\n                 and Uniform Resource Names (URNs): Clarifications\n                 and Recommendations\n       RFC 5017: MIB Textual Conventions for Uniform Resource\n                 Identifiers (URIs)\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            },
            {
              "name": "ietf-datastores",
              "subject": "ietf-datastores",
              "schema": "module ietf-datastores {\n  yang-version 1.1;\n  namespace \"urn:ietf:params:xml:ns:yang:ietf-datastores\";\n  prefix ds;\n\n  organization\n    \"IETF Network Modeling (NETMOD) Working Group\";\n  contact\n    \"WG Web:   <https://datatracker.ietf.org/wg/netmod/>\n\n     WG List:  <mailto:netmod@ietf.org>\n\n     Author:   Martin Bjorklund\n               <mailto:mbj@tail-f.com>\n\n     Author:   Juergen Schoenwaelder\n               <mailto:j.schoenwaelder@jacobs-university.de>\n\n     Author:   Phil Shafer\n               <mailto:phil@juniper.net>\n\n     Author:   Kent Watsen\n               <mailto:kwatsen@juniper.net>\n\n     Author:   Rob Wilton\n               <rwilton@cisco.com>\";\n  description\n    \"This YANG module defines a set of identities for identifying\n     datastores.\n\n     Copyright (c) 2018 IETF Trust and the persons identified as\n     authors of the code.  All rights reserved.\n\n     Redistribution and use in source and binary forms, with or\n     without modification, is permitted pursuant to, and subject to\n     the license terms contained in, the Simplified BSD License set\n     forth in Section 4.c of the IETF Trust's Legal Provisions\n     Relating to IETF Documents\n     (https://trustee.ietf.org/license-info).\n\n     This version of this YANG module is part of RFC 8342\n     (https://www.rfc-editor.org/info/rfc8342); see the RFC itself\n     for full legal notices.\";\n\n  revision 2018-02-14 {\n    description\n      \"Initial revision.\";\n    reference\n      \"RFC 8342: Network Management Datastore Architecture (NMDA)\";\n  }\n\n  identity datastore {\n    description\n      \"Abstract base identity for datastore identities.\";\n  }\n\n  identity conventional {\n    base datastore;\n    description\n      \"Abstract base identity for conventional configuration\n       datastores.\";\n  }\n\n  identity running {\n    base conventional;\n    description\n      \"The running configuration datastore.\";\n  }\n\n  identity candidate {\n    base conventional;\n    description\n      \"The candidate configuration datastore.\";\n  }\n\n  identity startup {\n    base conventional;\n    description\n      \"The startup configuration datastore.\";\n  }\n\n  identity intended {\n    base conventional;\n    description\n      \"The intended configuration datastore.\";\n  }\n\n  identity dynamic {\n    base datastore;\n    description\n      \"Abstract base identity for dynamic configuration datastores.\";\n  }\n\n  identity operational {\n    base datastore;\n    description\n      \"The operational state datastore.\";\n  }\n\n  typedef datastore-ref {\n    type identityref {\n      base datastore;\n    }\n    description\n      \"A datastore identity reference.\";\n  }\n}\n",
              "references": [],
              "properties": null,
              "tags": null
            }
          ],
          "properties": null,
          "tags": null
        }
      ],
      "properties": null,
      "tags": null
    }
  ],
  "properties": null,
  "tags": {
    "features": [
      "network-node-manifest",
      "data-collection-manifest"
    ]
  }
}