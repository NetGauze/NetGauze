runtime:
  # Total number of OS threads used allocated for NetGauze.
  # If not specified, the number of threads will equal the number of CPU cores.
  threads: 4

logging:
  level: info

telemetry:
  url: http://localhost:4317/v1/metrics
  exporter_timeout: 3000
  reader_interval: 60000
  reader_timeout: 3000

flow:
  subscriber_timeout: 100
  template_cache_purge_timeout: 360
  listeners:
    # NetGauze can listen to multiple addresses/interfaces at the same time
    - address: 0.0.0.0:9991
      # Optionally Bind to an interface/VRF
#     interface: eth0
      # Optionally, number of I/O tasks per address/interface, default is 1
      workers: 2
    # more interfaces/ip ares possible
#    - address: '[::1]:2713'
#      workers: 2

  # Multiple publishers can be defined.
  # A packet is copied for each publisher group, and load-balancing is defined between endpoints in the same group.
  publishers:
    group1:
      buffer_size: 1000
      endpoints:
        http1: !Http
          url: http://10.212.242.69:8080/v0/pipelines/vmware/ingress/flows?format=json&array=true
          writer_id: writer1
          batch_size: 300
          #http2: !Http
          #url: http://10.212.242.69:8080/ingress/flows?format=json
          #writer_id: writer2
    group2:
      buffer_size: 1000
      sonata_enrichment:
        topic: sonata
        consumer_config:
          bootstrap.servers: localhost:29092
          group.id: test
          enable.auto.commit: "false"
          auto.offset.reset: earliest
      endpoints:
        full: !FlowKafkaAvro
          topic: flow
          schema_registry_url: http://localhost:8088
          producer_config:
            bootstrap.servers: localhost:29092
            message.timeout.ms: "60000"
            queue.buffering.max.messages: "1000"
          writer_id: writer1
          avro_converter:
            fields:
              octets:
                select: !Single
                  ie: octetDeltaCount
                  index: 0
              packets:
                select: !Coalesce
                  ies:
                    - ie: packetDeltaCount
                      index: 1
                    - ie: packetDeltaCount
                      index: 0
                default: !String '1000'
                transform: String
              custom_primitives.flow_direction:
                select: !Single
                  ie: !VMWare flowDirection
                  index: 0
                transform: !Rename
                  ingress: i
                  egress: e

udp_notif:
  subscriber_timeout: 100
  listeners:
    # NetGauze can listen to multiple addresses/interfaces at the same time
    - address: 0.0.0.0:10000
      # Optionally Bind to an interface/VRF
#     interface: eth0
      # Optionally, number of I/O tasks per address/interface, default is 1
      workers: 2
    # more interfaces/ip ares possible
#    - address: '[::1]:2713'
#      workers: 2

  # Multiple publishers can be defined.
  # A packet is copied for each publisher group, and load-balancing is defined between endpoints in the same group.
  publishers:
    group1:
      buffer_size: 1000
      endpoints:
        http1: !Http
          url: http://10.212.242.69:8080/v0/pipelines/vmware/ingress/udp_notif?format=json&array=true
          writer_id: writer1
          batch_size: 300
          #http2: !Http
          #url: http://10.212.242.69:8080/ingress/udp_notif?format=json
          #writer_id: writer2
    group2:
      buffer_size: 1000
      endpoints:
        full: !KafkaJson
          topic: udp-notif-json
          producer_config:
            bootstrap.servers: localhost:29092
            message.timeout.ms: "60000"
            queue.buffering.max.messages: "1000"
          writer_id: writer1
