// Copyright (C) 2023-present The NetGauze Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::{
    ie,
    ie::nokia,
    ipfix::*,
    wire::{deserializer::ipfix::*, serializer::ipfix::*},
    DataSetId, FieldSpecifier,
};
use chrono::{TimeZone, Timelike, Utc};
use netgauze_parse_utils::{test_helpers::*, ReadablePduWithOneInput, Span};
use std::{cell::RefCell, collections::HashMap, net::Ipv4Addr, rc::Rc};

#[test]
fn test_ipfix_header() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];
    let bad_version_wire = [
        0x00, 0x00, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];
    let bad_length_wire = [
        0x00, 0x0a, // Version
        0x00, 0x00, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        vec![Set::Template(vec![TemplateRecord::new(
            307,
            vec![
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
                FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
                FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
            ],
        )])],
    );

    let bad_version = LocatedIpfixPacketParsingError::new(
        Span::new(&bad_version_wire),
        IpfixPacketParsingError::UnsupportedVersion(0),
    );
    let bad_length = LocatedIpfixPacketParsingError::new(
        unsafe { Span::new_from_raw_offset(2, &bad_length_wire[2..]) },
        IpfixPacketParsingError::InvalidLength(0),
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    test_parsed_completely_with_one_input(&good_wire, templates_map.clone(), &good);
    assert!(templates_map.borrow().contains_key(&307));

    test_parse_error_with_one_input::<IpfixPacket, Rc<_>, LocatedIpfixPacketParsingError<'_>>(
        &bad_version_wire,
        templates_map.clone(),
        &bad_version,
    );
    test_parse_error_with_one_input::<IpfixPacket, Rc<_>, LocatedIpfixPacketParsingError<'_>>(
        &bad_length_wire,
        templates_map,
        &bad_length,
    );

    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
fn test_template_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        vec![Set::Template(vec![TemplateRecord::new(
            307,
            vec![
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
                FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
                FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
            ],
        )])],
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    test_parsed_completely_with_one_input(&good_wire, templates_map.clone(), &good);
    assert!(templates_map.borrow().contains_key(&307));

    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
fn test_data_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x60, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, // Set ID
        0x00, 0x50, // Flow Set Length
        0x46, 0x01, 0x73, 0x01, // Source IP
        0x32, 0x00, 0x47, 0x01, // Dest IP
        0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3b, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x03, 0xcc, 0x2a, 0x6e, 0x65, 0x00, 0x00, 0x03, 0x56, 0x00, 0x00,
        0x05, 0x20, 0x00, 0x00, 0x00, 0x09, 0xb3, 0xf9, 0x06, 0xee, 0xb3, 0xfb, 0xaf, 0x3c, 0xcc,
        0x2a, 0x6e, 0xbd, 0x18, 0x18, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0xb1, 0xb1, 0x38, 0xff,
        0x00, 0x00, 0x01, 0x58, 0xb1, 0xb3, 0xe1, 0x4d,
    ];

    let f = vec![
        FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
        FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
        FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
        FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
        FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
        FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
        FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
        FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
        FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
        FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
        FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
        FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
        FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
        FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
        FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
        FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
    ];
    let fields = Rc::new((vec![], f.clone()));
    let templates_map = Rc::new(RefCell::new(HashMap::from([(307, fields)])));
    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        vec![Set::Data {
            id: DataSetId::new(307).unwrap(),
            records: vec![DataRecord::new(
                vec![],
                vec![
                    ie::Field::sourceIPv4Address(ie::sourceIPv4Address(Ipv4Addr::new(
                        70, 1, 115, 1,
                    ))),
                    ie::Field::destinationIPv4Address(ie::destinationIPv4Address(Ipv4Addr::new(
                        50, 0, 71, 1,
                    ))),
                    ie::Field::ipClassOfService(ie::ipClassOfService(0)),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier(61)),
                    ie::Field::sourceTransportPort(ie::sourceTransportPort(0)),
                    ie::Field::destinationTransportPort(ie::destinationTransportPort(0)),
                    ie::Field::icmpTypeCodeIPv4(ie::icmpTypeCodeIPv4(0)),
                    ie::Field::ingressInterface(ie::ingressInterface(827)),
                    ie::Field::bgpSourceAsNumber(ie::bgpSourceAsNumber(2)),
                    ie::Field::bgpDestinationAsNumber(ie::bgpDestinationAsNumber(3)),
                    ie::Field::bgpNextHopIPv4Address(ie::bgpNextHopIPv4Address(Ipv4Addr::new(
                        204, 42, 110, 101,
                    ))),
                    ie::Field::egressInterface(ie::egressInterface(854)),
                    ie::Field::octetDeltaCount(ie::octetDeltaCount(1312)),
                    ie::Field::packetDeltaCount(ie::packetDeltaCount(9)),
                    ie::Field::flowStartSysUpTime(ie::flowStartSysUpTime(0xb3f906ee)),
                    ie::Field::flowEndSysUpTime(ie::flowEndSysUpTime(0xb3fbaf3c)),
                    ie::Field::ipNextHopIPv4Address(ie::ipNextHopIPv4Address(Ipv4Addr::new(
                        204, 42, 110, 189,
                    ))),
                    ie::Field::sourceIPv4PrefixLength(ie::sourceIPv4PrefixLength(24)),
                    ie::Field::destinationIPv4PrefixLength(ie::destinationIPv4PrefixLength(24)),
                    ie::Field::tcpControlBits(ie::tcpControlBits(0)),
                    ie::Field::ipVersion(ie::ipVersion(4)),
                    ie::Field::flowStartMilliseconds(ie::flowStartMilliseconds(
                        Utc.with_ymd_and_hms(2016, 11, 29, 20, 5, 31)
                            .unwrap()
                            .with_nanosecond(519_000_000)
                            .unwrap(),
                    )),
                    ie::Field::flowEndMilliseconds(ie::flowEndMilliseconds(
                        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 25)
                            .unwrap()
                            .with_nanosecond(677_000_000)
                            .unwrap(),
                    )),
                ],
            )],
        }],
    );
    test_parsed_completely_with_one_input(&good_wire, templates_map.clone(), &good);
    test_write_with_one_input(&good, Some(templates_map), &good_wire)?;
    Ok(())
}

#[test]
fn test_options_template_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // version
        0x00, 0x28, // length
        0x58, 0x3d, 0xe0, 0x57, // timestamp
        0x00, 0x00, 0x0e, 0xcf, // Seq
        0x00, 0x00, 0x00, 0x00, // Domain
        0x00, 0x03, // Set ID
        0x00, 0x18, // Set length
        0x01, 0x34, // Template ID
        0x00, 0x03, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x24, 0x00, 0x02, 0x00, 0x25, 0x00,
        0x02, 0x00, 0x00,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 55).unwrap(),
        3791,
        0,
        vec![Set::OptionsTemplate(vec![OptionsTemplateRecord::new(
            308,
            vec![FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap()],
            vec![
                FieldSpecifier::new(ie::IE::flowActiveTimeout, 2).unwrap(),
                FieldSpecifier::new(ie::IE::flowIdleTimeout, 2).unwrap(),
            ],
        )])],
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    test_parsed_completely_with_one_input(&good_wire, templates_map.clone(), &good);
    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
#[rustfmt::skip]
fn test_complex_sequence() -> Result<(), IpfixPacketWritingError> {
    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    let pkt1_wire = [
        0x00, 0x0a, 0x02, 0x24, 0x63, 0x4a, 0xe2, 0x9d, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x40, 0x04, 0x00, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
        0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02,
        0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01,
        0x00, 0x02, 0x00, 0x34, 0x04, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
        0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x20, 0x00, 0x02, 0x00, 0x3c, 0x00, 0x01,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x02, 0x00, 0x40, 0x08, 0x00, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x10,
        0x00, 0x1c, 0x00, 0x10, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02,
        0x00, 0x0b, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x01,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x02, 0x00, 0x34, 0x08, 0x01, 0x00, 0x0b, 0x00, 0x1b, 0x00, 0x10,
        0x00, 0x1c, 0x00, 0x10, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x02,
        0x00, 0x3c, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x03, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x05,
        0x00, 0x01, 0x00, 0x8f, 0x00, 0x04, 0x00, 0xa0, 0x00, 0x08, 0x01, 0x31, 0x00, 0x04, 0x01, 0x32,
        0x00, 0x04, 0x01, 0x30, 0x00, 0x02, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x04, 0xbc, 0x00, 0x00,
        0x01, 0x83, 0xdc, 0x83, 0x41, 0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x04, 0x00, 0x00, 0xf4, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x06, 0x9f,
        0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xe4, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xe4, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x12, 0xa2,
        0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xf0, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xf0, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x1e, 0x7b,
        0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xfc, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xfc, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00,
    ];

    let pkt2_wire = [
        0x00, 0x0a, 0x05, 0x64, 0x63, 0x4a, 0xe2, 0xd9, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x05, 0x54, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x2a, 0x36,
        0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xde, 0x04, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x04, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x36, 0x00,
        0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x7a, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x7a, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x41, 0xb9,
        0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x7e, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x7e, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x4d, 0x74,
        0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x8c, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x8c, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x59, 0x2f,
        0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xf2, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xf2, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x64, 0xe9,
        0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xf6, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xf6, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x70, 0xa3,
        0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xfe, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xfe, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x7c, 0x5c,
        0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x68, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x68, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x88, 0x17,
        0x00, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x74, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x88, 0x17, 0x00, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x74, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x93, 0xd0,
        0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x76, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x76, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x9f, 0x8b,
        0x00, 0x00, 0x9f, 0x8c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x7c, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x9f, 0x8b, 0x00, 0x00, 0x9f, 0x8c, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x7c, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xab, 0x46,
        0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xd0, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xd0, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xb6, 0xfe,
        0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xde, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xb6, 0xfe, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xde, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xc3, 0x96,
        0x00, 0x00, 0xc3, 0x97, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xec, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xc3, 0x96, 0x00, 0x00, 0xc3, 0x97, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xec, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xcf, 0x4f,
        0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xb8, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xb8, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xdb, 0x09,
        0x00, 0x00, 0xdb, 0x0a, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xbe, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xdb, 0x09, 0x00, 0x00, 0xdb, 0x0a, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xbe, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xe6, 0xc5,
        0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xc8, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc8, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00];

    let (_, _pkt1) = IpfixPacket::from_wire(Span::new(&pkt1_wire), templates_map.clone()).unwrap();
    let (_, _pkt2)  = IpfixPacket::from_wire(Span::new(&pkt2_wire), templates_map).unwrap();
    // TODO: test writing complex packets
    Ok(())
}

#[test]
#[rustfmt::skip]
fn test_example() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, 0x00, 0x48, 0x63, 0xd5, 0x45, 0xac,
        0x00, 0x00, 0x0d, 0xf3, 0x00, 0x08, 0x00, 0x00,
        0x00, 0x03, 0x00, 0x38, 0x02, 0x00, 0x00, 0x0b,
        0x00, 0x01, 0x00, 0x90, 0x00, 0x04, 0x00, 0x29,
        0x00, 0x08, 0x00, 0x2a, 0x00, 0x08, 0x00, 0xa0,
        0x00, 0x08, 0x00, 0x82, 0x00, 0x04, 0x00, 0x83,
        0x00, 0x10, 0x00, 0x22, 0x00, 0x04, 0x00, 0x24,
        0x00, 0x02, 0x00, 0x25, 0x00, 0x02, 0x00, 0xd6,
        0x00, 0x01, 0x00, 0xd7, 0x00, 0x01, 0x00, 0x00
    ];


    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 1, 28, 15, 56, 28).unwrap(),
        3571,
        524288,
        vec![Set::OptionsTemplate(
                vec![
                    OptionsTemplateRecord::new(
                        512,
                vec![
                    FieldSpecifier::new(ie::IE::exportingProcessId, 4).unwrap()
                ],
                vec![
                    FieldSpecifier::new(ie::IE::exportedMessageTotalCount, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::exportedFlowRecordTotalCount, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::systemInitTimeMilliseconds, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::exporterIPv4Address, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::exporterIPv6Address, 16).unwrap(),
                    FieldSpecifier::new(ie::IE::samplingInterval, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::flowActiveTimeout, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::flowIdleTimeout, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::exportProtocolVersion, 1).unwrap(),
                    FieldSpecifier::new(ie::IE::exportTransportProtocol, 1).unwrap(),
                ],
            )])],
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    //let (_, pkt1) = IpfixPacket::from_wire(Span::new(&good), templates_map.clone()).unwrap();
    test_parsed_completely_with_one_input(&good_wire, templates_map.clone(), &good);

    //test_write_with_one_input(&good, None, &good_wire)?;

    Ok(())
}

#[test]
fn test_with_variable_string_length() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x38, 0x65, 0x85, 0xa8, 0xdd, 0x00, 0x01, 0xce, 0x06, 0x00, 0x00, 0x82,
        0x20, 0x00, 0x03, 0x00, 0x28, 0x01, 0x01, 0x00, 0x07, 0x00, 0x01, 0x01, 0x2e, 0x00, 0x04,
        0x01, 0x31, 0x00, 0x04, 0x01, 0x30, 0x00, 0x02, 0x01, 0x35, 0x00, 0x04, 0x01, 0x36, 0x00,
        0x04, 0x00, 0x54, 0x00, 0x5a, 0x01, 0x4f, 0xff, 0xff, 0x00, 0x00,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x94, 0x65, 0x85, 0xa8, 0xdd, 0x00, 0x01, 0xce, 0x06, 0x00, 0x00, 0x82,
        0x20, 0x01, 0x01, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57,
        0x2d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x2d, 0x4d, 0x41, 0x50, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f,
        0x57, 0x2d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x2d, 0x4d, 0x41, 0x50,
    ];
    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 12, 22, 15, 18, 53).unwrap(),
        118278,
        33312,
        vec![Set::OptionsTemplate(vec![OptionsTemplateRecord::new(
            257,
            vec![FieldSpecifier::new(ie::IE::selectorId, 4).unwrap()],
            vec![
                FieldSpecifier::new(ie::IE::samplingPacketInterval, 4).unwrap(),
                FieldSpecifier::new(ie::IE::selectorAlgorithm, 2).unwrap(),
                FieldSpecifier::new(ie::IE::samplingSize, 4).unwrap(),
                FieldSpecifier::new(ie::IE::samplingPopulation, 4).unwrap(),
                FieldSpecifier::new(ie::IE::samplerName, 90).unwrap(),
                FieldSpecifier::new(ie::IE::selectorName, 65535).unwrap(),
            ],
        )])],
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 12, 22, 15, 18, 53).unwrap(),
        118278,
        33312,
        vec![Set::Data {
            id: DataSetId::new(257).unwrap(),
            records: vec![DataRecord::new(
                vec![ie::Field::selectorId(ie::selectorId(1))],
                vec![
                    ie::Field::samplingPacketInterval(ie::samplingPacketInterval(1)),
                    ie::Field::selectorAlgorithm(ie::selectorAlgorithm(3)),
                    ie::Field::samplingSize(ie::samplingSize(1)),
                    ie::Field::samplingPopulation(ie::samplingPopulation(1)),
                    ie::Field::samplerName(ie::samplerName(String::from("NETFLOW-SAMPLER-MAP"))),
                    ie::Field::selectorName(ie::selectorName(String::from("NETFLOW-SAMPLER-MAP"))),
                ],
            )],
        }],
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    test_parsed_completely_with_one_input(
        &good_template_wire,
        templates_map.clone(),
        &good_template,
    );

    test_parsed_completely_with_one_input(&good_data_wire, templates_map.clone(), &good_data);
    test_write_with_one_input(
        &good_template,
        Some(templates_map.clone()),
        &good_template_wire,
    )?;
    test_write_with_one_input(&good_data, Some(templates_map.clone()), &good_data_wire)?;
    Ok(())
}

#[test]
fn test_with_nokia_pen_fields() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x5c, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x4c, 0x01, 0x90, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c,
        0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0xe1, 0x00, 0x04, 0x00,
        0xe3, 0x00, 0x02, 0x00, 0x94, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x26, 0x00, 0x01,
        0x80, 0x5b, 0x00, 0x02, 0x00, 0x00, 0x02, 0x7d, 0x80, 0x5c, 0x00, 0x02, 0x00, 0x00, 0x02,
        0x7d, 0x80, 0x5d, 0xff, 0xff, 0x00, 0x00, 0x02, 0x7d, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02,
        0x00, 0x04,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x54, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x44, 0x0a, 0x64, 0x00, 0x01, 0x0a, 0x64, 0x00, 0x97, 0x27, 0x14,
        0x00, 0x01, 0x08, 0x08, 0x08, 0x08, 0x22, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x21,
        0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x15, 0x4c, 0x53, 0x4e, 0x2d, 0x48, 0x6f, 0x73,
        0x74, 0x40, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x31, 0x00,
        0x00, 0x04, 0xb0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    ];
    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        vec![Set::Template(vec![TemplateRecord::new(
            400,
            vec![
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::postNATSourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::postNAPTSourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::flowId, 8).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::engineType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(nokia::IE::aluInsideServiceId), 2).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(nokia::IE::aluOutsideServiceId), 2).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(nokia::IE::aluNatSubString), 65535).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
            ],
        )])],
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        vec![Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: vec![DataRecord::new(
                vec![],
                vec![
                    ie::Field::sourceIPv4Address(ie::sourceIPv4Address(Ipv4Addr::new(
                        10, 100, 0, 1,
                    ))),
                    ie::Field::destinationIPv4Address(ie::destinationIPv4Address(Ipv4Addr::new(
                        10, 100, 0, 151,
                    ))),
                    ie::Field::sourceTransportPort(ie::sourceTransportPort(10004)),
                    ie::Field::destinationTransportPort(ie::destinationTransportPort(1)),
                    ie::Field::postNATSourceIPv4Address(ie::postNATSourceIPv4Address(
                        Ipv4Addr::new(8, 8, 8, 8),
                    )),
                    ie::Field::postNAPTSourceTransportPort(ie::postNAPTSourceTransportPort(8881)),
                    ie::Field::flowId(ie::flowId(10101010)),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier(1)),
                    ie::Field::engineType(ie::engineType(0)),
                    ie::Field::Nokia(nokia::Field::aluInsideServiceId(nokia::aluInsideServiceId(
                        1,
                    ))),
                    ie::Field::Nokia(nokia::Field::aluOutsideServiceId(
                        nokia::aluOutsideServiceId(15),
                    )),
                    ie::Field::Nokia(nokia::Field::aluNatSubString(nokia::aluNatSubString(
                        String::from("LSN-Host@10.10.10.101"),
                    ))),
                    ie::Field::octetDeltaCount(ie::octetDeltaCount(1200)),
                    ie::Field::packetDeltaCount(ie::packetDeltaCount(1)),
                ],
            )],
        }],
    );

    let templates_map = Rc::new(RefCell::new(HashMap::new()));
    test_parsed_completely_with_one_input(
        &good_template_wire,
        templates_map.clone(),
        &good_template,
    );
    test_parsed_completely_with_one_input(&good_data_wire, templates_map.clone(), &good_data);

    test_write_with_one_input(
        &good_template,
        Some(templates_map.clone()),
        &good_template_wire,
    )?;
    test_write_with_one_input(&good_data, Some(templates_map.clone()), &good_data_wire)?;

    Ok(())
}
