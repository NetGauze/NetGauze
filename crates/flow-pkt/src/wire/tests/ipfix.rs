// Copyright (C) 2023-present The NetGauze Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use crate::{
    ie,
    ipfix::*,
    wire::{deserializer::ipfix::*, serializer::ipfix::*},
    DataSetId, FieldSpecifier,
};
use chrono::{TimeZone, Timelike, Utc};
use netgauze_iana::tcp::*;
use netgauze_parse_utils::{test_helpers::*, ReadablePduWithOneInput, Span};
use std::{
    collections::HashMap,
    net::{Ipv4Addr, Ipv6Addr},
    str::FromStr,
};

#[test]
fn test_ipfix_header() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];
    let bad_version_wire = [
        0x00, 0x00, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];
    let bad_length_wire = [
        0x00, 0x0a, // Version
        0x00, 0x00, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            307,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
                FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
                FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
            ]),
        )]))]),
    );

    let bad_version = LocatedIpfixPacketParsingError::new(
        Span::new(&bad_version_wire),
        IpfixPacketParsingError::UnsupportedVersion(0),
    );
    let bad_length = LocatedIpfixPacketParsingError::new(
        unsafe { Span::new_from_raw_offset(2, &bad_length_wire[2..]) },
        IpfixPacketParsingError::InvalidLength(0),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_wire, &mut templates_map, &good);
    assert!(templates_map.contains_key(&307));

    test_parse_error_with_one_input::<
        IpfixPacket,
        &mut TemplatesMap,
        LocatedIpfixPacketParsingError<'_>,
    >(&bad_version_wire, &mut templates_map, &bad_version);
    test_parse_error_with_one_input::<
        IpfixPacket,
        &mut TemplatesMap,
        LocatedIpfixPacketParsingError<'_>,
    >(&bad_length_wire, &mut templates_map, &bad_length);

    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
fn test_template_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x74, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, // Seq number
        0x00, 0x00, 0x00, 0x00, // Observation domain
        0x00, 0x02, 0x00, 0x64, 0x01, 0x33, 0x00, 0x17, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00,
        0x04, 0x00, 0x05, 0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b,
        0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x10, 0x00, 0x04, 0x00,
        0x11, 0x00, 0x04, 0x00, 0x12, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x0f, 0x00,
        0x04, 0x00, 0x09, 0x00, 0x01, 0x00, 0x0d, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c,
        0x00, 0x01, 0x00, 0x98, 0x00, 0x08, 0x00, 0x99, 0x00, 0x08,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            307,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
                FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
                FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
            ]),
        )]))]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_wire, &mut templates_map, &good);
    assert!(templates_map.contains_key(&307));

    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
fn test_data_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // Version
        0x00, 0x60, // Length
        0x58, 0x3d, 0xe0, 0x59, // Export time
        0x00, 0x00, 0x0e, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x01, 0x33, // Set ID
        0x00, 0x50, // Flow Set Length
        0x46, 0x01, 0x73, 0x01, // Source IP
        0x32, 0x00, 0x47, 0x01, // Dest IP
        0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x3b, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x03, 0xcc, 0x2a, 0x6e, 0x65, 0x00, 0x00, 0x03, 0x56, 0x00, 0x00,
        0x05, 0x20, 0x00, 0x00, 0x00, 0x09, 0xb3, 0xf9, 0x06, 0xee, 0xb3, 0xfb, 0xaf, 0x3c, 0xcc,
        0x2a, 0x6e, 0xbd, 0x18, 0x18, 0x00, 0x04, 0x00, 0x00, 0x01, 0x58, 0xb1, 0xb1, 0x38, 0xff,
        0x00, 0x00, 0x01, 0x58, 0xb1, 0xb3, 0xe1, 0x4d,
    ];

    let f = vec![
        FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
        FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
        FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
        FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
        FieldSpecifier::new(ie::IE::icmpTypeCodeIPv4, 2).unwrap(),
        FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 4).unwrap(),
        FieldSpecifier::new(ie::IE::bgpNextHopIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
        FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
        FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
        FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
        FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
        FieldSpecifier::new(ie::IE::ipNextHopIPv4Address, 4).unwrap(),
        FieldSpecifier::new(ie::IE::sourceIPv4PrefixLength, 1).unwrap(),
        FieldSpecifier::new(ie::IE::destinationIPv4PrefixLength, 1).unwrap(),
        FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
        FieldSpecifier::new(ie::IE::ipVersion, 1).unwrap(),
        FieldSpecifier::new(ie::IE::flowStartMilliseconds, 8).unwrap(),
        FieldSpecifier::new(ie::IE::flowEndMilliseconds, 8).unwrap(),
    ];
    let template_id = 307;
    let fields = DecodingTemplate::new(Box::new([]), f.clone().into_boxed_slice());
    let mut templates_map = HashMap::from([(template_id, fields)]);
    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 57).unwrap(),
        3812,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(template_id).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(70, 1, 115, 1)),
                    ie::Field::destinationIPv4Address(Ipv4Addr::new(50, 0, 71, 1)),
                    ie::Field::ipClassOfService(0),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier::anyhostinternalprotocol),
                    ie::Field::sourceTransportPort(0),
                    ie::Field::destinationTransportPort(0),
                    ie::Field::icmpTypeCodeIPv4(0),
                    ie::Field::ingressInterface(827),
                    ie::Field::bgpSourceAsNumber(2),
                    ie::Field::bgpDestinationAsNumber(3),
                    ie::Field::bgpNextHopIPv4Address(Ipv4Addr::new(204, 42, 110, 101)),
                    ie::Field::egressInterface(854),
                    ie::Field::octetDeltaCount(1312),
                    ie::Field::packetDeltaCount(9),
                    ie::Field::flowStartSysUpTime(0xb3f906ee),
                    ie::Field::flowEndSysUpTime(0xb3fbaf3c),
                    ie::Field::ipNextHopIPv4Address(Ipv4Addr::new(204, 42, 110, 189)),
                    ie::Field::sourceIPv4PrefixLength(24),
                    ie::Field::destinationIPv4PrefixLength(24),
                    ie::Field::tcpControlBits(TCPHeaderFlags::new(
                        false, false, false, false, false, false, false, false,
                    )),
                    ie::Field::ipVersion(4),
                    ie::Field::flowStartMilliseconds(
                        Utc.with_ymd_and_hms(2016, 11, 29, 20, 5, 31)
                            .unwrap()
                            .with_nanosecond(519_000_000)
                            .unwrap(),
                    ),
                    ie::Field::flowEndMilliseconds(
                        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 25)
                            .unwrap()
                            .with_nanosecond(677_000_000)
                            .unwrap(),
                    ),
                ]),
            )]),
        }]),
    );
    test_parsed_completely_with_one_input(&good_wire, &mut templates_map, &good);
    assert_eq!(templates_map.get(&template_id).unwrap().processed_count, 1);
    test_write_with_one_input(&good, Some(&templates_map), &good_wire)?;
    Ok(())
}

#[test]
fn test_options_template_packet() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, // version
        0x00, 0x28, // length
        0x58, 0x3d, 0xe0, 0x57, // timestamp
        0x00, 0x00, 0x0e, 0xcf, // Seq
        0x00, 0x00, 0x00, 0x00, // Domain
        0x00, 0x03, // Set ID
        0x00, 0x18, // Set length
        0x01, 0x34, // Template ID
        0x00, 0x03, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x24, 0x00, 0x02, 0x00, 0x25, 0x00,
        0x02, 0x00, 0x00,
    ];

    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2016, 11, 29, 20, 8, 55).unwrap(),
        3791,
        0,
        Box::new([Set::OptionsTemplate(Box::new([
            OptionsTemplateRecord::new(
                308,
                Box::new([FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap()]),
                Box::new([
                    FieldSpecifier::new(ie::IE::flowActiveTimeout, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::flowIdleTimeout, 2).unwrap(),
                ]),
            ),
        ]))]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_wire, &mut templates_map, &good);
    test_write_with_one_input(&good, None, &good_wire)?;
    Ok(())
}

#[test]
#[rustfmt::skip]
fn test_complex_sequence() -> Result<(), IpfixPacketWritingError> {
    let mut templates_map = HashMap::new();
    let pkt1_wire = [
        0x00, 0x0a, 0x02, 0x24, 0x63, 0x4a, 0xe2, 0x9d, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x40, 0x04, 0x00, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
        0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02,
        0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01,
        0x00, 0x02, 0x00, 0x34, 0x04, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x04,
        0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04,
        0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x20, 0x00, 0x02, 0x00, 0x3c, 0x00, 0x01,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x02, 0x00, 0x40, 0x08, 0x00, 0x00, 0x0e, 0x00, 0x1b, 0x00, 0x10,
        0x00, 0x1c, 0x00, 0x10, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x07, 0x00, 0x02,
        0x00, 0x0b, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x3c, 0x00, 0x01,
        0x00, 0x05, 0x00, 0x01, 0x00, 0x02, 0x00, 0x34, 0x08, 0x01, 0x00, 0x0b, 0x00, 0x1b, 0x00, 0x10,
        0x00, 0x1c, 0x00, 0x10, 0x00, 0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04,
        0x00, 0x02, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x02,
        0x00, 0x3c, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x03, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x05,
        0x00, 0x01, 0x00, 0x8f, 0x00, 0x04, 0x00, 0xa0, 0x00, 0x08, 0x01, 0x31, 0x00, 0x04, 0x01, 0x32,
        0x00, 0x04, 0x01, 0x30, 0x00, 0x02, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x04, 0xbc, 0x00, 0x00,
        0x01, 0x83, 0xdc, 0x83, 0x41, 0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
        0x04, 0x00, 0x00, 0xf4, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x06, 0x9f,
        0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xe4, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x06, 0x9f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xe4, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x12, 0xa2,
        0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xf0, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x12, 0xa2, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xf0, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x1e, 0x7b,
        0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xdd, 0xfc, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x1e, 0x7b, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0xfc, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00,
    ];

    let pkt2_wire = [
        0x00, 0x0a, 0x05, 0x64, 0x63, 0x4a, 0xe2, 0xd9, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00,
        0x04, 0x00, 0x05, 0x54, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x2a, 0x36,
        0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xde, 0x04, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x2a, 0x36, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x04, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x36, 0x00,
        0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x7a, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x7a, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x41, 0xb9,
        0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x7e, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x41, 0xb9, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x7e, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x4d, 0x74,
        0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x90, 0x8c, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x4d, 0x74, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x8c, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x59, 0x2f,
        0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xf2, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x59, 0x2f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xf2, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x64, 0xe9,
        0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xf6, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x64, 0xe9, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xf6, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x70, 0xa3,
        0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0xfe, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x70, 0xa3, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0xfe, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x7c, 0x5c,
        0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x68, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x7c, 0x5c, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x68, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x88, 0x17,
        0x00, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x74, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x88, 0x17, 0x00, 0x00, 0x88, 0x18, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x74, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x93, 0xd0,
        0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x76, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x93, 0xd0, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x76, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0x9f, 0x8b,
        0x00, 0x00, 0x9f, 0x8c, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xd6, 0x7c, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0x9f, 0x8b, 0x00, 0x00, 0x9f, 0x8c, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x7c, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xab, 0x46,
        0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xd0, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0xab, 0x46, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xd0, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xb6, 0xfe,
        0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xde, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xb6, 0xfe, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xde, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xc3, 0x96,
        0x00, 0x00, 0xc3, 0x97, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0x87, 0xec, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xc3, 0x96, 0x00, 0x00, 0xc3, 0x97, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xec, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xcf, 0x4f,
        0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xb8, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0xcf, 0x4f, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xb8, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xdb, 0x09,
        0x00, 0x00, 0xdb, 0x0a, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xbe, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xdb, 0x09, 0x00, 0x00, 0xdb, 0x0a, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xbe, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x01, 0xc0, 0xa8, 0x38, 0x0a, 0x00, 0x00, 0xe6, 0xc5,
        0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x80, 0xe8, 0xc3, 0xc8, 0x06, 0x14, 0x04, 0x00, 0xc0, 0xa8, 0x38, 0x0a,
        0xc0, 0xa8, 0x38, 0x01, 0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0xe6, 0xc5, 0x00, 0x00, 0x00, 0x3c,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc8, 0x80, 0xe8,
        0x06, 0x02, 0x04, 0x00];

    let (_, _pkt1) = IpfixPacket::from_wire(Span::new(&pkt1_wire), &mut templates_map).unwrap();
    let (_, _pkt2)  = IpfixPacket::from_wire(Span::new(&pkt2_wire), &mut templates_map).unwrap();
    // TODO: test writing complex packets
    Ok(())
}

#[test]
#[rustfmt::skip]
fn test_example() -> Result<(), IpfixPacketWritingError> {
    let good_wire = [
        0x00, 0x0a, 0x00, 0x48, 0x63, 0xd5, 0x45, 0xac,
        0x00, 0x00, 0x0d, 0xf3, 0x00, 0x08, 0x00, 0x00,
        0x00, 0x03, 0x00, 0x38, 0x02, 0x00, 0x00, 0x0b,
        0x00, 0x01, 0x00, 0x90, 0x00, 0x04, 0x00, 0x29,
        0x00, 0x08, 0x00, 0x2a, 0x00, 0x08, 0x00, 0xa0,
        0x00, 0x08, 0x00, 0x82, 0x00, 0x04, 0x00, 0x83,
        0x00, 0x10, 0x00, 0x22, 0x00, 0x04, 0x00, 0x24,
        0x00, 0x02, 0x00, 0x25, 0x00, 0x02, 0x00, 0xd6,
        0x00, 0x01, 0x00, 0xd7, 0x00, 0x01, 0x00, 0x00
    ];


    let good = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 1, 28, 15, 56, 28).unwrap(),
        3571,
        524288,
        Box::new([Set::OptionsTemplate(
                Box::new([
                    OptionsTemplateRecord::new(
                        512,
                Box::new([
                    FieldSpecifier::new(ie::IE::exportingProcessId, 4).unwrap()
                ]),
                Box::new([
                    FieldSpecifier::new(ie::IE::exportedMessageTotalCount, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::exportedFlowRecordTotalCount, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::systemInitTimeMilliseconds, 8).unwrap(),
                    FieldSpecifier::new(ie::IE::exporterIPv4Address, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::exporterIPv6Address, 16).unwrap(),
                    FieldSpecifier::new(ie::IE::samplingInterval, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::flowActiveTimeout, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::flowIdleTimeout, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::exportProtocolVersion, 1).unwrap(),
                    FieldSpecifier::new(ie::IE::exportTransportProtocol, 1).unwrap(),
                ]),
            )]))]),
    );

    let mut templates_map = HashMap::new();
    //let (_, pkt1) = IpfixPacket::from_wire(Span::new(&good), &mut templates_map).unwrap();
    test_parsed_completely_with_one_input(&good_wire, &mut templates_map, &good);

    //test_write_with_one_input(&good, None, &good_wire)?;

    Ok(())
}

#[test]
fn test_with_variable_string_length() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x38, 0x65, 0x85, 0xa8, 0xdd, 0x00, 0x01, 0xce, 0x06, 0x00, 0x00, 0x82,
        0x20, 0x00, 0x03, 0x00, 0x28, 0x01, 0x01, 0x00, 0x07, 0x00, 0x01, 0x01, 0x2e, 0x00, 0x04,
        0x01, 0x31, 0x00, 0x04, 0x01, 0x30, 0x00, 0x02, 0x01, 0x35, 0x00, 0x04, 0x01, 0x36, 0x00,
        0x04, 0x00, 0x54, 0x00, 0x5a, 0x01, 0x4f, 0xff, 0xff, 0x00, 0x00,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x94, 0x65, 0x85, 0xa8, 0xdd, 0x00, 0x01, 0xce, 0x06, 0x00, 0x00, 0x82,
        0x20, 0x01, 0x01, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f, 0x57,
        0x2d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x2d, 0x4d, 0x41, 0x50, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x4e, 0x45, 0x54, 0x46, 0x4c, 0x4f,
        0x57, 0x2d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x52, 0x2d, 0x4d, 0x41, 0x50,
    ];
    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 12, 22, 15, 18, 53).unwrap(),
        118278,
        33312,
        Box::new([Set::OptionsTemplate(Box::new([
            OptionsTemplateRecord::new(
                257,
                Box::new([FieldSpecifier::new(ie::IE::selectorId, 4).unwrap()]),
                Box::new([
                    FieldSpecifier::new(ie::IE::samplingPacketInterval, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::selectorAlgorithm, 2).unwrap(),
                    FieldSpecifier::new(ie::IE::samplingSize, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::samplingPopulation, 4).unwrap(),
                    FieldSpecifier::new(ie::IE::samplerName, 90).unwrap(),
                    FieldSpecifier::new(ie::IE::selectorName, 65535).unwrap(),
                ]),
            ),
        ]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2023, 12, 22, 15, 18, 53).unwrap(),
        118278,
        33312,
        Box::new([Set::Data {
            id: DataSetId::new(257).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([ie::Field::selectorId(1)]),
                Box::new([
                    ie::Field::samplingPacketInterval(1),
                    ie::Field::selectorAlgorithm(ie::selectorAlgorithm::RandomnoutofNSampling),
                    ie::Field::samplingSize(1),
                    ie::Field::samplingPopulation(1),
                    ie::Field::samplerName("NETFLOW-SAMPLER-MAP".into()),
                    ie::Field::selectorName("NETFLOW-SAMPLER-MAP".into()),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);

    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);
    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;
    Ok(())
}

#[test]
fn test_with_nokia_pen_fields() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x5c, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x4c, 0x01, 0x90, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c,
        0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0xe1, 0x00, 0x04, 0x00,
        0xe3, 0x00, 0x02, 0x00, 0x94, 0x00, 0x08, 0x00, 0x04, 0x00, 0x01, 0x00, 0x26, 0x00, 0x01,
        0x80, 0x5b, 0x00, 0x02, 0x00, 0x00, 0x02, 0x7d, 0x80, 0x5c, 0x00, 0x02, 0x00, 0x00, 0x02,
        0x7d, 0x80, 0x5d, 0xff, 0xff, 0x00, 0x00, 0x02, 0x7d, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02,
        0x00, 0x04,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x54, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x44, 0x0a, 0x64, 0x00, 0x01, 0x0a, 0x64, 0x00, 0x97, 0x27, 0x14,
        0x00, 0x01, 0x08, 0x08, 0x08, 0x08, 0x22, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x21,
        0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0f, 0x15, 0x4c, 0x53, 0x4e, 0x2d, 0x48, 0x6f, 0x73,
        0x74, 0x40, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x30, 0x31, 0x00,
        0x00, 0x04, 0xb0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    ];
    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            400,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::postNATSourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::postNAPTSourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::flowId, 8).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::engineType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(ie::nokia::IE::aluInsideServiceId), 2).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(ie::nokia::IE::aluOutsideServiceId), 2).unwrap(),
                FieldSpecifier::new(ie::IE::Nokia(ie::nokia::IE::aluNatSubString), 65535).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(10, 100, 0, 1)),
                    ie::Field::destinationIPv4Address(Ipv4Addr::new(10, 100, 0, 151)),
                    ie::Field::sourceTransportPort(10004),
                    ie::Field::destinationTransportPort(1),
                    ie::Field::postNATSourceIPv4Address(Ipv4Addr::new(8, 8, 8, 8)),
                    ie::Field::postNAPTSourceTransportPort(8881),
                    ie::Field::flowId(10101010),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier::ICMP),
                    ie::Field::engineType(0),
                    ie::Field::Nokia(ie::nokia::Field::aluInsideServiceId(1)),
                    ie::Field::Nokia(ie::nokia::Field::aluOutsideServiceId(15)),
                    ie::Field::Nokia(ie::nokia::Field::aluNatSubString(
                        "LSN-Host@10.10.10.101".into(),
                    )),
                    ie::Field::octetDeltaCount(1200),
                    ie::Field::packetDeltaCount(1),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}

#[test]
fn test_with_vmware_pen_fields() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x88, 0x66, 0x8b, 0xb8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x78, 0x01, 0x90, 0x00, 0x12, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c,
        0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x94, 0x00, 0x08, 0x00,
        0x04, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x83, 0x7a, 0x00, 0x02,
        0x00, 0x00, 0x1a, 0xdc, 0x83, 0x78, 0x00, 0x02, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x79, 0x00,
        0x01, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x71, 0x00, 0x04, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x72,
        0x00, 0x04, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x76, 0x00, 0x02, 0x00, 0x00, 0x1a, 0xdc, 0x83,
        0x77, 0x00, 0x02, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x70, 0x00, 0x01, 0x00, 0x00, 0x1a, 0xdc,
        0x83, 0xba, 0x00, 0x01, 0x00, 0x00, 0x1a, 0xdc, 0x83, 0x82, 0xff, 0xff, 0x00, 0x00, 0x1a,
        0xdc,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x6a, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x5a, 0x0a, 0x64, 0x00, 0x01, 0x0a, 0x64, 0x00, 0x97, 0x27, 0x14,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x21, 0x12, 0x01, 0x00, 0x00, 0x04, 0xb0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x0c, 0x00, 0xc0, 0xa8, 0x8c, 0x06, 0xc0, 0xa8,
        0x8c, 0x44, 0x4e, 0x37, 0x01, 0xbb, 0x06, 0x00, 0x24, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61,
        0x61, 0x61, 0x2d, 0x62, 0x62, 0x62, 0x62, 0x2d, 0x63, 0x63, 0x63, 0x63, 0x2d, 0x64, 0x64,
        0x64, 0x64, 0x2d, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x65,
        0x00,
    ];

    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 7, 8, 10, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            400,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::flowId, 8).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::ingressInterfaceAttr), 2)
                    .unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::egressInterfaceAttr), 2)
                    .unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::vxlanExportRole), 1).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::tenantSourceIPv4), 4).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::tenantDestIPv4), 4).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::tenantSourcePort), 2).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::tenantDestPort), 2).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::tenantProtocol), 1).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::flowDirection), 1).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::virtualObsID), 65535).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(10, 100, 0, 1)),
                    ie::Field::destinationIPv4Address(Ipv4Addr::new(10, 100, 0, 151)),
                    ie::Field::sourceTransportPort(10004),
                    ie::Field::destinationTransportPort(1),
                    ie::Field::flowId(10101010),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier::ICMP),
                    ie::Field::octetDeltaCount(1200),
                    ie::Field::packetDeltaCount(1),
                    ie::Field::VMWare(ie::vmware::Field::ingressInterfaceAttr(10)),
                    ie::Field::VMWare(ie::vmware::Field::egressInterfaceAttr(12)),
                    ie::Field::VMWare(ie::vmware::Field::vxlanExportRole(0)),
                    ie::Field::VMWare(ie::vmware::Field::tenantSourceIPv4(Ipv4Addr::new(
                        192, 168, 140, 6,
                    ))),
                    ie::Field::VMWare(ie::vmware::Field::tenantDestIPv4(Ipv4Addr::new(
                        192, 168, 140, 68,
                    ))),
                    ie::Field::VMWare(ie::vmware::Field::tenantSourcePort(20023)),
                    ie::Field::VMWare(ie::vmware::Field::tenantDestPort(443)),
                    ie::Field::VMWare(ie::vmware::Field::tenantProtocol(
                        ie::vmware::tenantProtocol::TCP,
                    )),
                    ie::Field::VMWare(ie::vmware::Field::flowDirection(
                        ie::vmware::flowDirection::ingress,
                    )),
                    ie::Field::VMWare(ie::vmware::Field::virtualObsID(
                        "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee".into(),
                    )),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}

#[test]
fn test_with_vendor_unknown_fields() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x44, 0x66, 0x8b, 0xb8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x34, 0x01, 0x90, 0x00, 0x07, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04,
        0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x83, 0x7a, 0x00, 0x02, 0x00, 0x00, 0x1a, 0xdc, 0x89,
        0xf8, 0x00, 0x02, 0x00, 0x00, 0x1a, 0xdc, 0x89, 0xf9, 0xff, 0xff, 0x00, 0x00, 0x1a, 0xdc,
        0x83, 0x79, 0x00, 0x01, 0x00, 0x00, 0x1a, 0xdc,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x28, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x18, 0x0a, 0x64, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x0a, 0x11, 0xee, 0x03, 0x02, 0xee, 0xff, 0x00, 0x00, 0x00,
    ];

    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 7, 8, 10, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            400,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::ingressInterfaceAttr), 2)
                    .unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::Unknown { id: 2552 }), 2)
                    .unwrap(),
                // variable length
                FieldSpecifier::new(
                    ie::IE::VMWare(ie::vmware::IE::Unknown { id: 2553 }),
                    u16::MAX,
                )
                .unwrap(),
                FieldSpecifier::new(ie::IE::VMWare(ie::vmware::IE::vxlanExportRole), 1).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(10, 100, 0, 1)),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier::ICMP),
                    ie::Field::packetDeltaCount(1),
                    ie::Field::VMWare(ie::vmware::Field::ingressInterfaceAttr(10)),
                    ie::Field::VMWare(ie::vmware::Field::Unknown {
                        id: 2552,
                        value: Box::new([0x11, 0xee]),
                    }),
                    ie::Field::VMWare(ie::vmware::Field::Unknown {
                        id: 2553,
                        value: Box::new([0x02, 0xee, 0xff]),
                    }),
                    ie::Field::VMWare(ie::vmware::Field::vxlanExportRole(0)),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}

#[test]
fn test_with_iana_subregs() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x7c, 0x66, 0x8b, 0xb8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x6c, 0x01, 0x90, 0x00, 0x19, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c,
        0x00, 0x04, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x94, 0x00, 0x08, 0x00,
        0x04, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x01,
        0x00, 0x59, 0x00, 0x04, 0x00, 0x65, 0x00, 0x01, 0x00, 0x88, 0x00, 0x01, 0x00, 0xe5, 0x00,
        0x01, 0x00, 0xe9, 0x00, 0x01, 0x00, 0xef, 0x00, 0x01, 0x01, 0x15, 0x00, 0x01, 0x01, 0x1e,
        0x00, 0x02, 0x01, 0x29, 0x00, 0x01, 0x01, 0x80, 0x00, 0x01, 0x01, 0x86, 0x00, 0x02, 0x01,
        0x98, 0x00, 0x02, 0x01, 0xc0, 0x00, 0x01, 0x01, 0xd2, 0x00, 0x01, 0x01, 0xd3, 0x00, 0x01,
        0x01, 0xf4, 0x00, 0x01,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x48, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x38, 0x0a, 0x64, 0x00, 0x01, 0x0a, 0x64, 0x00, 0x97, 0x27, 0x14,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x21, 0x12, 0x01, 0x00, 0x00, 0x04, 0xb0,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x86, 0x12, 0x05, 0x0f, 0x02, 0x03, 0x01,
        0x00, 0x06, 0x05, 0x04, 0x00, 0x04, 0x00, 0x0a, 0x04, 0x04, 0x01, 0x05,
    ];

    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 7, 8, 10, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            400,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::flowId, 8).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::mplsTopLabelType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::forwardingStatus, 4).unwrap(),
                FieldSpecifier::new(ie::IE::classificationEngineId, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndReason, 1).unwrap(),
                FieldSpecifier::new(ie::IE::natOriginatingAddressRealm, 1).unwrap(),
                FieldSpecifier::new(ie::IE::firewallEvent, 1).unwrap(),
                FieldSpecifier::new(ie::IE::biflowDirection, 1).unwrap(),
                FieldSpecifier::new(ie::IE::observationPointType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::anonymizationTechnique, 2).unwrap(),
                FieldSpecifier::new(ie::IE::natType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::valueDistributionMethod, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowSelectorAlgorithm, 2).unwrap(),
                FieldSpecifier::new(ie::IE::dataLinkFrameType, 2).unwrap(),
                FieldSpecifier::new(ie::IE::mibCaptureTimeSemantics, 1).unwrap(),
                FieldSpecifier::new(ie::IE::natQuotaExceededEvent, 1).unwrap(),
                FieldSpecifier::new(ie::IE::natThresholdEvent, 1).unwrap(),
                FieldSpecifier::new(ie::IE::srhIPv6ActiveSegmentType, 1).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(10, 100, 0, 1)),
                    ie::Field::destinationIPv4Address(Ipv4Addr::new(10, 100, 0, 151)),
                    ie::Field::sourceTransportPort(10004),
                    ie::Field::destinationTransportPort(1),
                    ie::Field::flowId(10101010),
                    ie::Field::protocolIdentifier(ie::protocolIdentifier::ICMP),
                    ie::Field::octetDeltaCount(1200),
                    ie::Field::packetDeltaCount(1),
                    ie::Field::mplsTopLabelType(ie::mplsTopLabelType::Unknown),
                    ie::Field::forwardingStatus(ie::forwardingStatus::Dropped(
                        ie::forwardingStatusDroppedReason::Badheaderchecksum,
                    )),
                    ie::Field::classificationEngineId(ie::classificationEngineId::ETHERTYPE),
                    ie::Field::flowEndReason(ie::flowEndReason::lackofresources),
                    ie::Field::natOriginatingAddressRealm(
                        ie::natOriginatingAddressRealm::Unassigned(15),
                    ),
                    ie::Field::firewallEvent(ie::firewallEvent::FlowDeleted),
                    ie::Field::biflowDirection(ie::biflowDirection::perimeter),
                    ie::Field::observationPointType(ie::observationPointType::Physicalport),
                    ie::Field::anonymizationTechnique(
                        ie::anonymizationTechnique::StructuredPermutation,
                    ),
                    ie::Field::natType(ie::natType::NAT66translated),
                    ie::Field::valueDistributionMethod(
                        ie::valueDistributionMethod::SimpleUniformDistribution,
                    ),
                    ie::Field::flowSelectorAlgorithm(
                        ie::flowSelectorAlgorithm::UniformprobabilisticSampling,
                    ),
                    ie::Field::dataLinkFrameType(ie::dataLinkFrameType::Unassigned(10)),
                    ie::Field::mibCaptureTimeSemantics(ie::mibCaptureTimeSemantics::average),
                    ie::Field::natQuotaExceededEvent(
                        ie::natQuotaExceededEvent::Maximumactivehostsorsubscribers,
                    ),
                    ie::Field::natThresholdEvent(
                        ie::natThresholdEvent::Addresspoolhighthresholdevent,
                    ),
                    ie::Field::srhIPv6ActiveSegmentType(
                        ie::srhIPv6ActiveSegmentType::BGPSegmentRoutingPrefixSID,
                    ),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}

#[test]
fn test_zero_length_fields() {
    let good_template_wire = [
        0, 10, 0, 52, 52, 48, 24, 48, 48, 48, 1, 0, 1, 7, 0, 0, 0, 3, 0, 10, 53, 1, 0, 0, 0, 0, 0,
        3, 0, 10, 55, 1, 0, 0, 0, 0, 55, 1, 0, 10, 48, 56, 48, 0, 0, 0, 0, 55, 48, 0, 10, 55,
    ];
    let mut templates_map = HashMap::new();
    let ret = IpfixPacket::from_wire(Span::new(&good_template_wire), &mut templates_map);
    assert!(ret.is_err());
}

#[test]
fn test_with_unknown_pen() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0x38, 0x66, 0x8b, 0xb8, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0x00, 0x28, 0x01, 0x90, 0x00, 0x06, 0x00, 0x08, 0x00, 0x04, 0x00, 0x0c,
        0x00, 0x04, 0x82, 0x37, 0x00, 0x04, 0x00, 0x00, 0x00, 0xd5, 0x01, 0xd3, 0x00, 0x01, 0x83,
        0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0xd5, 0x01, 0xf4, 0x00, 0x01,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x00, 0x2c, 0x66, 0x74, 0x35, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x90, 0x00, 0x1c, 0x0a, 0x64, 0x00, 0x01, 0x0a, 0x64, 0x00, 0x97, 0x01, 0x02,
        0x03, 0x04, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x05, 0x00, 0x00,
    ];

    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 7, 8, 10, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            400,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv4Address, 4).unwrap(),
                FieldSpecifier::new(ie::IE::Unknown { pen: 213, id: 567 }, 4).unwrap(),
                FieldSpecifier::new(ie::IE::natThresholdEvent, 1).unwrap(),
                FieldSpecifier::new(ie::IE::Unknown { pen: 213, id: 769 }, 8).unwrap(),
                FieldSpecifier::new(ie::IE::srhIPv6ActiveSegmentType, 1).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2024, 6, 20, 14, 0, 0).unwrap(),
        0,
        0,
        Box::new([Set::Data {
            id: DataSetId::new(400).unwrap(),
            records: Box::new([DataRecord::new(
                Box::new([]),
                Box::new([
                    ie::Field::sourceIPv4Address(Ipv4Addr::new(10, 100, 0, 1)),
                    ie::Field::destinationIPv4Address(Ipv4Addr::new(10, 100, 0, 151)),
                    ie::Field::Unknown {
                        pen: 213,
                        id: 567,
                        value: vec![1, 2, 3, 4],
                    },
                    ie::Field::natThresholdEvent(
                        ie::natThresholdEvent::Addresspoolhighthresholdevent,
                    ),
                    ie::Field::Unknown {
                        pen: 213,
                        id: 769,
                        value: vec![1, 2, 3, 4, 5, 6, 7, 8],
                    },
                    ie::Field::srhIPv6ActiveSegmentType(
                        ie::srhIPv6ActiveSegmentType::BGPSegmentRoutingPrefixSID,
                    ),
                ]),
            )]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}

#[test]
fn test_with_unknown_pen_complex() -> Result<(), IpfixPacketWritingError> {
    let good_template_wire = [
        0x00, 0x0a, 0x00, 0xd8, 0x68, 0xad, 0x74, 0xec, 0x00, 0x00, 0x08, 0xb6, 0x80, 0x1e, 0x81,
        0x01, 0x00, 0x02, 0x00, 0xc8, 0x0a, 0x27, 0x00, 0x2f, 0x00, 0x1b, 0x00, 0x10, 0x00, 0x1c,
        0x00, 0x10, 0x00, 0x3e, 0x00, 0x10, 0x00, 0x02, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00,
        0x16, 0x00, 0x04, 0x00, 0x15, 0x00, 0x04, 0x00, 0xa0, 0x00, 0x08, 0x00, 0x3f, 0x00, 0x10,
        0x00, 0x0a, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x04, 0x00, 0x10, 0x00, 0x02, 0x00, 0x11, 0x00,
        0x02, 0x00, 0x07, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x02, 0x00, 0x3a, 0x00, 0x02, 0x00, 0x3b,
        0x00, 0x02, 0x80, 0xe8, 0x00, 0x02, 0x00, 0x00, 0x07, 0xdb, 0x00, 0x06, 0x00, 0x01, 0x00,
        0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x01, 0x00, 0x1d, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x01,
        0x00, 0x3d, 0x00, 0x01, 0x00, 0x59, 0x00, 0x01, 0x00, 0x1f, 0x00, 0x03, 0x00, 0x88, 0x00,
        0x01, 0x00, 0xd2, 0x00, 0x03, 0x00, 0x30, 0x00, 0x04, 0x00, 0xea, 0x00, 0x04, 0x00, 0xeb,
        0x00, 0x04, 0x01, 0x2e, 0x00, 0x08, 0x02, 0x03, 0x00, 0x04, 0x00, 0x50, 0x00, 0x06, 0x00,
        0x38, 0x00, 0x06, 0x00, 0xf3, 0x00, 0x02, 0x00, 0xf5, 0x00, 0x02, 0x00, 0xf4, 0x00, 0x01,
        0x00, 0xf6, 0x00, 0x01, 0x00, 0xd2, 0x00, 0x02, 0x01, 0xed, 0x00, 0x02, 0x01, 0xec, 0x00,
        0x01, 0x01, 0xf2, 0x00, 0x01, 0x01, 0xef, 0x00, 0x10, 0x01, 0xf4, 0x00, 0x01, 0x00, 0xd2,
        0x00, 0x02, 0x01, 0xf1, 0xff, 0xff,
    ];

    let good_data_wire = [
        0x00, 0x0a, 0x01, 0x94, 0x68, 0xad, 0x74, 0xff, 0x00, 0x00, 0x08, 0xb7, 0x80, 0x1e, 0x81,
        0x01, 0x0a, 0x27, 0x01, 0x84, 0x20, 0x01, 0x0d, 0xb8, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x20, 0x01, 0x0d, 0xb8, 0x00, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x62, 0x00, 0x61, 0x0b, 0xc0, 0x00, 0x61, 0x0b, 0xc0, 0x00, 0x00, 0x01, 0x98, 0xe5, 0x2f,
        0x9e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00,
        0x00, 0xb3, 0xfb, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x06, 0xc0, 0x80, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x24, 0x46, 0xe4, 0xa8, 0x4d, 0x1d, 0x60, 0x26, 0xaa, 0x7d, 0x9a, 0xc4,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x02, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x75, 0x00, 0x61,
        0x23, 0x30, 0x00, 0x61, 0x23, 0x30, 0x00, 0x00, 0x01, 0x98, 0xe5, 0x2f, 0x9e, 0x80, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb3, 0xef,
        0xa7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x18, 0x06, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x04,
        0xf8, 0xb1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
        0x24, 0x46, 0xe4, 0xa8, 0x4d, 0x0d, 0x30, 0xfb, 0xb8, 0xe6, 0x67, 0xac, 0x00, 0x17, 0x00,
        0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let good_template = IpfixPacket::new(
        Utc.with_ymd_and_hms(2025, 8, 26, 8, 48, 44).unwrap(),
        2230,
        2149482753,
        Box::new([Set::Template(Box::new([TemplateRecord::new(
            2599,
            Box::new([
                FieldSpecifier::new(ie::IE::sourceIPv6Address, 16).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv6Address, 16).unwrap(),
                FieldSpecifier::new(ie::IE::ipNextHopIPv6Address, 16).unwrap(),
                FieldSpecifier::new(ie::IE::packetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::octetDeltaCount, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowStartSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndSysUpTime, 4).unwrap(),
                FieldSpecifier::new(ie::IE::systemInitTimeMilliseconds, 8).unwrap(),
                FieldSpecifier::new(ie::IE::bgpNextHopIPv6Address, 16).unwrap(),
                FieldSpecifier::new(ie::IE::ingressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressInterface, 4).unwrap(),
                FieldSpecifier::new(ie::IE::bgpSourceAsNumber, 2).unwrap(),
                FieldSpecifier::new(ie::IE::bgpDestinationAsNumber, 2).unwrap(),
                FieldSpecifier::new(ie::IE::sourceTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::destinationTransportPort, 2).unwrap(),
                FieldSpecifier::new(ie::IE::vlanId, 2).unwrap(),
                FieldSpecifier::new(ie::IE::postVlanId, 2).unwrap(),
                FieldSpecifier::new(ie::IE::Unknown { pen: 2011, id: 232 }, 2).unwrap(),
                FieldSpecifier::new(ie::IE::tcpControlBits, 1).unwrap(),
                FieldSpecifier::new(ie::IE::protocolIdentifier, 1).unwrap(),
                FieldSpecifier::new(ie::IE::ipClassOfService, 1).unwrap(),
                FieldSpecifier::new(ie::IE::sourceIPv6PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::destinationIPv6PrefixLength, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowDirection, 1).unwrap(),
                FieldSpecifier::new(ie::IE::forwardingStatus, 1).unwrap(),
                FieldSpecifier::new(ie::IE::flowLabelIPv6, 3).unwrap(),
                FieldSpecifier::new(ie::IE::flowEndReason, 1).unwrap(),
                FieldSpecifier::new(ie::IE::paddingOctets, 3).unwrap(),
                FieldSpecifier::new(ie::IE::samplerId, 4).unwrap(),
                FieldSpecifier::new(ie::IE::ingressVRFID, 4).unwrap(),
                FieldSpecifier::new(ie::IE::egressVRFID, 4).unwrap(),
                FieldSpecifier::new(ie::IE::selectorId, 8).unwrap(),
                FieldSpecifier::new(ie::IE::ipv6ExtensionHeadersFull, 4).unwrap(),
                FieldSpecifier::new(ie::IE::destinationMacAddress, 6).unwrap(),
                FieldSpecifier::new(ie::IE::sourceMacAddress, 6).unwrap(),
                FieldSpecifier::new(ie::IE::dot1qVlanId, 2).unwrap(),
                FieldSpecifier::new(ie::IE::dot1qCustomerVlanId, 2).unwrap(),
                FieldSpecifier::new(ie::IE::dot1qPriority, 1).unwrap(),
                FieldSpecifier::new(ie::IE::dot1qCustomerPriority, 1).unwrap(),
                FieldSpecifier::new(ie::IE::paddingOctets, 2).unwrap(),
                FieldSpecifier::new(ie::IE::srhTagIPv6, 2).unwrap(),
                FieldSpecifier::new(ie::IE::srhFlagsIPv6, 1).unwrap(),
                FieldSpecifier::new(ie::IE::srhSegmentsIPv6Left, 1).unwrap(),
                FieldSpecifier::new(ie::IE::srhActiveSegmentIPv6, 16).unwrap(),
                FieldSpecifier::new(ie::IE::srhIPv6ActiveSegmentType, 1).unwrap(),
                FieldSpecifier::new(ie::IE::paddingOctets, 2).unwrap(),
                FieldSpecifier::new(ie::IE::srhSegmentIPv6ListSection, u16::MAX).unwrap(),
            ]),
        )]))]),
    );

    let good_data = IpfixPacket::new(
        Utc.with_ymd_and_hms(2025, 8, 26, 8, 49, 3).unwrap(),
        2231,
        2149482753,
        Box::new([Set::Data {
            id: DataSetId::new(2599).unwrap(),
            records: Box::new([
                DataRecord::new(
                    Box::new([]),
                    Box::new([
                        ie::Field::sourceIPv6Address(Ipv6Addr::from_str("2001:db8:44::1").unwrap()),
                        ie::Field::destinationIPv6Address(
                            Ipv6Addr::from_str("2001:db8:48::1").unwrap(),
                        ),
                        ie::Field::ipNextHopIPv6Address(Ipv6Addr::from_str("::1").unwrap()),
                        ie::Field::packetDeltaCount(1),
                        ie::Field::octetDeltaCount(98),
                        ie::Field::flowStartSysUpTime(6360000),
                        ie::Field::flowEndSysUpTime(6360000),
                        ie::Field::systemInitTimeMilliseconds(
                            Utc.with_ymd_and_hms(2025, 8, 26, 7, 2, 40).unwrap(),
                        ),
                        ie::Field::bgpNextHopIPv6Address(Ipv6Addr::from_str("::").unwrap()),
                        ie::Field::ingressInterface(25),
                        ie::Field::egressInterface(152),
                        ie::Field::bgpSourceAsNumber(0),
                        ie::Field::bgpDestinationAsNumber(0),
                        ie::Field::sourceTransportPort(179),
                        ie::Field::destinationTransportPort(64299),
                        ie::Field::vlanId(0),
                        ie::Field::postVlanId(0),
                        ie::Field::Unknown {
                            pen: 2011,
                            id: 232,
                            value: vec![0, 0],
                        },
                        ie::Field::tcpControlBits(TCPHeaderFlags::new(
                            false, false, false, false, true, false, false, false,
                        )),
                        ie::Field::protocolIdentifier(ie::protocolIdentifier::TCP),
                        ie::Field::ipClassOfService(192),
                        ie::Field::sourceIPv6PrefixLength(128),
                        ie::Field::destinationIPv6PrefixLength(128),
                        ie::Field::flowDirection(ie::flowDirection::ingress),
                        ie::Field::forwardingStatus(ie::forwardingStatus::Unknown(
                            ie::forwardingStatusUnknownReason::Unassigned(0),
                        )),
                        ie::Field::flowLabelIPv6(0),
                        ie::Field::flowEndReason(ie::flowEndReason::idletimeout),
                        ie::Field::paddingOctets(Box::new([0, 0, 0])),
                        ie::Field::samplerId(25),
                        ie::Field::ingressVRFID(0),
                        ie::Field::egressVRFID(0),
                        ie::Field::selectorId(6),
                        ie::Field::ipv6ExtensionHeadersFull(Box::new([0; 32])),
                        ie::Field::destinationMacAddress([36, 70, 228, 168, 77, 29]),
                        ie::Field::sourceMacAddress([96, 38, 170, 125, 154, 196]),
                        ie::Field::dot1qVlanId(0),
                        ie::Field::dot1qCustomerVlanId(0),
                        ie::Field::dot1qPriority(0),
                        ie::Field::dot1qCustomerPriority(0),
                        ie::Field::paddingOctets(Box::new([0, 0])),
                        ie::Field::srhTagIPv6(0),
                        ie::Field::srhFlagsIPv6(0),
                        ie::Field::srhSegmentsIPv6Left(0),
                        ie::Field::srhActiveSegmentIPv6(Ipv6Addr::from_str("::").unwrap()),
                        ie::Field::srhIPv6ActiveSegmentType(ie::srhIPv6ActiveSegmentType::Unknown),
                        ie::Field::paddingOctets(Box::new([0, 0])),
                        ie::Field::srhSegmentIPv6ListSection(Box::new([])),
                    ]),
                ),
                DataRecord::new(
                    Box::new([]),
                    Box::new([
                        ie::Field::sourceIPv6Address(Ipv6Addr::from_str("fd00::2").unwrap()),
                        ie::Field::destinationIPv6Address(Ipv6Addr::from_str("fd00::1").unwrap()),
                        ie::Field::ipNextHopIPv6Address(Ipv6Addr::from_str("::1").unwrap()),
                        ie::Field::packetDeltaCount(1),
                        ie::Field::octetDeltaCount(117),
                        ie::Field::flowStartSysUpTime(6366000),
                        ie::Field::flowEndSysUpTime(6366000),
                        ie::Field::systemInitTimeMilliseconds(
                            Utc.with_ymd_and_hms(2025, 8, 26, 7, 2, 40).unwrap(),
                        ),
                        ie::Field::bgpNextHopIPv6Address(Ipv6Addr::from_str("::").unwrap()),
                        ie::Field::ingressInterface(154),
                        ie::Field::egressInterface(154),
                        ie::Field::bgpSourceAsNumber(0),
                        ie::Field::bgpDestinationAsNumber(0),
                        ie::Field::sourceTransportPort(179),
                        ie::Field::destinationTransportPort(61351),
                        ie::Field::vlanId(0),
                        ie::Field::postVlanId(0),
                        ie::Field::Unknown {
                            pen: 2011,
                            id: 232,
                            value: vec![0, 1],
                        },
                        ie::Field::tcpControlBits(TCPHeaderFlags::new(
                            false, false, false, true, true, false, false, false,
                        )),
                        ie::Field::protocolIdentifier(ie::protocolIdentifier::TCP),
                        ie::Field::ipClassOfService(192),
                        ie::Field::sourceIPv6PrefixLength(128),
                        ie::Field::destinationIPv6PrefixLength(128),
                        ie::Field::flowDirection(ie::flowDirection::ingress),
                        ie::Field::forwardingStatus(ie::forwardingStatus::Unknown(
                            ie::forwardingStatusUnknownReason::Unassigned(0),
                        )),
                        ie::Field::flowLabelIPv6(325809),
                        ie::Field::flowEndReason(ie::flowEndReason::idletimeout),
                        ie::Field::paddingOctets(Box::new([0, 0, 0])),
                        ie::Field::samplerId(154),
                        ie::Field::ingressVRFID(1),
                        ie::Field::egressVRFID(0),
                        ie::Field::selectorId(4),
                        ie::Field::ipv6ExtensionHeadersFull(Box::new([0; 32])),
                        ie::Field::destinationMacAddress([36, 70, 228, 168, 77, 13]),
                        ie::Field::sourceMacAddress([48, 251, 184, 230, 103, 172]),
                        ie::Field::dot1qVlanId(23),
                        ie::Field::dot1qCustomerVlanId(0),
                        ie::Field::dot1qPriority(6),
                        ie::Field::dot1qCustomerPriority(0),
                        ie::Field::paddingOctets(Box::new([0, 0])),
                        ie::Field::srhTagIPv6(0),
                        ie::Field::srhFlagsIPv6(0),
                        ie::Field::srhSegmentsIPv6Left(0),
                        ie::Field::srhActiveSegmentIPv6(Ipv6Addr::from_str("::").unwrap()),
                        ie::Field::srhIPv6ActiveSegmentType(ie::srhIPv6ActiveSegmentType::Unknown),
                        ie::Field::paddingOctets(Box::new([0, 0])),
                        ie::Field::srhSegmentIPv6ListSection(Box::new([])),
                    ]),
                ),
            ]),
        }]),
    );

    let mut templates_map = HashMap::new();
    test_parsed_completely_with_one_input(&good_template_wire, &mut templates_map, &good_template);
    test_parsed_completely_with_one_input(&good_data_wire, &mut templates_map, &good_data);

    test_write_with_one_input(&good_template, Some(&templates_map), &good_template_wire)?;
    test_write_with_one_input(&good_data, Some(&templates_map), &good_data_wire)?;

    Ok(())
}
